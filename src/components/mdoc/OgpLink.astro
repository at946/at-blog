---
import ogpParser, { type OgpParserResult } from 'ogp-parser';
import type { OembedData } from 'ogp-parser/dist/core/fetchOembed';
import Link from './Link.astro';
import LinkCard from './LinkCard.astro';

interface Props {
	url: string;
	type?: 'link' | 'linkCard' | 'oembed';
}

const { url, type = 'linkCard' } = Astro.props;

const parsedOgp: OgpParserResult = await ogpParser(url)
	.then((data) => {
		return data;
	})
	.catch((error) => {
		throw error;
	});
const ogp: Record<string, string[]> = parsedOgp.ogp;
const oembed: OembedData | undefined = parsedOgp.oembed;

const ogTitle: string =
	typeof ogp['og:title'] === 'string' ? ogp['og:title'] : parsedOgp.title;
const ogUrl: string = typeof ogp['og:url'] === 'string' ? ogp['og:url'] : url;
const ogImage: string =
	typeof ogp['og:image'] === 'string' ? ogp['og:image'] : '';
const ogImageAlt: string =
	typeof ogp['og:image:alt'] === 'string' ? ogp['og:image:alt'] : '';
const html: string | undefined =
	oembed?.type === 'rich' ? oembed.html : undefined;

if (type === 'oembed' && !html) throw `No oembed html from ${url}`;
---

{ type === 'link' &&
  <Link href={String(ogUrl)} title={ogTitle}>{ogTitle}</Link>
}
{ type === 'linkCard' &&
  <LinkCard name={ogTitle} href={String(ogUrl)} imageSrc={ogImage} imageAlt={ogImageAlt} />
}
{ type === 'oembed' &&
  <div set:html={html} class="flex justify-center" />
}