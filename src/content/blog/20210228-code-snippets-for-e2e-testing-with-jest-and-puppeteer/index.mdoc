---
title: "Jest + PuppeteerのE2Eテストで使うコード集"
tags:
  - Jest
  - Puppeteer
  - E2Eテスト
  - テスト自動化
publicationDate: '2021-02-28'
isPublished: true
---

## はじめに

「[Nuxt on Dockerにて、Jest + Puppeteer でE2Eテスト環境をセットアップする](/blog/20210218-set-up-the-e2e-testing-environment-with-jest-and-puppeteer-on-nuxt-on-docker)」のブログで、Jest + Puppeteerを使ったE2Eテスト環境を整えました。
この記事では、実際にE2Eテストを記述するときに使う操作や検証のコードをまとめておきます。
自分が使ったコードを書いていくので、順次増えていく予定。

## 基本

テストファイル内の基本構文は以下のとおりです。

```js
describe('テストスイート名', () => {
  test('テストケース名', async () => {
    await page.goto('http://localhost:3000') // 操作とか
    await expect(page.url()).toBe('http://localhost:3000') // 検証とか
  })
})
```

### describeとtest

1つのファイルには1つの`describe`があります。そして、1つの`describe`の中に複数の`test`を記述できます。
`test`はテストケース、`describe`はテストスイート（テストケースを目的別などでまとめたもの）といえます。

`test`内は複数の操作と検証から成り立ちます。これらは`async/await`を使って直列に処理させます。
例の場合、`await page.goto('http://localhost:3000')`で「`http://localhost:3000`にアクセスする」操作をしています。
そして、`await expect(page.url()).toBe('http://localhost:3000')`で「表示中のページのURL期待通りである」検証しています。

[describe(name, fn)](https://jestjs.io/docs/ja/next/api#describename-fn)  
[test(name, fn, timeout)](https://jestjs.io/docs/ja/next/api#testname-fn-timeout)

### expect(X).toBe(Y)
検証は`expect(X).toBe(Y)`を使うことが多いです。`toBe`なので「`X`が`Y`である」ことを検証します。
他にも、`expect(X).not.toBe(Y)`で「`X`が`Y`**でない**」、`expect(X).toContain(Y)`で「`X`に`Y`が含まれている」など、`toBe`の部分を変化させることで色々な検証ができます。

[`expect`のメソッド](https://jestjs.io/docs/ja/next/expect#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89)

## 操作系
### ページにアクセスする
E2Eテストではページにアクセスしないと始まりませんね。ページにアクセスする場合は`page.goto()`を使います。
例えば`http://localhost:3000`にアクセスしたい場合は、以下のように書きます。
```js
await page.goto('http://localhost:3000')
```

[page.goto(url)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagegotourl-options)

### ボタンやリンクをクリックする
ボタンやリンクなどの要素をクリックするときは`page.click()`を使います。  
例えば、以下のボタン要素があるとします。
```html
<button id="hoge">Click me!!</button>
```
このボタンをクリックする場合、`id`属性を利用して以下のように書きます。
```js
await page.click('#hoge')
```

[page.click(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageclickselector-options)

### 入力フォームに文字を入力する
`input`や`textarea`に文字入力をします。  
例えば、以下のテキストフィールドがあるとします。
```html
<input type="text" id="hoge" />
```
このテキストフィールドに「こんにちは」と入力する場合、`id`属性を利用して以下のように書きます。
```js
await page.type('#hoge', 'こんにちは')
```

ちなみに、すでに文字が入力されている場合、入力済みの値に文字が追加されるので注意が必要です。
```js
await page.type('#hoge', 'こんにちは') // 「こんにちは」と入力されている状態になる
await page.type('#hoge', 'こんばんは') // 「こんにちはこんばんは」と入力されている状態になる
```

[page.type(selector, text)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagetypeselector-text-options)

### 入力フォームの文字を消す
`page.type()`は入力済みの文字列に追加されるので、新しく文字を入力したい場合は一度フォームの入力値をクリアする必要があります。
`await page.type('#hoge', '')`などでクリアできればいいのですが、そうはいきません。

```html
<input type="text" id="hoge" value="Hello" />
```
のようにすでに「Hello」が入力されているテキストフィールドの入力値を消す場合、例えば以下のようなコードで実現できます。

```js
const el = await page.$('#hoge')
await el.click({ clickCount: 3 })
await el.press('Backspace')
```
`page.$()`で`selector`に合致する要素を取得し、それを3回クリックし、`Backspace`を押す、という操作です。
実際にブラウザでテキストフィールド（内の文字列）を3回クリックすると、入力されている文字列が全選択の状態になり、そこで`Backspace`を押すと文字が全部消えますよね。
このようにブラウザで実際に行う操作をコーディングすることで入力フォームの文字をクリアできます。

最初に関数定義しておくとより使いやすいです。

```js
const clearInput = async (id) => {
  const el = await page.$(id)
  await el.click({ clickCount: 3 })
  await el.press('Backspace')
}

test('hoge' async () => {
  ...
  clearInput('#hoge')
})
```
これで、`clearInput('#hoge')`でid属性が`hoge`の`input`の入力文字を消すことができます。

[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)

### 入力フォームの文字を消して、新しい文字を入力する
上の２つを組み合わせれば、すでに文字が入力されている`input`に新しい文字列を1列で入力できる関数もつくれます。

```js
const newInput = async (id, value) => {
  const el = await page.$(id)
  await el.click({ clickCount })
  await el.press('Backspace')
  await page.type(id, value)
}

test('hoge', async () => {
  ...
  await newInput('#hoge', 'hogehoge')
  ...
})
```
よく使うので、関数化しておくと便利です。

### 画面遷移やリロードを待つ
```js
await page.waitForNavigation()
```
で画面遷移やリロードを待つことができます。

[page.waitForNavigation()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfornavigationoptions)

### 画面に要素が現れるまで待つ
例えば、以下のボタン要素があるとします。
```html
<button id="hoge">Click me!!</button>
```
このボタンがなにかの処理が終わってから表示されるとします。このとき、ボタンが表示される前に`page.click()`などをしてしまうと、要素が見つからないためエラーになってしまいます。
そこで、以下のようにして要素が現れるのを待ちます。

```js
await page.waitForSelector('#hoge')
```
もし、ボタンが現れない場合はテストがタイムアウトで失敗になるので注意です。

[page.waitForSelector(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforselectorselector-options)

### 画面から要素が消えるまで待つ
例えば、以下のボタン要素があり、一度クリックすると要素が消えるとします。
```html
<button id="hoge">押したら消えるよ</button>
```
画面から要素が消えるまで操作を待ちたい場合、以下のように書きます。

```js
await page.waitForSelector('#hoge', { hidden: true })
```
画面に要素が現れるまで待つ`page.waitForSelector()`の`hidden`オプションを有効にすることで、「消えるまで待つ」操作になります。

[page.waitForSelector(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforselectorselector-options)

### 指定時間待つ
時間を指定して操作や検証を待ちたいことがあります。例えば1秒待ちたい場合は次のコードで実現できます。
```js
await page.waitForTimeout(1000)
```
`()`の単位はミリ秒なので、1秒の場合は1000です。

[page.waitForTimeout(milliseconds)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfortimeoutmilliseconds)

### フォーカスを外したい
`input`に入力している状態からフォーカスを外す操作は`blur`を使えばできます。

```js
await page.$eval('#hoge', el => el.blur())
```

### とりあえずキーボード操作したい
要素関係なく矢印を押してみたり、Enterを押してみたり、というケースもあります。
その場合は`page.keyboard`が便利です。例えば「右矢印（→）」を押したい場合、以下のとおりです。

```js
await page.keyboard.press('ArrowRight')
```

[class: KeyBoard](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#class-keyboard)

### とりあえず操作したい
とりあえずブラウザを操作したい場合は`page.evaluate(pageFunction)`を使います。
例えば、ページをスクロールしたいときは`window.scrollTo()`を使うとできます。スクロールすると出現する要素、とか検証するときに使います。

```js
await page.evaluate(() => {
  window.scrollTo({ top: 1000 })
})
```

[page.evaluate(pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevaluatepagefunction-args)  
[window.scrollTo](https://developer.mozilla.org/ja/docs/Web/API/Window/scrollTo)

## 検証系
### 表示中のページのURLを検証する
表示中のページのURLは`page.url()`で取得できます。これが期待値（例：`http://localhost:3000`）かどうかは以下のように検証できます。

```js
await expect(page.url()).toBe('http://localhost:3000')
```

[page.url()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageurl)

### 要素が存在することを検証する
```html
<p id="hoge">Show me!!</p>
```
の要素がページに表示されているかどうかは以下のように検証できます。

```js
await expect(page.$('#hoge')).not.toBeNull()
```
`page.$()`は要素が見つからない場合`null`を返します。なので「Nullであること」を検証する`.toBeNull()`に否定の`.not`をつけることで「Nullでないこと」を確認し、要素が存在することを検証できます。

[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)  
[.not](https://jestjs.io/docs/ja/next/expect#not)  
[.toBeNull()](https://jestjs.io/docs/ja/next/expect#tobenull)

### 要素が存在しないことを検証する
```html
<p id="hoge" style="display: none;">見えない</p>
```
の要素が存在しない（表示されていない）ことを検証します。

```js
await expect(page.$('#hoge')).toBeNull()
```
`page.$()`は要素が見つからない場合`null`を返すので、`toBeNull()`で検証します。

[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)  
[.toBeNull()](https://jestjs.io/docs/ja/next/expect#tobenull)

### 要素の属性を検証する
例えば、以下のimg要素があるとします。
```html
<img id="hoge" src="./images/hoge.png" />
```
このimg要素の`src`が正しく設定されているか検証したいとします。
この場合、`page.$eval()`を使って`src`属性を取得して検証できます。

```js
const src = await page.$eval('#hoge', el => el.src)
await expect(src).toBe('./images/hoge.png')
```
`page.$eval(selector, pageFunction)`は`selector`で取得した要素に対して`pageFunction`を返します。例の場合は`selector`に`#hoge`、`pageFunction`に`el => el.src`としているので、`#hoge`の`img`の`src`を取得してます。

[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)

### 要素のテキストを検証する
例えば、以下のparagraph要素があるとします。
```html
<p id="greeting">こんにちは！</p>
```
このparagraph要素のテキストが意図通りか検証したいとします。

```js
const text = await page.$eval('#greeting', el => el.innerText)
await expect(text).toBe('こんにちは！')
```
要素の属性の検証と似ていますが、`innerText`を用いて`el`の中のテキストを抜いてくる方法があります。

[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)  
[HTMLElement.innerText](https://developer.mozilla.org/ja/docs/Web/API/HTMLElement/innerText)

### `input`の入力値を検証する
これも要素の属性検証の応用です。
```html
<input id="hoge" type="text" />
```
のようなテキストフィールドに「こんにちは」と入力して、「こんにちは」と入力されたかを検証する、といった流れです。
`input`の入力値は`value`属性になるので、それを拾ってくればOKです。

```js
await page.type('#hoge', 'こんにちは')
await expect(await page.$eval('#hoge', el => el.value)).toBe('こんにちは')
```

[page.type(selector, text)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagetypeselector-text-options)  
[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)  
[HTMLInputElement](https://developer.mozilla.org/ja/docs/Web/API/HTMLInputElement)

### `button`が非活性かを検証する
これも要素の属性検証の応用です。
```html
<button id="hoge" disabled>押せないよ</button>
```
のような非活性なボタンを、ちゃんと非活性になっているか検証します。

```js
await expect(await page.$eval('#hoge', el => el.disabled)).toBe(true)
```
`HTMLButtonElement`はTrue or Falseの`disabled`を持っているのでそれで検証します。
逆にボタンが活性状態かは以下で検証できます。

```js
await expect(await page.$eval('#hoge', el => el.disabled)).toBe(false)
```

[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)  
[HTMLButtonElement](https://developer.mozilla.org/ja/docs/Web/API/HTMLInputElement)

### 複数の要素の属性を検証する
例えば、以下のように複数のimg要素があるとします。
```html
<img class="img" src="./images/hoge.png" />
<img class="img" src="./images/fuga.png" />
```
この2つのimg要素の`src`がそれぞれ意図通りかを調べたいとします。

```js
const srcs = page.$$eval('.img', els => els.map(el => el.src))
await expect(src[0]).toBe('./images/hoge.png')
await expect(src[1]).toBe('./images/fuga.png')
```
まず、`page.$$rval()`で`img`classの要素の配列を取得して、後続のfunctionに`els`として流してます。
次に、`map`を使って配列の1要素ずつの`src`を取り出し、`srcs`に返却しています。
`srcs`は`img`classの要素の`src`属性が順番に並んだ配列なので、`src[index]`で順番を指定して検証ができます。

[page.$$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args)  
[Array.prototype.map()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map)

### `target="_blank"`の別タブで開くを検証する
```html
<a id="link_google" href="https://www.google.com/" target="_blank">Google</a>
```
のように別タブで遷移した場合、新しく開いたタブを検証したいときがあります。
検索すると`browser.once('targetcreated', function)`を使ってやる例が多かったのですが、やりたいことができず直感的でない感じもしたため、以下のやり方で検証してます。

```js
await page.click('#link_google')
await page.waitForTimeout(2000)
const pages = await browser.pages()
const newPage = pages[pages.length - 1]
await expect(newPage.url()).toBe('https://www.google.com/')
```
少しダサいですが、リンククリック後、タブの準備が整うまで`page.waitForTimeout()`でスリープを入れています。
その後、`browser.page()`で全てのタブを取得し、`pages[pages.length - 1]`で一番うしろのタブ、つまり今新しく開かれたタブを`newPage`に入れてます。

[page.click(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageclickselector-options)  
[page.waitForTimeout(milliseconds)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfortimeoutmilliseconds)  
[browser.pages()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#browserpages)  
[page.url()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageurl)

### meta tagsを検証する
メタタグも要素の１つですので、他の要素と同じように検証できます。
例えば、Nuxt.jsの場合、`nuxt.config.js`では以下のようにメタタグの定義します。
```js:nuxt.config.js
export default {
  head: {
    meta: [
      { hid: 'og:site_name', property: 'og:site_name', content: 'MyApp' }
    ]
  }
}
```
これは以下のようにHTMLに変換されるため、同様に扱うことができます。
```html
<head>
  <mata data-n-head="ssr" data-hid="og:site_name" property="og:site_name" content="MyApp">
</head>
```

```js
await expect(await page.$eval('meta[property="og:site_name"]', el => el.content)).toBe('MyApp')
```
で検証が可能です。

[page.$$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args)  
[メタタグと SEO - NuxtJS](https://ja.nuxtjs.org/docs/2.x/features/meta-tags-seo/)

## おわりに
テストコードを書く機会があったので、よく使いそうだなというコードをユースケースドリブンでまとめてみました。
色々なサイトを巡りましたが、最終的にはソースに落ち着く、ということで以下のページをとても参考にしました。
- [puppeteer/api.md at main · puppeteer/puppeteer](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md)  
- [Expect · Jest](https://jestjs.io/docs/ja/next/expect)

今後も新しいテストを書いたら追加していきます。
