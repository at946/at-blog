---
title: Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦
tags: [Google Spreadsheet, Nuxt.js]
date: '2021-09-26'
published: true
---

スプレッドシートをデータベースとして活用する方法をまとめます。

いま話題のTwitterスペースと出会えるプロダクトspaces.bz（クローズ済み）を開発しています。

GASでTwitter APIをたたいてスプレッドシートに記録するプロトタイプからはじめました。
プロトタイプのあと、このままスプレッドシートをDBとして使えれば楽なのではと考え、Nuxt + Spreadsheet構成でプロダクトを開発してみたので、体験記をまとめます。

## この記事でやること
スプレッドシートからデータを取得して表示するNuxtアプリを作ります。
サンプルのスプレッドシートは以下のようなイメージ。

|id|name|age|email|
| --- | --- | --- | --- |
|1|Test A|20|test_a@sample.com|
|2|Test B|30|test_b@sample.com|
|3|Test C|40|test_c@sample.com|

## スプレッドシートをJSONで返却するGASを作成

まずはスプレッドシートの情報を取得するAPIみたいなものを作っていきます。
GASでプログラムを組んでWebアプリとして公開する、をしますが、GASの方からやっていきます。

```js:コード.js
function doGet() {
  const users = getUsers()

  return ContentService
    .createTextOutput(JSON.stringify(users))
    .setMimeType(ContentService.MimeType.JSON)
}

function getUsers() {
  const ss = SpreadsheetApp.openById('スプレッドシートのID')
  const sheet = ss.getSheetByName('シート名')
  const rows = sheet.getDataRange().getValues()
  const keys = rows.splice(0,1)[0]

  const users = rows.map((row) => {
    const object = {}
    row.map((value, index) => {
      object[keys[index]] = value
    })
    return object
  })

  return users
}
```

ちょこっとコードをみてみます。

### doGet関数
このコードの最初の肝は`doGet`関数を用いていることです。
この後Webアプリで公開すると話しましたが、`doGet`関数はWebアプリで公開したURLにGETリクエストが来たときに動く関数です。

[Web Apps  |  Apps Script  |  Google for Developers](https://developers.google.com/apps-script/guides/web)

今回のコードでは`doGet`関数が動き出したら`getUsers`関数を呼び出してスプレッドシートの中身をJSONに整形し返却します。

```js
return ContentService
  .createTextOutput(JSON.stringify(users))
  .setMimeType(ContentService.MimeType.JSON)
```

### getUser関数
次に、`getUser`関数をみてみます。

```js
const ss = SpreadsheetApp.openById('スプレッドシートのID')
```

最初に対象のスプレッドシートを読み込んでいます。スプレッドシートのIDはスプレッドシートのURLからわかり、`https://docs.google.com/spreadsheets/d/*****/edit`の`*****`の部分です。

```js
const sheet = ss.getSheetByName('シート名')
```

次に、そのスプレッドシートの`シート名`のシートを持ってきます。

```js
const rows = sheet.getDataRange().getValues()
```
そして、そのシートのデータが入力されているセルのデータを行単位の配列で取得します。
サンプルの例だと、`rows`の値は以下のようになっています。

```js
rows = [
  ['id', 'name', 'age', 'email'],
  ['1', 'Test A', '20', 'test_a@sample.com'],
  ['2', 'Test B', '30', 'test_b@sample.com'],
  ['3', 'Test C', '40', 'test_c@sample.com']
]
```

```js
const keys = rows.splice(0,1)[0]
```
お次は`rows`の1つ目の配列を取り出して`keys`に代入しています。これによって、`keys`、`rows`は以下のようになります。

```js
keys = ['id', 'name', 'age', 'email']

rows = [
  ['1', 'Test A', '20', 'test_a@sample.com'],
  ['2', 'Test B', '30', 'test_b@sample.com'],
  ['3', 'Test C', '40', 'test_c@sample.com']
]
```
これで`keys`がjsonのkeyになり、`rows`に残った項目がvalueになる未来が見えてきました。

```js
const users = rows.map((row) => {
  const object = {}
  row.map((value, index) => {
    object[keys[index]] = value
  })
  return object
})
```
そんな未来を実現するコードがこれです。
`rows.map((row) => { 処理 })`で`rows`から配列を一つずつ持ってきて変数`row`に格納し`処理`を実行しています。
`処理`の部分でも`row.map((value, index) => { 処理2 })`として`row`の要素を一つずつ取り出します。
`処理2`で`object[keys[index]] = value`とすることで各配列をオブジェクトの形に整形しています。

最終的に`users`の値はこんな感じです。

```js
users = [
  {
    id: 1,
    name: 'Test A',
    age: 20,
    email: 'test_a@sample.com'
  },
  {
    id: 2,
    name: 'Test B',
    age: 30,
    email: 'test_b@sample.com'
  },
  {
    id: 3,
    name: 'Test C',
    age: 40,
    email: 'test_c@sample.com'
  }
]
```
これを最後に`return`する関数です。

これでWebアプリを公開したときにスプレッドシートのシートをjsonで返却するGASの準備ができたので、次はWebアプリを公開していきます。

## Webアプリを公開する

[Web Apps  |  Apps Script  |  Google for Developers | #test_a_web_app_deployment](https://developers.google.com/apps-script/guides/web#test_a_web_app_deployment)

WebサイトはGASのエディターの上部にある「デプロイ」ボタンから行います。

![デプロイ](./images/1_deploy.png)

「デプロイ」>「新しいデプロイ」を選択して...。

![新しいデプロイ](./images/2_new_deploy.png)

「種類の選択」>「ウェブアプリ」を選択して...。

![設定](./images/3_setting.png)

「新しい説明文」にわかりやすい名前（productionとかtestとか）、「次のユーザーとして実行」に「自分」を、「アクセスできるユーザー」に「全員」を設定し、「デプロイ」を選択して...。

![認証](./images/4_authorize.png)

（必要な場合は）「アクセスを承認」を選択して...。

![Google認証](./images/5_login.png)

「Google認証」して...。

![Continue](./images/6_continue.png)

「Advanced」を選択して、「\<プロジェクト名\>\(unsafe\)」を選択して...。

![アクセスを許可](./images/7_allow_access.png)

「Allow」して...。

![デプロイ完了](./images/8_finish_deploying.png)

完了です🎉。
「ウェブアプリ」の方に書いてあるURLがAPI（サイトとしても）公開しているURLになります。ちょっとcurlしてみましょう。

```sh
$ curl -L <URL>

[
  {"id":1,"name":"Test A","age":20,"email":"test_a@sample.com"},
  {"id":2,"name":"Test B","age":30,"email":"test_b@sample.com"},
  {"id":3,"name":"Test C","age":40,"email":"test_c@sample.com"}
]
```
返却されていますね。

画面じゃないとわかりにくいなと思い、画像多めでお届けしました。
ってことなので、これをNuxtでの表示を作っていきます。

## NuxtでAPI叩いて表示
最後に、今公開したAPIをNuxtアプリから叩いてデータを表示していきます。

まず、APIを叩くために[`@nuxtjs/axios`](https://axios.nuxtjs.org/)を導入してきます。

[Introduction - Axios Module](https://axios.nuxtjs.org/)

```sh
$ yarn add @nuxtjs/axios
```

`nuxt.config.js`でモジュール登録もしてきましょう。

```js:nuxt.config.js
  export default {
    ...
    modules: [
+     '@nuxtjs/axios'
    ],
    ...
  }
```

axiosはCORS対策もしっかりしてくれているので、このままでは先程作ったウェブアプリのAPIを叩けません。
そこで、proxyします。

```js:nuxt.config.js
  export default {
    ...
    modules: [
      '@nuxtjs/axios'
    ],
+   axios: {
+     proxy: true
+   },
+   proxy: {
+     '/api': {
+       target: <ウェブアプリのURL>,
+       pathRewrite: { '^/api': '' }
+     }
+   },
    ...
  }
```

これで、内部の`/api`にaxiosでデータ取得しようとするとCORS対策を迂回してウェブアプリのAPIを叩くことができます。
ちょうど、このURLは信頼できるURLだよ、と登録しているような感覚ですね。

これでウェブアプリのAPIを叩く準備が整ったので、ページを作成していきます。

```vue:pages/index.vue
<template>
  <div>
    <table>
      <thead>
        <tr>
          <th>id</th>
          <th>name</th>
          <th>age</th>
          <th>email</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for='user in users' :key='user.id'>
          <td>{{ user.id }}</td>
          <td>{{ user.name }}</td>
          <td>{{ user.age }}</td>
          <td>{{ user.email }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script>
export default {
  data() {
    return {
      users: []
    }
  },
  created() {
    this.getUsers()
  },
  methods: {
    async getUsers() {
      this.users = await this.$axios.$get('/api')
    }
  }
}
</script>
```

ちょっと長いですが、`template`の方は`table`と`v-for`使っているだけなので説明は省略です。

重要なのは`script`側ですね。
今回は`methods`で`getUsers()`を`async-await`で記述し、`created`で呼び出してます。`getUsers()`は、`axios`を使ってウェブアプリAPIからスプレッドシートのデータを取得して、`this.users`にデータを代入してます。

これでページにアクセスしてみると...。

![データ取得成功！](./images/9_result.png)

スプレッドシートと同じ情報を表示できていますね🎉🎉🎉。

## まとめ
今回はスプレッドシートをDB代わりに使えないかなー、ということで以下をやってみました。

- GASのウェブアプリを使ってスプレッドシートの情報を返却するAPIを作ってみた
- NuxtアプリでそのAPIを使ってスプレッドシートの情報を表示してみた

それぞれいろいろな参考記事を書いてくださっている方々がいらっしゃったんですが、あわせ技のところで困ったりしたので一連通してやるとこうなるぞという記事を書いてみました。
これですべてが上手くいった...そう思っていたのですが...。

**次回、モバイルでもそれ動くのか**

お楽しみに😆...😢。

続編を公開しました。

[NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！](/blog/20210928-operation-to-use-google-spreadsheet-as-a-db-with-nuxt2)
