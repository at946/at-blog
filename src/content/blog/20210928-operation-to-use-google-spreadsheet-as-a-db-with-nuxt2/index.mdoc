---
title: "NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！"
tags:
  - Google Sheets
  - Google Apps Script
  - Nuxt
publicationDate: 2021-09-28
---

［前回の記事］
{% ogpLink url="https://at-blog.vercel.app/blog/20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt" /%}

前回の記事で、見事NuxtでスプレッドシートをDBの代わりとして使えるようになりました🎉🎉🎉。

そう...PCでは...。

実際にngrokとかで試していただくとわかるのですが、この方法だとモバイルからアクセスしたときに機能しません。
少なくとも僕のiPhone8 + Chrome構成ではアクセスできません...。

今開発しているspaces.bzでも、ローカル開発で自動テストも通ってリリース、としたらモバイルでアクセスできず「ぐぬぬ」となったのはよい思い出。

ということなので、モバイルでもスプレッドシートのデータを表示するぞ💪。

## 何がだめだったのか
PCでできてモバイルでできないとは何事か。一体何が起きているのでしょう。
axiosでエラーハンドリングしてみると、モバイルでは「**Error: Network Error**」と表示されます。こいつだ👮。

「axios network error mobile」「axios network error gas」など色々検索してみると、どうやらCORS周りが怪しいようです。
簡単に言えば`Access-Control-Allow-Origin`に`*`とかを設定するのではなく、ちゃんとOriginを設定しろとのこと。
が、GASはヘッダー情報をいじれない...。

ということで、`jsonp`を利用してCORSを回避する方法が情報としては多かったです。

- {% ogpLink url="https://teratail.com/questions/171692" type="link" /%}
- {% ogpLink url="https://stackoverflow.com/questions/29525860/cross-domain-requests-stopped-working-due-to-no-access-control-allow-origin-he" type="link" /%}
- {% ogpLink url="https://qiita.com/miyamotok0105/items/961d7877f8d13a9cd93c" type="link" /%}

今回はJSONPで情報を取得できるようにしてみます。

## やること
- Nuxtのデータ取得をJSONPバージョンに更新
- GASのレスポンスをJSONPバージョンに更新

## Nuxtの更新
まずはNuxt側の更新をしていきます。最初に`axios`の中で`jsonp`を使えるようにしてくれる`axios-jsonp`を導入します。

{% ogpLink url="https://www.npmjs.com/package/axios-jsonp" /%}

ちなみに`axios`自体は`jsonp`をサポートしていないようです。

{% ogpLink url="https://github.com/axios/axios/blob/master/COOKBOOK.md#jsonp" /%}

```bash
$ yarn add axios-jsonp
```

axiosのオプションに`adapter`として指定します。

```diff:vue:pages/index.vue ins={3,4,17} del={16}
  ...
  <script>
+   const jsonpAdapter = require('axios-jsonp')
+ 
    export default {
      data() {
        return {
          users: []
        }
      },
      created() {
        this.getUsers()
      },
      methods: {
        async getUsers() {
-         this.users = await this.$axios.$get('/api')
+         this.users = await this.$axios.$get('/api', { adapter: jsonpAdapter })
        }
      }
    }
  </script>
```

Nuxt側の準備はこれで以上です👏。

次は、GASを更新します。

## GASの更新

JSONPが何者かっていうと、JSONをCallback関数の引数として返すものです。

{% ogpLink url="https://gihyo.jp/dev/serial/01/crossbrowser-javascript/0011" /%}

通信のイメージは以下のとおりです。

- リクエスト側：このCallback関数にデータちょうだーい
- レスポンス側：データをCallback関数の引数にして送るよー
- リクエスト側：ありがとー。あとはこっちのCallback関数で処理するぞー

`axios-jsonp`はリクエスト側の「callback関数を自動で生成する」「axiosっぽくcallback関数で処理する」などをやってくれるライブラリということですね。

なのでGAS側もその挙動に合わせてコーディングし直します。更新する箇所は`コード.js`の`doGet`関数の部分だけです。

```diff:js:コード.js ins={2,4,8,10} del={1,7,9}
- function doGet() {
+ function doGet(e) {
    const users = getUsers()
+   const callback = e.parameter.callback

    return ContentService
-     .createTextOutput(JSON.stringify(users))
+     .createTextOutput(`${callback}(${JSON.stringify(users)})`)
-     .setMimeType(ContentService.MimeType.JSON)
+     .setMimeType(ContentService.MimeType.JAVASCRIPT)
  }
```

以上です。ちょっと説明。

```js
function doGet(e) {
```

`doGet`関数は引数`e`を利用可能です。`event`ですね。ここからURLのクエリパラメーターを取得できたりします。

{% ogpLink url="https://developers.google.com/apps-script/guides/web?hl=en#request_parameters" /%}

`axios-jsonp`はクエリパラメーター`callback`でcallback関数を指定してくれるので、それを取得してレスポンスで返却するために`e`を追加します。

```js
const callback = e.parameter.callback
```

こんな感じ。

```js
.createTextOutput(`${callback}(${JSON.stringify(users)})`)
```

この部分で`callback([{'id': '1', ...}, ...])`みたいなレスポンスを生成しています。
これを`axios-jsonp`が受け取っていい感じにデータ`[{'id': '1', ...}, ...]`を扱ってくれるんですね。


```js
.setMimeType(ContentService.MimeType.JAVASCRIPT)
```

最後にJSONPはJSONとは異なり、MimeTypeを`JAVASCRIPT`にする必要があるので更新します。

以上でGASの更新も完了です。👏
WebAppをデプロイしてモバイルでもデータを表示できるか試してみましょう。

### 小噺：デプロイは「デプロイを管理」から
また新しいデプロイからWebAppを作成するとURLが前回から変わってしまいます。
「デプロイ」>「デプロイを管理」からバージョンアップがおすすめです。

![デプロイを管理](./images/1_manage_deploy.png)

## まとめ
前回、スプレッドシートをDB代わりとして使えるようになったかと思いきや、まさかのモバイルで使えない問題...
今回はJSONPを使うことでモバイルでもスプレッドシートのデータを表示できました。

これでPCとモバイルの両方でデータを表示できたし一見落着...と思いきや...
spaces.bzでもこの方式でサービス提供していたのですが、いまは別のやり方にしてます。

## 続編

{% ogpLink url="https://at-blog.vercel.app/blog/20211001-operation-to-use-google-spreadsheet-as-a-db-with-nuxt3" /%}