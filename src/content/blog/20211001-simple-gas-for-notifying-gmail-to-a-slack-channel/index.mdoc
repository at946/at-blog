---
title: "GmailをSlackのチャンネルに通知する超シンプルなGAS"
tags:
  - Google Apps Script
  - Gmail
  - Slack
publicationDate: '2021-10-01'
isPublished: true
---

友人と個人開発してまして、各種サービスは共有のGoogleアカウントを使っています。
どちらかしか通知を受けられない、操作できないのは面倒なので。

しかし、自分たちもGoogleアカウントを持っており、Gmailを見るためにアカウントを切り替えるのは面倒です。
また、コミュニケーションはSlackで行っているので、GmailをSlackのチャンネルに通知してSlackで会話できるといいなーと思っていました。

色々と調べると以下の方法が紹介されていました。

1. Slackの転送先メールアドレスをGmailの転送先に指定する
2. Google Workspace Marketplaceの「[Slack for Gmail](https://workspace.google.com/marketplace/app/slack_for_gmail/533288507123?hl=ja)」を使う
2. Slackの「[Email](https://spacesbz.slack.com/apps/A0F81496D-email?tab=more_info)」アプリを使う
3. GAS

しかしながら、どれも要件を満たすのが難しそう。

`1`はslackbotへのDMになってしまいチャンネルポストができなそうです。

`2`はブラウザでGmailを開いて、メールごとチャンネルごとに手作業が必要です。

`3`は「Email」アプリが有料ワークスペースでないと使えなそうです。

`4`は検索で引っかかるコードを見る限り、割と複雑そうです。

んー、どうしたものか。

ん。`4`、本当に複雑なのか。

あれ、お前、実はもっとシンプルになるんじゃないのか。

ということで、GmailをSlackに通知するGASはすごくシンプルだよ、の例を示します。

## サンプルコード

いきなりサンプルコードです（メールをSlackに転送したいアカウントでやってください）。

```js:コード.js
function main() {
  const threads = GmailApp.search('in:Inbox is:Unread', 0, 100)
  
  threads.forEach((thread) => {
    thread.getMessages().forEach((message) => {
      if (!message.isUnread()) { return }
      const text = create_message(message)
      send_to_slack(text)
      message.markRead()
    })
  })
}

function create_message(message) {
  return  `[Date] ${message.getDate()}`
          + `\n[From] ${message.getFrom()}` 
          + `\n[Subject] ${message.getSubject()}`
          + `\n[Body]\n${message.getPlainBody()}`
}

function send_to_slack(text) {
  const webhook_url = <SlackのIncoming webhook URL>
  const headers = { "Content-type": "application/json" }
  const data = { "text": text }
  const options = {
    "method": "post",
    "headers": headers,
    "payload": JSON.stringify(data),
    "muteHttpExceptions": true
  }
  UrlFetchApp.fetch(webhook_url, options)
}
```

`send_to_slack`関数はSlackにテキストメッセージを送るところなのでノーカウント（この記事では説明しません）とすると、めちゃくちゃシンプルじゃありませんか。

JavaScriptのコードはおいておいて、GmailApp系の部分をちょっとだけ解説します。

### GmailApp.search()

```js
const threads = GmailApp.search('in:Inbox is:Unread', 0, 100)
```
`GmailApp.search(query, start, max)`は`query`の条件に合うスレッドの配列(`GmailThread[]`)を取得する関数です。
今回は`'in:Inbox is:Unread'`を指定しているので、「受信ボックス」の中で「未読」のものを拾ってきます。
また、`start`に`0`、`max`に`100`を指定しているので、最新のスレッドから100件までの中から`query`を検索してもらっています。

[Class GmailApp  |  Apps Script  |  Google for Developers | #search(String,Integer,Integer)](https://developers.google.com/apps-script/reference/gmail/gmail-app#search(String,Integer,Integer))

### thread.getMessages()

```js
threads.forEach((thread) => {
  thread.getMessages().forEach((message) => {
    ...
  })
})
```
`GmailThread.getMessages()`でそのスレッド内のメッセージ（メール）の配列(`GmailMessage[]`)を取得してます。
`forEach`を使えば1つ1つのメッセージを扱えます。こいつがメール本体。主役の登場です。

[Class GmailThread  |  Apps Script  |  Google for Developers | #getMessages()](https://developers.google.com/apps-script/reference/gmail/gmail-thread#getMessages())

### message.isUnread()

```js:function main()
if (!message.isUnread()) { return }
```
`GmailMessage.inUnread()`はそのメッセージが未読なら`true`、既読なら`false`を返却します。
このコードではそれの否定(`!`)でif文を書いているので、既読の場合`return`、つまり後続の処理をせずに`forEach`を継続させています。

[Class GmailMessage  |  Apps Script  |  Google for Developers | #isUnread()](https://developers.google.com/apps-script/reference/gmail/gmail-message#isUnread())

### message.getXXX()

```js:function main()
const text = create_message(message)
 
...

function create_message(message) {
  return  `[Date] ${message.getDate()}`
          + `\n[From] ${message.getFrom()}` 
          + `\n[Subject] ${message.getSubject()}`
          + `\n[Body]\n${message.getPlainBody()}`
}
```
Slackに投稿するテキストメッセージを生成しているのがこの辺です。
`GmailMessage.getXXX()`を使ってメッセージを作ってます。`getXXX()`はいろいろな種類があるので、投稿したいテキストメッセージに合わせてカスタマイズしてください。
今回は、「受信日時(`getDate()`)」「送信者(`getFrom`)」「タイトル(`getSubject()`)」「プレーンテキストの本文(`getPlainBody()`)」を利用してみました。

[Class GmailMessage  |  Apps Script  |  Google for Developers](https://developers.google.com/apps-script/reference/gmail/gmail-message)

### message.markRead()

```js:function main()
message.markRead()
```
最後に`message.markRead()`でメッセージを既読にしています。
これで、次回以降は`!message.isUnread()`に弾かれて処理されなくなります。

[Class GmailMessage  |  Apps Script  |  Google for Developers | #markRead()](https://developers.google.com/apps-script/reference/gmail/gmail-message#markRead())

## まとめ

どうでしょう。意外にシンプルですよね。
あとはGASのトリガーを好きな時間単位で指定すれば出来上がりです。
僕たちはGASのエラー通知をすぐに受信したいので1分単位でトリガーをセットしています。

GASでこういうことできるよ、という記事はいっぱいあるのですが、Googleで検索してもなかなか公式ドキュメントにたどり着けないんですよね。
実はめちゃくちゃわかりやすいので公式ドキュメントを眺めてやりたいことを実現していきましょう👏。

例えばGmailなら  
[Class GmailApp  |  Apps Script  |  Google for Developers](https://developers.google.com/apps-script/reference/gmail/gmail-app)

誰かのためになれば嬉しいです。一応丁寧に説明できたかなと。
