---
export const prerender = true;

import { type CollectionEntry, getCollection, getEntry } from 'astro:content';
import PostLayout from '@/layouts/post.astro';
import estimateReadingTime from '@/utils/estimateReadingTime';
import extractSentenceFromMarkdocBody from '@/utils/extractSentenceFromMarkdocBody';
import type { GetStaticPaths, InferGetStaticParamsType } from 'astro';

export const getStaticPaths = (async () => {
	const allPosts: CollectionEntry<'blog'>[] = await getCollection('blog');
	return allPosts.map((post) => ({
		params: {
			path: post.slug,
		},
	}));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { path } = Astro.params as Params;
const entry: CollectionEntry<'blog'> | undefined = await getEntry('blog', path);
if (!entry) return;
const { data, body } = entry;
const { Content } = await entry.render();

const sentence: string = extractSentenceFromMarkdocBody(body);
const beginning: string = sentence.slice(0, 199);
const readingTime: number = estimateReadingTime(sentence.length);
---
<PostLayout content={data} description={beginning} slug={path} readingTime={readingTime}>
	<Content />
</PostLayout>
