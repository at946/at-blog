[{"slug":"20210218-set-up-the-e2e-testing-environment-with-jest-and-puppeteer-on-nuxt-on-docker","category":"blog","title":"Nuxt on Dockerにて、Jest + Puppeteer でE2Eテスト環境をセットアップする","tags":["Jest","Puppeteer","Nuxt.js","Docker","E2E"],"body":"\n# はじめに\nテスト自動化したい...テスト駆動したい...E2Eで！！\nNuxt.jsをDockerで開発するにあたって、E2Eテスト環境を用意するまでの軌跡です。\nテストフレームワークには[Jest](https://github.com/facebook/jest)、ブラウザ操作には[Puppeteer](https://github.com/puppeteer/puppeteer)を利用します。\n\n# 手順\n1. DockerでNuxtアプリをつくる\n2. Dockerコンテナ内でブラウザを起動できるようにする\n3. Jest+PuppeteerでE2Eテストできるようにする\n\n# DockerでNuxtアプリをつくる\nアプリの前提の意味で、こんな感じでNuxt on Dockerを作っています紹介です。\n\n```sh\n$ docker run -it -w /app -v `pwd`:/app node yarn create nuxt-app .\n...\ncreate-nuxt-app v3.5.2\n✨  Generating Nuxt.js project in .\n? Project name: app\n? Programming language: JavaScript\n? Package manager: Yarn\n? UI framework: None\n? Nuxt.js modules: -\n? Linting tools: -\n? Testing framework: None\n? Rendering mode: Universal (SSR / SSG)\n? Deployment target: Server (Node.js hosting)\n? Development tools: -\nn)\n? What is your GitHub username? -\n? Version control system: None\n```\n`yarn create nuxt-app`はターゲットのディレクトリ（今回はカレントディレクトリ）が空でないとエラーになるので要注意。初期設定は特に何も入れてません。\n\nこれでローカルにNuxtアプリのファイルが生成されるので、このアプリを動かすための`Dockerfile`と`docker-compose.yml`をつくっていきます。\n\n```dockerfile:Dockerfile\nFROM node\nENV HOME=/app \\\n    HOST=0.0.0.0\n    \nWORKDIR ${HOME}\n\nCOPY package.json ${HOME}\nCOPY yarn.lock ${HOME}\nRUN yarn install\n\nCOPY . ${HOME}\nEXPOSE 3000\nCMD [\"yarn\", \"dev\"]\n```\n\n```yaml:docker-compose.yml\nversion: '3'\n\nservices:\n  app:\n    build: .\n    volumes:\n      - .:/app\n    ports:\n      - 3000:3000\n```\nこれをビルドして起動してみます。\n\n```\n$ docker-compose build\n$ docker-compose up\n```\n`http://localhost:3000`にアクセスできていればOKです。\n![](https://storage.googleapis.com/zenn-user-upload/gn68lefylsdc57ho9idkel0zyl5d)\n\n# Dockerコンテナ内でブラウザを起動できるようにする\nPuppeteerをDockerで使う場合、コンテナ内でブラウザを起動させられるようにする必要があります。[puppeteerのトラブルシューティング](https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#running-puppeteer-in-docker)にやり方が載っているので、それに合わせてDockerfileを更新します。\n\n```dockerfile:Dockerfile ins={7-14}\nFROM node\nENV HOME=/app \\\n    HOST=0.0.0.0\n\nWORKDIR ${HOME}\n\nRUN apt-get update \\\n    && apt-get install -y wget gnupg \\\n    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \\\n    && sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' \\\n    && apt-get update \\\n    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \\\n      --no-install-recommends \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY package.json ${HOME}\nCOPY yarn.lock ${HOME}\nRUN yarn install\n\nCOPY . ${HOME}\nEXPOSE 3000\nCMD [\"yarn\", \"dev\"]\n```\n\nこれでHeadless Chromeを使ってPuppeteerでブラウザ操作をする環境ができます。\n\n# Jest+PuppeteerでE2Eテストできるようにする\n最後にJest+Puppeteerの環境を整えていきます。\nJestでPuppeteerを利用する手順は[公式ドキュメント](https://jestjs.io/docs/ja/next/puppeteer)にも載っています。\nまず、Jest、Puppeteer、そしてその２つの設定をいい感じにやってくれる`jest-puppeteer`のライブラリをインストールします。`jest-puppeteer`のおかげで、`page`や`browser`などのPuppeteerのAPIが特に意識することなくGlobalに扱えたりします。\n\n```sh\n$ docker-compose run --rm app yarn add --dev jest puppeteer jest-puppeteer\n```\n\n`package.json`に追加されるのでコンテナを再ビルドしてコンテナイメージにも適用してきます。\n\n```sh\n$ docker-compose build\n```\n\n次にconfigファイルをつくります。まずはjestの設定から。\n\n```js:jest.config.js\nmodule.exports = {\n  verbose: true,\n  preset: 'jest-puppeteer'\n}\n```\nこれで`jest-puppeteer`を活用できるようになります。次は`jest-puppeteer`の設定をします。\n\n```js:jest-puppeteer.config.js\nmodule.exports = {\n  launch: {\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  },\n  server: {\n    command: 'yarn dev',\n    port: 3000,\n    launchTimeout: 50000\n  }\n}\n```\nHeadless chromeの設定と、サーバー（アプリの起動）についての設定をします。\n\n最後に、`package.json`でテスト実行コマンドを定義します。\n\n```json:package.json ins={8,9} del={7}\n{\n  ...\n  \"scripts\": {\n    \"dev\": \"nuxt\",\n     \"build\": \"nuxt build\",\n    \"start\": \"nuxt start\",\n    \"generate\": \"nuxt generate\"\n    \"generate\": \"nuxt generate\",\n    \"test\": \"jest -i\"\n  }\n  ...\n}\n```\n\n`-i`オプションは`--runInBand`オプションの省略形で、テストスイートを並列でテストしないオプションです。並列でテストしたときにそれぞれのテストスイートが影響しあってしまったのか、うまく行かないことがあったのでつけてます。\n他のオプションはJestの公式ドキュメント参照です。\n\n[Jest CLI Options · Jest](https://jestjs.io/docs/ja/cli)\n\n# テストしてみる\nでは実際にテストが動作するか確認してみます。\nまずはテストファイルを格納するディレクトリを作成し、テストファイルをつくりましょう。\nJestではデフォルトで`tests`ディレクトリ以下のファイルを読み込みます（[Jestの設定 · Jest](https://doc.ebichu.cc/jest/docs/ja/configuration.html#testmatch-array-string)）。\n\n```sh\n$ mkdir tests\n```\n\n```js:tests/test.spec.js\ndescribe('サンプルテストスイート', () => {\n  test('トップページでアプリ名が表示されていること', async () => {\n    await page.goto('http://localhost:3000')\n    await expect(await page.$eval('h1.title', el => el.innerText)).toBe(\"app\")\n  })\n})\n```\nトップページにアクセスして、「app」の文字列が`h1.title`要素に表示されていることをチェックするテストです。\nでは、実行。\n\n```sh\n$ docker-compose run app yarn test\nCreating test_app_run ... done\nyarn run v1.22.5\n$ jest -i tests/test.spec.js\n PASS  tests/test.spec.js\n  サンプルテストスイート\n    ✓ トップページでアプリ名が表示されていること (344 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.371 s\nRan all test suites matching /tests\\/test.spec.js/i.\nDone in 19.83s.\n```\nパス！\nコマンドの後ろにファイルパスを付けてもOKですし、つけない場合は対象のファイルを全部実行します。\n\nテストの設定から動作確認まで、完了です！\n\n# 結論\n本記事では、Nuxt on DockerにおけるJest + PuppeteerのE2Eテスト環境のセットアップをしました。\nDockerコンテナ内でHeadless Chromeを操作できるようにするところがやや引っかかるかなと思いますが、公式のトラブルシューティングに載っていますし、jest-puppeteerの利用についてもJestの公式サイトで言及されているので、ソースをたどればそんなに難しくないかもです。\n\n# 参考\n- [facebook/jest: Delightful JavaScript Testing.](https://github.com/facebook/jest)\n- [puppeteer/puppeteer: Headless Chrome Node.js API](https://github.com/puppeteer/puppeteer)\n- [smooth-code/jest-puppeteer: Run your tests using Jest & Puppeteer 🎪✨](https://github.com/smooth-code/jest-puppeteer)\n- [Jestの設定 · Jest](https://doc.ebichu.cc/jest/docs/ja/configuration.html)\n"},{"slug":"20210228-code-snippets-for-e2e-testing-with-jest-and-puppeteer","category":"blog","title":"Jest + PuppeteerのE2Eテストで使うコード集","tags":["Jest","Puppeteer","Nuxt.js","E2E"],"body":"\n# はじめに\n\n「[Nuxt on Dockerにて、Jest + Puppeteer でE2Eテスト環境をセットアップする](/blog/20210218-set-up-the-e2e-testing-environment-with-jest-and-puppeteer-on-nuxt-on-docker)」でJest + PuppeteerでE2Eテストをする環境を整えました。\nこの記事では、実際にE2Eテストを記述するときに使う操作や検証のコードをまとめておきます。\n自分が使ったコードを書いていくので、順次増えていく予定。\n\n# 基本\n\nテストファイル内の基本構文は以下のとおりです。\n\n```js\ndescribe('テストスイート名', () => {\n  test('テストケース名', async () => {\n    await page.goto('http://localhost:3000') // 操作とか\n    await expect(page.url()).toBe('http://localhost:3000') // 検証とか\n  })\n})\n```\n\n## describeとtest\n\n1つのファイルには1つの`describe`があります。そして、1つの`describe`の中に複数の`test`を記述できます。\n`test`はテストケース、`describe`はテストスイート（テストケースを目的別などでまとめたもの）といえます。\n\n`test`内は複数の操作と検証から成り立ちます。これらは`async/await`を使って直列に処理させます。\n例の場合、`await page.goto('http://localhost:3000')`で「`http://localhost:3000`にアクセスする」操作を、\n`await expect(page.url()).toBe('http://localhost:3000')`で「表示中のページのURLが`http://localhost:3000`である」検証を行っています。\n\n[describe(name, fn)](https://jestjs.io/docs/ja/next/api#describename-fn)\n[test(name, fn, timeout)](https://jestjs.io/docs/ja/next/api#testname-fn-timeout)\n\n## expect(X).toBe(Y)\n検証は`expect(X).toBe(Y)`を使うことが多いです。`toBe`なので「`X`が`Y`である」ことを検証します。\n他にも、「`X`が`Y`**でない**」ことを検証する場合は`expect(X).not.toBe(Y)`、「`X`に`Y`が含まれている」ことを検証する場合は`expect(X).toContain(Y)`など、`toBe`の部分を変化させることで色々な検証を行うことができます。\n\n[`expect`のメソッド](https://jestjs.io/docs/ja/next/expect#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89)\n\n# 操作系\n## ページにアクセスする\nE2Eテストではページにアクセスしないと始まりませんね。ページにアクセスする場合は`page.goto()`を使います。\n例えば`http://localhost:3000`にアクセスしたい場合は、以下のように書きます。\n```js\nawait page.goto('http://localhost:3000')\n```\n\n[page.goto(url)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagegotourl-options)\n\n## ボタンやリンクをクリックする\nボタンやリンクなどの要素をクリックするときは`page.click()`を使います。\n例えば\n```html\n<button id=\"hoge\">Click me!!</button>\n```\nのボタンをクリックする場合、`id`属性を利用して以下のように書きます。\n```js\nawait page.click('#hoge')\n```\n\n[page.click(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageclickselector-options)\n\n## 入力フォームに文字を入力する\n`input`や`textarea`に文字入力をします。例えば\n```html\n<input type=\"text\" id=\"hoge\" />\n```\nのテキストフィールドに「こんにちは」と入力する場合、`id`属性を利用して以下のように書きます。\n```js\nawait page.type('#hoge', 'こんにちは')\n```\n\nちなみに、すでに文字が入力されている場合、入力済みの値に文字が追加されるので注意が必要です。\n```js\nawait page.type('#hoge', 'こんにちは') // 「こんにちは」と入力されている状態になる\nawait page.type('#hoge', 'こんばんは') // 「こんにちはこんばんは」と入力されている状態になる\n```\n\n[page.type(selector, text)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagetypeselector-text-options)\n\n## 入力フォームの文字を消す\n`page.type()`は入力済みの文字列に追加されるので、新しく文字を入力したい場合は一度フォームの入力値をクリアする必要があります。\n`await page.type('#hoge', '')`などでクリアできればいいのですが、そうはいきません。\n\n```html\n<input type=\"text\" id=\"hoge\" value=\"Hello\" />\n```\nのようにすでに「Hello」が入力されているテキストフィールドの入力値を消す場合、例えば以下のようなコードで実現できます。\n\n```js\nconst el = await page.$('#hoge')\nawait el.click({ clickCount: 3 })\nawait el.press('Backspace')\n```\n`page.$()`で`selector`に合致する要素を取得し、それを3回クリックし、`Backspace`を押す、という操作です。\n実際にブラウザでテキストフィールド（内の文字列）を3回クリックすると、入力されている文字列が全選択の状態になり、そこで`Backspace`を押すと文字が全部消えますよね？\nこのように実際にブラウザで行う操作をコーディングすることで入力フォームの文字をクリアできます。\n\n最初に関数定義しておくとより使いやすいです。\n\n```js\nconst clearInput = async (id) => {\n  const el = await page.$(id)\n  await el.click({ clickCount: 3 })\n  await el.press('Backspace')\n}\n\ntest('hoge' async () => {\n  ...\n  clearInput('#hoge')\n})\n```\nこれで、`clearInput('#hoge')`でid属性が`hoge`の`input`の入力文字を消すことができます。\n\n[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)\n\n## 入力フォームの文字を消して、新しい文字を入力する\n上の２つを組み合わせれば、すでに文字が入力されている`input`に新しい文字列を1列で入力できる関数もつくれます。\n\n```js\nconst newInput = async (id, value) => {\n  const el = await page.$(id)\n  await el.click({ clickCount })\n  await el.press('Backspace')\n  await page.type(id, value)\n}\n\ntest('hoge', async () => {\n  ...\n  await newInput('#hoge', 'hogehoge')\n  ...\n})\n```\nよく使うので、関数化しておくと便利です。\n\n## 画面遷移やリロードを待つ\n```js\nawait page.waitForNavigation()\n```\nで画面遷移やリロードを待つことができます。\n\n[page.waitForNavigation()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfornavigationoptions)\n\n## 画面に要素が現れるまで待つ\n例えば\n```html\n<button id=\"hoge\">Click me!!</button>\n```\nのボタンがなにかの処理が終わってから表示されるとします。このとき、ボタンが表示される前に`page.click()`などをしてしまうと、要素が見つからないためエラーになってしまいます。\nそこで、以下のようにして要素が現れるのを待ちます。\n\n```js\nawait page.waitForSelector('#hoge')\n```\nもし、ボタンが現れない場合はテストがタイムアウトで失敗になるので注意です。\n\n[page.waitForSelector(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforselectorselector-options)\n\n## 画面から要素が消えるまで待つ\n例えば\n```html\n<button id=\"hoge\">押したら消えるよ</button>\n```\nのようなボタンがあり、一度押したら要素が消えるようになっているとします。画面から要素が消えるまで操作を待ちたい場合、以下のように書きます。\n\n```js\nawait page.waitForSelector('#hoge', { hidden: true })\n```\n画面に要素が現れるまで待つ`page.waitForSelector()`の`hidden`オプションを有効にすることで、「消えるまで待つ」操作になります。\n\n[page.waitForSelector(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitforselectorselector-options)\n\n## 指定時間待つ\n時間を指定して操作や検証を待ちたい場合、例えば1秒待ちたい場合は\n```js\nawait page.waitForTimeout(1000)\n```\nで実現できます。`()`の単位はミリ秒なので、1秒の場合は1000です。\n\n[page.waitForTimeout(milliseconds)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfortimeoutmilliseconds)\n\n## フォーカスを外したい\n`input`に入力している状態からフォーカスを外す操作は`blur`を使えばできます。\n\n```js\nawait page.$eval('#hoge', el => el.blur())\n```\n\n## とりあえずキーボード操作したい\n要素関係なく矢印を押してみたり、Enterを押してみたり、というケースもあると思います。\nその場合は`page.keyboard`が便利です。例えば「右矢印（→）」を押したい場合、以下のとおりです。\n\n```js\nawait page.keyboard.press('ArrowRight')\n```\n\n[class: KeyBoard](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#class-keyboard)\n\n## とりあえず操作したい\nとりあえずブラウザを操作したい場合は`page.evaluate(pageFunction)`を使います。\n例えば、ページをスクロールしたいときは`window.scrollTo()`を使うとできます。スクロールすると出現する要素、とか検証するときに使います。\n\n```js\nawait page.evaluate(() => {\n  window.scrollTo({ top: 1000 })\n})\n```\n\n[page.evaluate(pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevaluatepagefunction-args)\n[window.scrollTo](https://developer.mozilla.org/ja/docs/Web/API/Window/scrollTo)\n\n# 検証系\n## 表示中のページのURLを検証する\n表示中のページのURLは`page.url()`で取得できます。これが期待値（例：`http://localhost:3000`）かどうかは以下のように検証できます。\n\n```js\nawait expect(page.url()).toBe('http://localhost:3000')\n```\n\n[page.url()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageurl)\n\n## 要素が存在することを検証する\n```html\n<p id=\"hoge\">Show me!!</p>\n```\nの要素がページに表示されているかどうかは以下のように検証できます。\n\n```js\nawait expect(page.$('#hoge')).not.toBeNull()\n```\n`page.$()`は要素が見つからない場合`null`を返します。なので「Nullであること」を検証する`.toBeNull()`に否定の`.not`をつけることで「Nullでないこと」を確認し、要素が存在することを検証できます。\n\n[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)\n[.not](https://jestjs.io/docs/ja/next/expect#not)\n[.toBeNull()](https://jestjs.io/docs/ja/next/expect#tobenull)\n\n## 要素が存在しないことを検証する\n```html\n<p id=\"hoge\" style=\"display: none;\">見えない</p>\n```\nの要素が存在しない（表示されていない）ことを検証します。\n\n```js\nawait expect(page.$('#hoge')).toBeNull()\n```\n`page.$()`は要素が見つからない場合`null`を返すので、`toBeNull()`で検証します。\n\n[page.$(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageselector)\n[.toBeNull()](https://jestjs.io/docs/ja/next/expect#tobenull)\n\n## 要素の属性を検証する\n例えば、\n```html\n<img id=\"hoge\" src=\"./images/hoge.png\" />\n```\nのような画像があるとして、`src`が正しく設定されているか検証したいとします。\nこの場合、`page.$eval()`を使って`src`属性を取得して検証できます。\n\n```js\nconst src = await page.$eval('#hoge', el => el.src)\nawait expect(src).toBe('./images/hoge.png')\n```\n`page.$eval(selector, pageFunction)`は`selector`で取得した要素に対して`pageFunction`\b\bを返します。例の場合は`selector`に`#hoge`、`pageFunction`に`el => el.src`としているので、`#hoge`の`img`の`src`を取得してます。\n\n[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)\n\n## 要素のテキストを検証する\n例えば、\n```html\n<p id=\"greeting\">こんにちは！</p>\n```\nのような文章があって、ちゃんとテキストが意図通りか検証したいとします。\n\n```js\nconst text = await page.$eval('#greeting', el => el.innerText)\nawait expect(text).toBe('こんにちは！')\n```\n要素の属性の検証と似ていますが、`innerText`を用いて`el`の中のテキストを抜いてくる方法があります。\n\n[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)\n[HTMLElement.innerText](https://developer.mozilla.org/ja/docs/Web/API/HTMLElement/innerText)\n\n## `input`の入力値を検証する\nこれも要素の属性検証の応用です。\n```html\n<input id=\"hoge\" type=\"text\" />\n```\nのようなテキストフィールドに「こんにちは」と入力して、「こんにちは」と入力されたかを検証する、といった流れです。\n`input`の入力値は`value`属性になるので、それを拾ってくればOKです。\n\n```js\nawait page.type('#hoge', 'こんにちは')\nawait expect(await page.$eval('#hoge', el => el.value)).toBe('こんにちは')\n```\n\n[page.type(selector, text)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagetypeselector-text-options)\n[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)\n[HTMLInputElement](https://developer.mozilla.org/ja/docs/Web/API/HTMLInputElement)\n\n## `button`が非活性かを検証する\nこれも要素の属性検証の応用です。\n```html\n<button id=\"hoge\" disabled>押せないよ</button>\n```\nのような非活性なボタンを、ちゃんと非活性になっているか検証します。\n\n```js\nawait expect(await page.$eval('#hoge', el => el.disabled)).toBe(true)\n```\n`HTMLButtonElement`はTrue or Falseの`disabled`を持っているのでそれで検証します。\n逆にボタンが活性状態かは\n\n```js\nawait expect(await page.$eval('#hoge', el => el.disabled)).toBe(false)\n```\nで検証できます。\n\n[page.$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args-1)\n[HTMLButtonElement](https://developer.mozilla.org/ja/docs/Web/API/HTMLInputElement)\n\n## 複数の要素の属性を検証する\n例えば、\n```html\n<img class=\"img\" src=\"./images/hoge.png\" />\n<img class=\"img\" src=\"./images/fuga.png\" />\n```\nのように同じ`img`classの要素の`src`がそれぞれ意図通りかを調べたいとします。\n\n```js\nconst srcs = page.$$eval('.img', els => els.map(el => el.src))\nawait expect(src[0]).toBe('./images/hoge.png')\nawait expect(src[1]).toBe('./images/fuga.png')\n```\nまず、`page.$$rval()`で`img`classの要素の配列を取得して、後続のfunctionに`els`として流してます。\n次に、`map`を使って配列の1要素ずつの`src`を取り出し、`srcs`に返却しています。\n`srcs`は`img`classの要素の`src`属性が順番に並んだ配列になっているので、`src[index]`で順番を指定して検証ができます。\n\n[page.$$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args)\n[Array.prototype.map()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n## `target=\"_blank\"`の別タブで開くを検証する\n```html\n<a id=\"link_google\" href=\"https://www.google.com/\" target=\"_blank\">Google</a>\n```\nのように別タブで遷移した場合、新しく開いたタブを検証したいときがあります。\n`browser.once('targetcreated', function)`を使ってやる例が多かったのですが、ちょっとやりたいことができなかったのと直感的じゃないなぁと感じてしまったので、以下のやり方で検証してます。\n\n```js\nawait page.click('#link_google')\nawait page.waitForTimeout(2000)\nconst pages = await browser.pages()\nconst newPage = pages[pages.length - 1]\nawait expect(newPage.url()).toBe('https://www.google.com/')\n```\n少しダサいですが、リンククリック後、タブの準備が整うまで`page.waitForTimeout()`でスリープを入れています。\nその後、`browser.page()`で全てのタブを取得し、`pages[pages.length - 1]`で一番うしろのタブ、つまり今新しく開かれたタブを`newPage`に入れてます。\n\n[page.click(selector)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageclickselector-options)\n[page.waitForTimeout(milliseconds)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagewaitfortimeoutmilliseconds)\n[browser.pages()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#browserpages)\n[page.url()](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageurl)\n\n## meta tagsを検証する\nメタタグも要素の１つですので、他の要素と同じように検証できます。\n例えば、Nuxt.jsの場合、`nuxt.config.js`で\n```js:nuxt.config.js\nexport default {\n  head: {\n    meta: [\n      { hid: 'og:site_name', property: 'og:site_name', content: 'MyApp' }\n    ]\n  }\n}\n```\nのようにメタタグを定義したりすると思いますが、これもブラウザでは\n```html\n<head>\n  <mata data-n-head=\"ssr\" data-hid=\"og:site_name\" property=\"og:site_name\" content=\"MyApp\">\n</head>\n```\nのように表示されているので扱いは一緒です。\n\n```js\nawait expect(await page.$eval('meta[property=\"og:site_name\"]', el => el.content)).toBe('MyApp')\n```\nで検証が可能です。\n\n[page.$$eval(selector, pageFunction)](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pageevalselector-pagefunction-args)\n[メタタグと SEO - NuxtJS](https://ja.nuxtjs.org/docs/2.x/features/meta-tags-seo/)\n\n# おわりに\nテストコードを書く機会があったので、よく使いそうだなというコードをユースケースドリブンでまとめてみました。\n色々なサイトを巡りましたが、最終的にはソースに落ち着く、ということで以下のページをとても参考にしました。\n- [puppeteer/api.md at main · puppeteer/puppeteer](https://github.com/puppeteer/puppeteer/blob/main/docs/api.md)\n- [Expect · Jest](https://jestjs.io/docs/ja/next/expect)\n\n今後も新しいテストを書いたら追加していきたいなと思います。\n"},{"slug":"20210529-the-nasa-game-made-me-realize-the-significance-of-working-as-a-team","category":"blog","title":"NASAゲームでチームで活動する意義を実感した","tags":["チームビルディング","ファシリテーション"],"body":"\n# はじめに\nこんにちは、asatoです。\n\nチームで**NASAゲーム**をやってみました。嬉しいことにメンバーからチームで活動する意義を実感したとの声を多数もらえました😄\nこの記事でゲームの内容や進め方を共有するので、興味持ってもらえたら嬉しいです。\n\n# NASAゲームとは\nNASAゲームは、グループで課題に取り組み合意形成しながら結論を導き出す、コンセンサスゲームのひとつです。「**宇宙で遭難した状況で母船にたどり着くために、利用可能な15個のアイテムに優先順位をつけるゲーム**」です。\n\n# NASAゲームで期待できる効果\nNASAゲームをチームでやってみることでこんな効果が期待できます。\n\n- チームで議論するハードルが下がる\n- チームで活動する意義を体感できる\n\n仕事だとなかなか議論をしにくいなと感じているメンバーもいると思います。でも率直に議論していきたいですよね。NASAゲームはグループで合意形成するゲームなので議論が必須です。仕事に関係のないテーマなので、いつもより議論しやすいはずです。そこで率直に議論できた体験を得られれば、仕事でも率直に議論するきっかけにできるはずです。\n\nまた、NASAゲームは最終的に「**個人で考えた答えよりチームで出した答えの方が良い結果を生む**」ことを実感できます。実際にチームでやったときも、この感想がすごく多かったので間違いないです！\n\n# ゲームの内容\n\n## イントロダクション\n\nゲームのイントロダクションはこんな感じです。\n\n> あなたは宇宙飛行士です。\n> 今、あなたの乗った宇宙船は機械トラブルで、月に不時着してしまいました。\n> 本来、陽のあたっている月面上に母船が迎えにくることになっていますが、現時点から300km離れています。\n> 生き残るためにはなんとかして母船にたどり着かなくてはなりません。\n> 不時着した衝撃で宇宙船は完全に壊れ、中の設備もほとんど使い物になりません。\n> 15個だけ使用可能なアイテムがありました。\n> 母船にたどり着くために、この15個のアイテムに優先順位をつけてください。\n\n## 15のアイテム\nアイテムは以下の15個です。\n\n1. マッチ\n1. 宇宙食\n1. ロープ（15m）\n1. 月から見た星座表\n1. 救命いかだ\n1. 方位磁石\n1. パラシュート\n1. ヒーター\n1. ピストル\n1. 水（20L）\n1. 粉ミルク\n1. 注射器の入った救急箱\n1. 酸素ボンベ（2本）\n1. ソーラー式FM送受信機\n1. 発火信号（照明弾）\n\n模範解答の優先順位とその理由は以下です。\n\n1. 酸素ボンベ（2本）：生命の維持に必須。\n2. 水（20L）：生命の維持に必須。（酸素よりは我慢できる）\n3. 月から見た星座表：方向を知るために利用できる。\n4. 宇宙食：生命の維持に必須。（水分よりは我慢できる）\n5. ソーラー式FM送受信機：母船に近づいたときに、母船と通信ができる。\n6. ロープ：段差の上り下りや命綱に使える。\n7. 注射器の入った救急箱：救急箱の中のビタミン剤や薬が使える。\n8. パラシュート：太陽光を遮断するのに使える。\n9. 救命いかだ：炭酸ガスボンベが推進力として使えるかもしれない。\n10. 発火信号（照明弾）：母船が見えたときに遭難信号を送れる。（FM送受信機の通信の方が確実）\n11. ピストル：発射の反動を推進力に使えるかもしれない。（救命いかだよりは力が小さい）\n12. 粉ミルク：食料なので生命の維持に使えるが、水が必要になるので宇宙食の方がよい。\n13. ヒーター：日があたっているのでいらない。\n14. 方位磁石：月面は磁気がないので使えない。\n15. マッチ：月面は酸素がないので使えない。\n\n## スコア\nスコアは、それぞれのアイテムの個人またはチームの回答の優先順位と、模範解答の優先順位の差の合計です。\n個人またはチームのあるアイテム $item_i$ の優先順位を $P(item_i)$、模範解答の優先順位を $P_a(item_i)$ とすると、\n\n$$\nscore = \\sum_{i=1}^{15}|P(item_i) - P_a(item_i)|\n$$\n\nです。数式使ってみたかっただけです。\n\n## ルール\n- 個人で考える時間と、チームで議論する時間があります。個人でもチームでも、時間内に全てのアイテムの優先順位をつけてください。\n- チームで議論するとき、多数決は禁止です。議論を通して全員が納得いく回答を導き出してください。\n- ググったら答え出てきちゃうと思うので、やめてください。\n- （チーム対抗戦ができる場合）チームのスコアが最も小さかったチームの勝ちです。\n\nくらいかなと思います！\n\nさて、ここまでNASAゲームの内容については以上です！***Let's enjoy NASA game!!***\n\n# NASAゲームの進め方\nここからは、こんな感じでファシリテートしたよ、を共有したいと思います。\n今回は9人いたので、4人 vs. 5人のチーム戦にしてみました。\n\n## 準備\n開催前に以下の準備はしました。オンライン開催です。\n\n| No. | 準備したもの | 内容 |\n| ---- | ---- | ---- |\n| 1 | Slides | イントロダクションやルール説明、結果発表後のポイント（三人寄れば文殊の知恵）など\n| 2 | Spreadsheet | 個人、チームが優先順位を入力するシート。それぞれのシートからスコアを集計するシートも用意しておくと進行がスムーズです。 |\n| 3 | Zoom | リモートでやったので、コミュニケーションはZoomで。チームごとに議論するためにブレイクアウトルームを作れるように設定しておきました。|\n\n## タイムスケジュール\nワークショップはこんな感じで進めました。\n\n|No.|コンテンツ|時間|\n|:----:| ---- | ---- |\n| 1 | イントロダクション、ルール説明 | 5min |\n| 2 | 個人ワーク | 5min |\n| 3 | グループワーク | 20min |\n| 4 | 結果発表 | 5min |\n| 5 | ふりかえり | 5min |\n\n今回のワークショップでは「チームでのディスカッションのハードルを下げる」ことが第一目標だったので、個人ワークと比べるとグループワークの時間を多く取りました。個人ワークとグループワークの時間が違いすぎると、個人よりグループの結果がよくなったとしても「そりゃ時間かけたからでしょ」と言われてしまう可能性もあるので、目的に応じて時間を変更するといいと思います。\n\n### 1. イントロダクション、ルール説明\nこのゲームの導入とルールの説明をします。「わからないこと」を考えたり議論することが重要なので、必要最小限の情報だけ伝えます（各アイテムの詳細な説明や、月の環境については話しませんでした）。\n\n## 2. 個人ワーク\n個人個人で15個のアイテムに優先順位をつける時間。時間内にすべてのアイテムに優先順位をつけることを念押しします。予め参加者がわかっていたので、スプレッドシートにそれぞれのシートを用意してそこに入力してもらいました。\n\n## 3. グループワーク\nグループワークはZoomのブレイクアウトルームで行いました。こちらもスプレッドシートにチームのシートを予め用意し、そこに優先順位を入力してもらいました。\n\nZoomのブレイクアウトルームを使ってやりましたが、以下は反省点です。😥\n- それぞれブレイクアウトルームを選択して入ってもらおうとしたが、慣れていない人もいてグループワークを始めるまでに時間がかかった。やり方を視覚的に説明したり、ファシリテーターが部屋に入れる操作をする方がよかったかも。\n- 「ブレイクアウトルームを終了」してから1分の猶予があるのを失念していた。ちょっと進行が遅れてしまった。\n\n## 4. 結果発表\nまず、チームのスコアを集計します。今回はスプレッドシートに集計シートを用意していたので、非表示にしていた集計シートを表示にするだけでした。予めの用意が難しい場合は、模範解答を共有して、それぞれに集計してもらうのがよいと思います。\n結果も大事ですが、チームが納得いく議論をできたが重要なので、「納得いく議論はできましたか？」などと呼びかけると内省を促せて効果的だと思います！\n\n次に、個人のスコアを集計します。こちらもスプレッドシートの集計シートで自動集計しましたが、準備が難しい場合は、個人個人でスコアを集計してもらいましょう。\nここで、自分の結果と自分が所属していたチームのスコアを見比べてもらいました。今回はなんと、**全員がチームのスコアの方が良いという結果でした**！できすぎた結果でしたが、あたかも当然かのように以下を伝えました。\n\n- 三人寄れば文殊の知恵\n- 普段のチームでの活動でもそれぞれの意見を出し合うことで良い結果に向かうことができる\n\n## 5. ふりかえり\n最後にチームごとにふりかえりをしてもらいました。\nワークを通じての気づき、議論中のよかった点、次やるとしたらカイゼンしたい点を共有しあってもらいます。\nチーム内のふりかえりができたら発表してもらい、他のチームにも共有してもらいました。\n\nこれでワーク終了です！\n\n# まとめ\n今回はコンセンサスゲームのひとつであるNASAゲームの内容と進め方を紹介しました。\nチーム内の議論のハードルを下げたい想いから企画したものでしたが、それ以上に**チームで活動する意義を体感できる**素晴らしい時間になりました。\nもしよかったら、ぜひみなさんのチームでも取り組んでみてくださいね！\n"},{"slug":"20210604-something-to-go-back-to-when-i-wonder-what-agile-is-all-about","category":"blog","title":"アジャイルってなんだったっけってときに立ち返るもの","tags":["アジャイル"],"body":"\n# はじめに\n\n最近お仕事で、アジャイル開発を推進したり、アジャイル開発する人たちをサポートしたりしています。その結果、「アジャイルってなんだったっけ」と考える時間が増えました。\n\n世の中、「アジャイルとは」と書かれた記事はいっぱいあります。かなりの市民権です。アジャイル開発から始まり、アジャイル型組織って言葉も出てきて、今やビジネスに必要不可欠なものとして扱われていたりもします。どんどん「アジャイル」が複雑で難しいものになっている気がします。飾りになっていたり、単なるプラクティスの集合になっていたりするかもしれない。\n\n「アジャイルってなんだったっけ」となったときに、立ち返るものを_φ(･_･。シンプルで原点思考で。この記事は、そんなメモです。✍\n\n# アジャイルマニフェスト（アジャイルソフトウェア開発宣言）\n\n原点。\n\nhttps://agilemanifesto.org/iso/ja/manifesto.html\n\n> 私たちは、ソフトウェア開発の実践あるいは実践を手助けをする活動を通じて、よりよい開発方法を見つけだそうとしている。この活動を通して、私たちは以下の価値に至った。\n>\n>プロセスやツールよりも個人と対話を、\n包括的なドキュメントよりも動くソフトウェアを、\n契約交渉よりも顧客との協調を、\n計画に従うことよりも変化への対応を、\n>\n>価値とする。すなわち、左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく。\n\nこの「右記」がアジャイル開発の価値基準ですね。「左記」は当時主流だったウォーターフォール開発と対比させるための言葉だと思います。\n初めてこれを見たときは衝撃でした。「価値ってなんだ？哲学か？」この感覚は多分それほど間違っていないし、今でもそんな感覚でいます。\n\n「個人・対話」「動くソフトウェア」「協調」「変化への対応」。大事。\nウォーターフォール開発でなくても、企業の文化的に「左記」が重視されたプロセスになっていたりすることもあるので、侵食されないように立ち返りたいドキュメントです。\n\n# 12の原則（アジャイル宣言の背後にある原則）\n\n原点パート２。\n\nhttps://agilemanifesto.org/iso/ja/principles.html\n\n英語ですが、Agile Allianceのサイトの方が見やすいですね。\n\nhttps://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/\n\n> 1. 顧客満足を最優先し、価値のあるソフトウェアを早く継続的に提供します。\n> 1. 要求の変更はたとえ開発の後期であっても歓迎します。変化を味方につけることによって、お客様の競争力を引き上げます。\n> 1. 動くソフトウェアを、2-3週間から2-3ヶ月というできるだけ短い時間間隔でリリースします。\n> 1. ビジネス側の人と開発者は、プロジェクトを通して日々一緒に働かなければなりません。\n> 1. 意欲に満ちた人々を集めてプロジェクトを構成します。環境と支援を与え仕事が無事終わるまで彼らを信頼します。\n> 1. 情報を伝えるもっとも効率的で効果的な方法はフェイス・トゥ・フェイスで話をすることです。\n> 1. 動くソフトウェアこそが進捗の最も重要な尺度です。\n> 1. アジャイル･プロセスは持続可能な開発を促進します。一定のペースを継続的に維持できるようにしなければなりません。\n> 1. 技術的卓越性と優れた設計に対する不断の注意が機敏さを高めます。\n> 1. シンプルさ（ムダなく作れる量を最大限にすること）が本質です。\n> 1. 最良のアーキテクチャ・要求・設計は、自己組織的なチームから生み出されます。\n> 1. チームがもっと効率を高めることができるかを定期的に振り返り、それに基づいて自分たちのやり方を最適に調整します。 \n\n当然のことながら、原則の方がより具体的な行動が示されています。20年も立っているのに、まだまだ意識しないとできていないこともありますよね。「一緒に働く」とか「意欲に満ちた人々を集める」とか「シンプルさ」とか、いつみてもあぁそうだなぁとなります。\n\n# Agile Alliance\n\nAgile Allianceのウェブページは、今のアジャイルの捉え方がよくまとまっています。\n\nhttps://www.agilealliance.org/agile101/\n\n> Agile is the ability to create and respond to change.\n\n> Agile is a Mindset\n\n> Agile software development is an umbrella term for a set of frameworks and practices based on the values and principles expressed in the Manifesto for Agile Software Development and the 12 Principles behind it. When you approach software development in a particular manner, it’s generally good to live by these values and principles and use them to help figure out the right things to do given your particular context.\n\n\n「アジャイル」は、変化を作り出し、変化に対応する能力。「アジャイル」は、マインドセット。\n「アジャイル開発」は、アジャイルマニフェストの価値基準と原則を土台にしたフレームワークやプラクティスを包括した言葉。\n\n一部を抜粋しただけですが、納得感があります。特に「Agile is a Mindset」が好きです。\nこの他にも、特に「アジャイル開発」に関しては詳しく書かれているので、DeepLさんにもお世話になりつつ読み返したいです。\n\n# アジャイルサムライ\n\n[アジャイルサムライ――達人開発者への道](https://amzn.to/3ceKYm6)\n\nやっぱりここに立ち戻りますね。最初にアジャイル開発を始めるときに先輩に勧められて読んだ本です。今でも結局これが一番納得感を得られる本です。マインドセットから行動まで、12の原則と紐付けながら紹介されています。\nインセプションデッキが紹介されているのも素晴らしいです。アジャイルに関係なく、プロダクト・プロジェクトのスタートにはインセプションデッキが欠かせないです。\n\n# エクストリームプログラミング\n\n[エクストリームプログラミング](https://amzn.to/3ceV1r3)\n\nアジャイルマニフェストにXPに関わっていた人も多いからか、アジャイルにはXPが色濃いと思います。\nXPは少し技術プラクティスの印象が強かったのですが、この本はその印象をガラッと変えてくれました。人とコミュニケーションとコラボレーションが重視されている。運転のメタファーもとてもわかりやすい。\n\n# Clean Agile\n\n[Clean Agile　基本に立ち戻れ](https://amzn.to/3g7CnCB)\n\nこの本はとても好きな文章があるんですよね。\n\n>アジャイルとは、小さなことをしている小さなプログラミングチームの小さな問題を扱う小さなアイデアである。\nアジャイルとは、大きなことをしている大きなプログラミングチームの大きな問題を扱う大きなアイデアではない。\n（中略）\n「大きなことは大きなチームでするんじゃないの？」そんなことはない！\n大きなことは大きなチームなんかじゃできない。小さなことをする小さなチームがいくつも集まり、コラボレーションしながら大きなことを成し遂げるのだ。\n\nハッとさせられます。\n\n# おわりに\n\nまたアジャイルってなんだったっけとなったら読み返す。このリストもふりかえよう。\n\nアジャイルってなんだったっけ？\n今は、「答えが見えない中ででも、チームでさらなる価値を届けるために、考えることと行動すること」って感じかなぁ。"},{"slug":"20210916-introduce-testcafe-to-nuxt-on-docker","category":"blog","title":"Nuxt on Dockerにtestcafeを導入する","tags":["Nuxt.js","Docker","TestCafe"],"body":"\nいま盛り上がっているTwitterスペース、気になるトピックを語っているTwitterスペースなどをかんたんに見つけられる spaces.bz（クローズ済み）というプロダクトを友人と運営しています。\n\n特に開発初期段階なので、機能追加も頻繁に行っており、勇気と自信をもってプロダクトションへのデプロイを繰り返すためには、やはりテストの自動化が必要です。\nspaces.bz はNuxt.js on Dockerで開発しており、今回は[TestCafe](https://testcafe.io/)でテスト自動化を導入しています。\nTestCafeは、クロスブラウザに対応しており、テストコードも非常にわかりやすく書けるのが特徴です。\n今回は「Headless Chromeでテストがしたいなー」というのと、テストコードにあまり馴染みのない友人と一緒に開発しているので「わかりやすいテストコード」だと良いなーと思っており、TestCafeはまさにピッタリでした。\n\nこの記事では、Nuxt on Dockerの環境でTestCafeを導入し、かんたんなテストを実行するところまでをまとめていきます！💪\n\n# 準備\n\n`Dockerfile`と`docker-compose.yml`は以下のようなものを想定しています。\n\n```dockerfile:Dockerfile\nFROM  node\nENV   HOME=/app \\\n      HOST=0.0.0.0\n\nWORKDIR ${HOME}\n\nCOPY  package.json ${HOME}\nCOPY  yarn.lock ${HOME}\nRUN   yarn install\nCOPY  . ${HOME}\n\nEXPOSE  3000\nCMD     [\"yarn\", \"dev\"]\n```\n\n```yaml:docker-compose.yml\nversion: \"3\"\n\nservices:\n  app:\n    build: .\n    volumes:\n      - .:/app\n    ports:\n      - 3000:3000\n```\n\n# TestCafeをインストールする\n\n[TestCafeのパッケージ](https://yarnpkg.com/package/testcafe)をインストールします。今回は`yarn`を使っているので、\n\n```sh\n$ docker compose run app yarn add --dev testcafe\n```\n\nです。☕\n\n# DockerfileでChromeをインストールする\n\n今回はHeadless Chromeを使ってテストをしたいので、DockerコンテナでChromeを起動できる状態にしておく必要があります。\n\n```dockerfile:Dockerfile ins={4-8}\n...略...\nWORKDIR ${HOME}\n\nRUN   wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n      sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list' && \\\n      apt-get update && \\\n      apt-get install -y google-chrome-stable && \\\n      apt-get install -yq fonts-noto-cjk\n\nCOPY  package.json ${HOME}\nCOPY  yarn.lock ${HOME}\nRUN   yarn install\nCOPY  . ${HOME}\n...略...\n```\n\nChromeのStable版と、日本語のフォントを表示するために`fonts-noto-cjk`をインストールするように追記しました。\n追記ができたらビルドして、Dockerイメージを作成しましょう。\n\n```sh\n$ docker compose build\n```\n\n# コマンドでTestCafeを起動できるようにする\n\n次はコンテナでTestCafeを起動するコマンドの準備をしていきます。コンテナで`yarn test`\bのコマンドを実行したときにTestCafeが動くようにしましょう。\n\n```json:package.json ins={7,8} del={6}\n...略...\n\"scripts\": {\n  \"dev\": \"nuxt\",\n  \"build\": \"nuxt build\",\n  \"start\": \"nuxt start\",\n  \"generate\": \"nuxt generate\"\n  \"generage\": \"nuxt generate\",\n  \"test\": \"testcafe chrome:headless\"\n},\n...略...\n```\n\n`testcafe`の後ろに`chrome:headless`を与えることでコンテナ内でHeadless Chromeを起動してテストしようとしてくれるんですね。\n詳しくは[このへん](https://testcafe.io/documentation/402639/reference/command-line-interface#browser-list)に書いてます。\n\n# テストコードを書く\n\nいよいよテストコードです。まずはテスト用のディレクトリとファイルを作っておきましょう。\n\n```sh\n$ mkdir tests\n$ touch tests/sample.test.js\n```\n\nテストの内容は「トップページにアクセスして、`<h1>`タグで\"Hello World!!\"と表示されていること」を検証してみましょう。\n\n```js:tests/sample.test.js\nimport { Selector } from 'testcafe'\n\nfixture('Sample')\n  .page('http://localhost:3000')\n\ntest('トップページに<h1>タグで\"Hello World!!\"と表示されていること', async t => {\n  await t\n    .expect(Selector('h1').innerText).eql('Hello World!!')\n})\n```\n\nなんか読みやすそうじゃないですか？😃\n`fixture`でテスト全体に関する設定とかを行っています。このテストファイルは`Sample`って名前で、`http://localhost:3000`にアクセスするところから始まるよって感じです。\n`test`でその後の操作や検証を書いていきます。`test`は1ファイルに複数書けます。\n今回は`.expect(A).eql(B)`を使って`A`と`B`が一緒であることを検証してみます。\n`A`の方は`Selector('h1').innerText`と書きました。最初に現れた`h1`タグの`innerText`を取得してます。こんな感じで使い慣れたjavascriptさんも使えるんですね。\n`B`の方に`Hello World!!`の文字列を書けば、「最初に現れた`h1`タグの`innerText`が`Hello World!!`と一致すればテスト成功」となります。\n\n# ページを編集\n\nこのままテストを実行しても失敗するので、ページも編集しておきます。\nTDDでやってみたい場合は、この時点で一度テストを実行してFailになることを確認してもOKです😆\n\n```vue:pages/index.vue\n<template>\n  <div>\n    <h1>Hello World!!</h1>\n  </div>\n</template>\n```\n\n# テストを実行する\n\nではテストを実行しましょう・ｖ・\nテストを実行する前にコンテナを起動させておきます。\n\n```sh\n$ docker compose up -d\n```\n\nそして、`exec`を使って起動したコンテナ内でTestCafeを実行します。\n\n```sh\n$ docker compose exec app yarn test tests/sample.test.js\n\nyarn run v1.22.5\n$ testcafe chrome:headless tests/sample.test.js\n Running tests in:\n - Chrome 93.0.4577.82 / Linux 0.0\n\n Sample\n ✓ トップページに<h1>タグで\"Hello World!!\"と表示されていること\n\n 1 passed (2s)\nDone in 31.12s.\n```\n\nPASS!!出力も非常にわかりやすいですね！\n\n# まとめ\n\nこの記事では、Nuxt on DockerにTestCafeを導入して、かんたんな自動テストを書いてみました。\n自動テストがあれば、機能追加を頻繁に行なう環境でも勇気と自信を持ってデプロイできます！\nそして、[TestCafe](https://testcafe.io/)はとても直感的なテストコードを書け、クロスブラウザにも対応しているすぐれものでした。\n"},{"slug":"20210918-how-to-take-a-screenshot-when-a-test-failed-on-testcafe","category":"blog","title":"TestCafeでテストに失敗したときにスクリーンショットを撮りたい","tags":["TestCafe","E2E"],"body":"\nTestCafeのエラーメッセージはとてもわかりやすいのですが、「そんなわけないよ！実際に画面見せろよ！」となることもありますよね。\n\nこの記事では、TestCafeでテストに失敗したときに自動でスクリーンショットを保存できるようにします！\n\n# `-s takeOnFails=true`オプションをつけるだけ\n\nま、以上なんですが...\n\n公式サイトだと、こちらに書かれております。\n\nhttps://testcafe.io/documentation/402639/reference/command-line-interface#takeonfails\n\n便利すぎやしませんか...TestCafeさん...\n\nTestCafeの起動時に\n\n```sh\n$ testcafe chrome:headless -s takeOnFails=true\n```\n\nのように記載すればOKです。\n\n# package.jsonに追記する\n\n僕たちはNuxtで開発をしており、テストは`yarn test`コマンドで起動するようにしています。\n\n```json:package.json\n{\n  \"script\": {\n    ...略...\n    \"test\": \"testcafe chrome:headless\",\n    ...略...\n  },\n}\n```\n\nと記載していました。ここを、\n\n```json:package.json ins={2} del={1}\n\"test\": \"testcafe chrome:headless\",\n\"test\": \"testcafe chrome:headless -s takeOnFails=true\",\n```\n\nと書き換えるのみです。\n\n# スクリーンショットはどこへ...？\n\nスクリーンショットはプロジェクトのルートディレクトリに`screenshots`ディレクトリが自動で作成され、その中にテストケースごとのディレクトリが作られて保存されます。\nテストケースのディレクトリには番号が振られているので、複数のテストが失敗したときでもどのテストがどのスクリーンショットなのかわかりやすいです。\n\n[`path`オプション](https://testcafe.io/documentation/402639/reference/command-line-interface#path)を使えば、ディレクトリの場所を変えることもできるみたいですが、特にルートディレクトリにディレクトリが作成されても困っていないので指定していません。\n\nただ、screenshotはGitHubなどのGitサービスにあげる必要がないものなので、`.gitignore`でGitの対象から外してます。\n\n```text:.gitignore\nscreenshots\n```\n\nまた、新しいテストを始めるときに、古いテストのスクリーンショットが残っているとわけがわからなくなってしまうので、`package.json`で`testcafe`実行前に`screenshots`ディレクトリを削除するようにしています。\n\n```json:package.json ins={2} del={1}\n\"test\": \"testcafe chrome:headless -s takeOnFails=true\"\n\"test\": \"rm -rf ./screenshots && testcafe chrome:headless -s takeOnFails=true\"\n```\n\nこれでステキな自動テストライフを過ごせます！🎁\n\n# 番外編：失敗時のスクリーンショットじゃわからない...\n\nときもあります！なんかエラー画面が出てるだけで終わり...その直前の画面が見たい...\nそんなときはテストコード内で自分でスクリーンショットを撮ることもできます！\n\n```js\ntest('take a screenshot', async t => {\n  await t\n    .typeText('#input', 'hello')\n    .takeScreenshot()\n    .click('#button')\n    .expect(...).eql(...)\n})\n```\n\nこんな感じで、`#button`をクリックしたあとにテストが失敗してるんだけど、スクリーンショットがエラー画面でなんだかわからない...というときは、`takeScreenshot()`を使ってあげれば`#button`をクリックする直前の画面をスクリーンショットできます！\nこれも特に指定しなければ`./screenshots`ディレクトリの中のテストケースのディレクトリ内に、テスト失敗のスクリーンショットと分けて格納されます。\n`takeScreenshot()`もパスや全画面を対象にするかを選択できますので、気になる方は公式サイトを御覧ください。\n\nhttps://testcafe.io/documentation/402675/reference/test-api/testcontroller/takescreenshot\n\n# まとめ\n前回に引き続き、TestCafeについてお話しました！\nテスト時のスクリーンショットは、自作しなかったりしなくてはいけないテストフレームワークもあったりするので、TestCafeはかなり手軽だなーと思います。\nみなさんにステキなテストライフが訪れますように！🤞\n"},{"slug":"20210925-self-introduction-as-the-first-step-of-the-psychological-safety","category":"blog","title":"心理的安全性の第一歩としての自己紹介","tags":["チームビルディング","ファシリテーション"],"body":"\n心理的安全性の第一歩として、自己紹介って大事なイベントだなって話をします。\n\n## 心理的安全性と自己開示\n\n自己紹介は自己開示のひとつです。\n\n心理的安全性と自己開示は、互いに他方を強化します。心理的安全性が高いとチームメンバーの自己開示がより進み、自己開示が多くなるとチームの心理的安全性はより高まります。\n自分を受け入れてもらえていると感じられたり、ひととなりを知ることでより率直に話し合えるきっかけにつながります。\n\n## 先行するのは自己開示\n\nチームの心理的安全性はほっておいても高まりません。メンバーひとりひとりができる行動は自己開示を増やすことです。\n\nしかし、自己開示も簡単なことではありません。受け入れてもらえるか不安があるでしょうし、ひとりだけが積極的に自己開示に取り組んでいても効果的とは言えません。\n\nそこで最初は、チームをファシリテートする存在（マネージャー、リーダー、スクラムマスターなど）が、メンバー全員の自己開示を支援するのが良いでしょう。それが、自己紹介会です。\n\n## 自己紹介会を催す\n\n自己紹介会はその名の通り、自己紹介をし合う会です。チームビルディングの方法は色々ありますが、最もオーソドックスで馴染みも深い自己紹介はどんなチームにとっても扱いやすいはずです。\n\nとはいえ、「じゃ、この時間は各自自己紹介してください」では不十分です。\n特に最初の頃は、自己開示の程度もさぐりさぐりのはず。コミュニケーションを円滑にするために必要不可欠な情報と、その人のひととなりが少し垣間見える情報をうまく引き出すファシリテーションが求められます。\n\nその場でのファシリテーションは置いておいて、「こんな項目を自己紹介し合いましょう」を決めておくことは自己紹介会を成功させる単純で効果的なデザインです。\n\n## 自己紹介の項目の勘所\n\n自己紹介の項目は、「コミュニケーションに不可欠なこと」と「ひととなりが今より少し垣間見えること」が重要です。\n\nコミュニケーションに不可欠なことは、例えば\n\n- 名前\n- ニックネーム（チームでなんと呼ばれたいか）\n- 顔写真、プロフィール写真\n- 年齢（生年月日）\n- 社歴\n- どんなコミュニケーションが好きか（直接会って、チャット、集中してるときは反応が遅れるかも、いつでも爆速でリプ、など）\n\nなどがあります。なんと呼ぶかを確定させたり、日本の場合は年功序列・敬語の文化があるので年齢や社歴を公開し合うとコミュニケーションの取り方が確定しやすくなります。\n\n最近はリモートも多く、カメラOFFがデフォの人は顔もわからないなんてことがあります。視覚情報はコミュニケーションにおいて重要なので、自己紹介でも顔がわかる写真を公開してもらえると良いと思います。（僕は名前と顔を一致させるのが超苦手なので、これがあるととても助かる）\n\nひととなりが今より少し垣間見えることは、例えば、\n\n- 出身地、ご当地自慢\n- すきなこと、きらいなこと、最近はまってること\n- 得意なこと、苦手なこと\n- 家族構成\n\nなどがあります。出身地・ご当地自慢は答えやすく盛り上がりやすいので、特にチーム形成の時期はおすすめです。\n\n好き・嫌い vs. 得意・苦手はマトリクス図で表現（好き・得意、好き・苦手、嫌い・得意、嫌い・苦手）するのも視覚的に面白いです。\n\n## 自己紹介は残る形で\n\n割と大切なのは、これを残る形でやることです。例えばmiroやgoogle slidesなど、気になったときにすぐにアクセスできる状態にしておきます。\n\n一回揮発的に自己紹介しても覚えきれません。一方で、自己紹介した側は「自己紹介で言ったじゃん」になりかねないので、特にチームの形成期はコミュニケーションの前に確認できる状態にしておくと便利です。\n\nまた、新しいメンバーがジョインしたときにも効果的です。残しておいて得しかないです。\n\n## まとめ\n\n心理的安全性の第一歩として、自己紹介が効果的という話をしました。自己紹介は自己開示のひとつであり、自己開示はチームの心理的安全性を高めてくれることが期待できます。\n\n「では自己紹介をどうぞ」と無茶振りをしても効果的でないことも多く、自己紹介でもファシリテーションが必要です。自己紹介の項目をあらかじめ決めておくことは効果的です。\n\n自己紹介の項目は、「コミュニケーションを円滑にする項目」と「今より少しひととなりを知れる項目」の切り口でデザインすると良きです。これらは自己紹介会の後でも残る形でチームメンバーがいつでもアクセスできるようにすると、自己紹介会後も活用できます。\n\n良いプロダクトは良いチームから。\nこの記事が誰かの役に立ったなら嬉しいです😃🤞\n"},{"slug":"20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt","category":"blog","title":"Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦","tags":["Google Spreadsheet","Nuxt.js"],"body":"\nスプレッドシートをデータベースとして使いたい！\nいま話題のTwitterスペースと出会えるプロダクト spaces.bz を開発しています。（クローズ済み）\n\nGASでTwitter APIをたたいてスプレッドシートに記録するプロトタイプからはじめました。\nプロトタイプのあと、「せっかくだからこのスプレッドシートをそのままDBみたいに使えないかなー」と思い、Nuxt + Spreadsheet構成でプロダクトを開発してみたので、体験記をまとめたいと思います！\n\n# この記事でやること\nスプレッドシートからデータを取得して表示するNuxtアプリを作ります。\nサンプルのスプレッドシートは以下のようなイメージ。\n\n|id|name|age|email|\n| --- | --- | --- | --- |\n|1|Test A|20|test_a@sample.com|\n|2|Test B|30|test_b@sample.com|\n|3|Test C|40|test_c@sample.com|\n\n# スプレッドシートをJSONで返却するGASを作成\n\nまずはスプレッドシートの情報を取得するAPIみたいなものを作っていきます。\nGASでプログラムを組んでWebアプリとして公開する、をしますが、GASの方からやっていきます。\n\n```js:コード.js\nfunction doGet() {\n  const users = getUsers()\n\n  return ContentService\n    .createTextOutput(JSON.stringify(users))\n    .setMimeType(ContentService.MimeType.JSON)\n}\n\nfunction getUsers() {\n  const ss = SpreadsheetApp.openById('スプレッドシートのID')\n  const sheet = ss.getSheetByName('シート名')\n  const rows = sheet.getDataRange().getValues()\n  const keys = rows.splice(0,1)[0]\n\n  const users = rows.map((row) => {\n    const object = {}\n    row.map((value, index) => {\n      object[keys[index]] = value\n    })\n    return object\n  })\n\n  return users\n}\n```\n\nちょこっとコードをみてみます。\n\n## doGet関数\nこのコードの最初の肝は`doGet`関数を用いていることです。\nこの後Webアプリで公開すると話しましたが、`doGet`関数はWebアプリで公開したURLにGETリクエストが来たときに動く関数です。\n\nhttps://developers.google.com/apps-script/guides/web\n\n今回のコードでは`doGet`関数が動き出したら`getUsers`関数を呼び出してスプレッドシートの中身をJSONに整形し、\n\n```js\nreturn ContentService\n  .createTextOutput(JSON.stringify(users))\n  .setMimeType(ContentService.MimeType.JSON)\n```\n\nで、JSONを返却しています。\n\n## getUser関数\n次に、`getUser`関数をみてみます。\n\n```js\nconst ss = SpreadsheetApp.openById('スプレッドシートのID')\n```\n\n最初に対象のスプレッドシートを読み込んでいます。スプレッドシートのIDはスプレッドシートのURLからわかり、`https://docs.google.com/spreadsheets/d/*****/edit`の`*****`の部分です。\n\n```js\nconst sheet = ss.getSheetByName('シート名')\n```\n\n次に、そのスプレッドシートの`シート名`のシートを持ってきます。\n\n```js\nconst rows = sheet.getDataRange().getValues()\n```\nそして、そのシートのデータが入力されているセルのデータを行単位の配列で取得します。\nサンプルの例だと、`rows`の値は以下のようになっています。\n\n```js\nrows = [\n  ['id', 'name', 'age', 'email'],\n  ['1', 'Test A', '20', 'test_a@sample.com'],\n  ['2', 'Test B', '30', 'test_b@sample.com'],\n  ['3', 'Test C', '40', 'test_c@sample.com']\n]\n```\n\n```js\nconst keys = rows.splice(0,1)[0]\n```\nお次は`rows`の1つ目の配列を取り出して`keys`に代入しています。これによって、`keys`、`rows`は以下のようになります。\n\n```js\nkeys = ['id', 'name', 'age', 'email']\n\nrows = [\n  ['1', 'Test A', '20', 'test_a@sample.com'],\n  ['2', 'Test B', '30', 'test_b@sample.com'],\n  ['3', 'Test C', '40', 'test_c@sample.com']\n]\n```\nこれで`keys`がjsonのkeyになり、`rows`に残った項目がvalueになる未来が見えてきました。\n\n```js\nconst users = rows.map((row) => {\n  const object = {}\n  row.map((value, index) => {\n    object[keys[index]] = value\n  })\n  return object\n})\n```\nそんな未来を実現するコードがこれです。\n`rows.map((row) => { 処理 })`で`rows`から配列を一つずつ持ってきて変数`row`に格納し`処理`を実行しています。\n`処理`の部分でも`row.map((value, index) => { 処理2 })`として`row`の要素を一つずつ取り出し、\n`処理2`で`object[keys[index]] = value`とすることで各配列をオブジェクトの形に整形しています。\n\n最終的に`users`の値はこんな感じです。\n\n```js\nusers = [\n  {\n    id: 1,\n    name: 'Test A',\n    age: 20,\n    email: 'test_a@sample.com'\n  },\n  {\n    id: 2,\n    name: 'Test B',\n    age: 30,\n    email: 'test_b@sample.com'\n  },\n  {\n    id: 3,\n    name: 'Test C',\n    age: 40,\n    email: 'test_c@sample.com'\n  }\n]\n```\nこれを最後に`return`する関数になってます。\n\nこれでWebアプリを公開したときにスプレッドシートのシートをjsonで返却するGASの準備ができたので、次はWebアプリを公開していきます。\n\n# Webアプリを公開する\n\nhttps://developers.google.com/apps-script/guides/web#test_a_web_app_deployment\n\nWebサイトはGASのエディターの上部にある「デプロイ」ボタンから行います。\n\n![デプロイ](./images/1_deploy.png)\n\n「デプロイ」>「新しいデプロイ」を選択して...\n\n![新しいデプロイ](./images/2_new_deploy.png)\n\n「種類の選択」>「ウェブアプリ」を選択して...\n\n![設定](./images/3_setting.png)\n\n「新しい説明文」にわかりやすい名前（productionとかtestとか）、「次のユーザーとして実行」に「自分」、「アクセスできるユーザー」に「全員」を設定し、「デプロイ」を選択して...\n\n![認証](./images/4_authorize.png)\n\n（必要な場合は）「アクセスを承認」を選択して...\n\n![Google認証](./images/5_login.png)\n\n「Google認証」して...\n\n![Continue](./images/6_continue.png)\n\n「Advanced」を選択して、「\\<プロジェクト名\\>\\(unsafe\\)」を選択して...\n\n![アクセスを許可](./images/7_allow_access.png)\n\n「Allow」して...\n\n![デプロイ完了](./images/8_finish_deploying.png)\n\n完了！！🎉\n「ウェブアプリ」の方に書いてあるURLがAPI（サイトとしても）公開しているURLになります。ちょっとcurlしてみましょう。\n\n```shell\n$ curl -L <URL>\n\n[\n  {\"id\":1,\"name\":\"Test A\",\"age\":20,\"email\":\"test_a@sample.com\"},\n  {\"id\":2,\"name\":\"Test B\",\"age\":30,\"email\":\"test_b@sample.com\"},\n  {\"id\":3,\"name\":\"Test C\",\"age\":40,\"email\":\"test_c@sample.com\"}\n]\n```\n返却されてるー！！\n\n画面じゃないとわかりにくいなと思い、画像多めでお届けしました。\nってことなので、これをNuxtでの表示を作っていきます！\n\n# NuxtでAPI叩いて表示\n最後に、今公開したAPIをNuxtアプリから叩いてデータを表示していきます。\n\nまず、APIを叩くために[`@nuxtjs/axios`](https://axios.nuxtjs.org/)を導入してきます。\n\nhttps://axios.nuxtjs.org/\n\n```\n$ yarn add @nuxtjs/axios\n```\n\n`nuxt.config.js`でモジュール登録もしてきましょう。\n\n```diff js:nuxt.config.js\n  export default {\n    ...\n    modules: [\n+     '@nuxtjs/axios'\n    ],\n    ...\n  }\n```\n\naxiosはCORS対策もしっかりしてくれているので、このままでは先程作ったウェブアプリのAPIを叩けません。\nそこで、proxyします。\n\n```diff js:nuxt.config.js\n  export default {\n    ...\n    modules: [\n      '@nuxtjs/axios'\n    ],\n+   axios: {\n+     proxy: true\n+   },\n+   proxy: {\n+     '/api': {\n+       target: <ウェブアプリのURL>,\n+       pathRewrite: { '^/api': '' }\n+     }\n+   },\n    ...\n  }\n```\n\nこれで、内部の`/api`にaxiosでデータ取得しようとするとCORS対策を迂回してウェブアプリのAPIを叩くことができます。\nちょうど、このURLは信頼できるURLだよ、と登録しているような感覚ですね。\n\nこれでウェブアプリのAPIを叩く準備が整ったので、ページを作成していきます。\n\n```vue:pages/index.vue\n<template>\n  <div>\n    <table>\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>name</th>\n          <th>age</th>\n          <th>email</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='user in users' :key='user.id'>\n          <td>{{ user.id }}</td>\n          <td>{{ user.name }}</td>\n          <td>{{ user.age }}</td>\n          <td>{{ user.email }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      users: []\n    }\n  },\n  created() {\n    this.getUsers()\n  },\n  methods: {\n    async getUsers() {\n      this.users = await this.$axios.$get('/api')\n    }\n  }\n}\n</script>\n```\n\nちょっと長いですが、`template`の方は`table`と`v-for`使っているだけなので説明は省略です。\n\n重要なのは`script`側ですね。\n今回は`methods`で`getUsers()`を`async-await`で記述し、`created`で呼び出してます。`getUsers()`は、`axios`を使ってウェブアプリAPIからスプレッドシートのデータを取得して、`this.users`にデータを代入してます。\n\nこれでページにアクセスしてみると...\n\n![データ取得成功！](./images/9_result.png)\n\nスプレッドシートと同じ情報を表示できていますね！！🎉🎉🎉\n\n# まとめ\n今回はスプレッドシートをDB代わりに使えないかなー、ということで、\n\n- GASのウェブアプリを使ってスプレッドシートの情報を返却するAPIを作ってみた\n- NuxtアプリでそのAPIを使ってスプレッドシートの情報を表示してみた\n\nをやってみました！\nそれぞれいろいろな参考記事を書いてくださっている方々がいらっしゃったんですが、あわせ技のところで困ったりしたので一連通してやるとこうなるぞという記事を書いてみました。\nこれですべてが上手くいった...そう思っていたのですが...\n\n**次回！モバイルでもそれ動くの？**\n\nお楽しみに！😆...😢\n\n続編を公開しました！\n\n[NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！](/blog/20210928-operation-to-use-google-spreadsheet-as-a-db-with-nuxt2)\n"},{"slug":"20210926-reflection-with-emotion","category":"blog","title":"喜怒哀楽ふりかえり","tags":["ふりかえり"],"body":"\n今回は、最近ハマっている喜怒哀楽ふりかえりの話をします。\nなんとなく喜怒哀楽をテーマにふりかえりやってみたらどうだろうと思い始めてみたところ、割といい感じなのでご紹介。\n個人のふりかえりとして始めましたが、チームのふりかえりにも応用が効くかもです。\n\n## 心をふりかえりたかった\n\nふりかえり手法としては、KPTやTimeline、YWTなどさまざまあります。これらは、実際に起きた「事実」にフォーカスすることが多い気がしています。こういうことがあって成果が出た、こういうことがあって進捗が遅れた、みたいなことです。\n\nもっと「心」にフォーカスしてふりかえりをしたらどうなるんだろう、と思い、始めてみたのが喜怒哀楽ふりかえりです。\n特に個人のふりかえりでは、自分の心に向き合ってあげるのも良いんじゃないかなってことで。自分と向き合いたいとき、チームの心に焦点を当てたいとき、ちょっとふりかえりのテイストを変えたいときなどにやってみると意外な発見があるかもですね。\n\n## 喜怒哀楽ふりかえりの進め方\n\nその名の通り、ある期間やプロジェクトに対して自分の喜怒哀楽を吐き出して、喜びや楽しさを増やすにはどうしたらよいか、怒りや哀しみを減らすにはどうしたらよいか、を考えるふりかえりです。\n\n進め方も至ってシンプルです。以下で紹介していきます。\n\n### 1. テーマを決める💭\n\n最初に何についてふりかえりをするか、テーマを決めます。僕の場合は毎週金曜日に１週間のタスクや出来事に対して喜怒哀楽をふりかえるようにしています。\n\n### 2. 思考を休ませる🛌\n\n次に、思考を休ませます。心にフォーカスを合わせる状態になるための時間です。人によってアクティビティが異なると思います。\n僕の場合は、10分間ほど瞑想をします🧘‍♂️。Meditopiaとアイウォーマーを使って頭と目を休ませてますね。\n\n### 3. 喜楽を書き出す✍️\n\n思考が休まったら、喜（嬉しかったこと）と楽（楽しかったこと）から思ったことを書き出していきます。5分くらいが目安です。この時間は心を書き出すことに集中しましょう。\n喜と楽から始めるのは、ポジティブな気持ちでふりかえりをしたいからです。頭をすっきりさせてまずネガティブなことから考えるのはやだなーってことですね。実際、人はネガティブな思考からポジティブな思考な切り替えるのが苦手らしいなで、ポジティブから始めるのはおすすめです。\n\n### 4. 怒哀を書き出す✍️\n\n同じように怒（イライラしたこと）と哀（哀しかった、嫌だなと思ったこと）を書き出します。これも5分くらいが目安です。\n\n### 5. 書き出したものを眺める👀\n\n書き出したものを眺めてみましょう。\n自分はこんなときポジティブな気持ちになりやすいんだな、こんなときはネガティブな気持ちになりやすいんだな、ということが見えてくるはずです。\n\n### 6. 喜楽の機会の増加・怒哀の機会の削減のアイデアを考える💡\n\n書き出したものを眺めてみると、「このポジティブな気持ちを増やしたいな」「このネガティブな気持ちを減らしたいな」と感じるでしょう。\n最後に、そのアイデアを考えます。仕組みを変えることかもしれませんし、誰かの力を借りることかもしれません。自分の捉え方を見直すことかもしれません。そのアイデアを探し出して、行動してみます。\n\n以上が喜怒哀楽ふりかえりの進め方です。\n思考を休ませるフェーズがけっこう鍵を握っています。あとは心にフォーカスしているだけで、進め方自体は普段のふりかえりと大きく変えることなく取り組めるはずです。\n\n### まとめ\n\n今回は、喜怒哀楽ふりかえりを紹介しました。心にフォーカスするふりかえりで、自分を見つめ直したり、もっと積極的に仕事に取り組めるようになるきっかけになるアクティビティだと思いますので、ぜひお試しください！🤞\n"},{"slug":"20210928-operation-to-use-google-spreadsheet-as-a-db-with-nuxt2","category":"blog","title":"NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！","tags":["Google Spreadsheet","Nuxt.js","jsonp"],"body":"\n［前回の記事］\n[Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦](/blog/20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt)\n\n前回の記事で、見事NuxtでスプレッドシートをDB代わりに使うことに成功しました🎉🎉🎉\n\nそう...PCでは...\n\n実際にngrokとかで試していただくとわかるのですが、この方法だとモバイルからアクセスしたときに機能しません。\n少なくとも僕のiPhone8 + Chrome構成ではアクセスできません...\n\n今開発している spaces.bz でも、ローカル開発で自動テストも通ってリリース！としたらモバイルでアクセスできず「ぐぬぬ」となったのはよい思い出。\n\nということなので、モバイルでもスプレッドシートのデータを表示するぞ！！！💪\n\n# 何がだめなの？\nPCでできてモバイルでできないとは何事か。一体何が起きているのでしょう。\naxiosでエラーハンドリングしてみると、モバイルでは「**Error: Network Error**」と表示されます。こいつだ！👮\n\n「axios network error mobile」「axios network error gas」など色々検索してみると、どうやらCORS周りが怪しいようです。\n簡単に言えば`Access-Control-Allow-Origin`に`*`とかを設定するのではなく、ちゃんとOriginを設定しろとのこと。\nが、GASはヘッダー情報をいじれない...\n\nということで、`jsonp`を利用してCORSを回避する方法が情報としては多かったです。\n\n- [Google Apps Script - gasでつくったAPIをAXIOSで読み込めない。｜teratail](https://teratail.com/questions/171692)\n- [javascript - Cross-domain requests stopped working due to no `Access-Control-Allow-Origin` header present in the response - Stack Overflow](https://stackoverflow.com/questions/29525860/cross-domain-requests-stopped-working-due-to-no-access-control-allow-origin-he)\n- [モバイル環境でNetwork Errorでハマった。「EC2にDocker Caddy Laravel, S3にVuejsの構成」 - Qiita](https://qiita.com/miyamotok0105/items/961d7877f8d13a9cd93c)\n\n今回はJSONPで情報を取得できるようにしてみます。\n\n# やること\n- Nuxtのデータ取得をJSONPバージョンに更新\n- GASのレスポンスをJSONPバージョンに更新\n\n# Nuxtの更新\nまずはNuxt側の更新をしていきます。最初に`axios`の中で`jsonp`を使えるようにしてくれる[`axios-jsonp`](https://www.npmjs.com/package/axios-jsonp)を導入します。\nちなみに`axios`自体は`jsonp`をサポートしていないようです（[axios/COOKBOOK.md at master · axios/axios](https://github.com/axios/axios/blob/master/COOKBOOK.md#jsonp)）。\n\n```bash\n$ yarn add axios-jsonp\n```\n\naxiosのオプションに`adapter`として指定します。\n\n```vue:pages/index.vue ins={3,4,17} del={16}\n...\n<script>\n  const jsonpAdapter = require('axios-jsonp')\n\n  export default {\n    data() {\n      return {\n        users: []\n      }\n    },\n    created() {\n      this.getUsers()\n    },\n    methods: {\n      async getUsers() {\n        this.users = await this.$axios.$get('/api')\n        this.users = await this.$axios.$get('/api', { adapter: jsonpAdapter })\n      }\n    }\n  }\n  </script>\n```\n\nNuxt側の準備はこれで以上です。👏\n\n次は、GASを更新します。\n\n# GASの更新\n\nJSONPが何者かっていうと、JSONをCallback関数の引数として返すものです。\n\n- [第11回　JSONP入門：これでできる！ クロスブラウザJavaScript入門｜gihyo.jp … 技術評論社](https://gihyo.jp/dev/serial/01/crossbrowser-javascript/0011)\n\n通信のイメージは\n\n- リクエスト側：このCallback関数にデータちょうだーい\n- レスポンス側：データをCallback関数の引数にして送るよー\n- リクエスト側：ありがとー。あとはこっちのCallback関数で処理するぞー\n\n`axios-jsonp`はリクエスト側の「callback関数を自動で生成する」「axiosっぽくcallback関数で処理する」などをやってくれるライブラリということですね。\n\nなのでGAS側もその挙動に合わせてコーディングし直します。更新する箇所は`コード.js`の`doGet`関数の部分だけです！\n\n```js:コード.js ins={2,4,8,10} del={1,7,9}\nfunction doGet() {\nfunction doGet(e) {\n  const users = getUsers()\n  const callback = e.parameter.callback\n\n  return ContentService\n    .createTextOutput(JSON.stringify(users))\n    .createTextOutput(`${callback}(${JSON.stringify(users)})`)\n    .setMimeType(ContentService.MimeType.JSON)\n    .setMimeType(ContentService.MimeType.JAVASCRIPT)\n}\n```\n\n以上です。ちょっと説明。\n\n```js\nfunction doGet(e) {\n```\n\n`doGet`関数は引数`e`を利用可能です。`event`ですね。ここからURLのクエリパラメーターを取得できたりします。\n\nhttps://developers.google.com/apps-script/guides/web?hl=en#request_parameters\n\n`axios-jsonp`はクエリパラメーター`callback`でcallback関数を指定してくれるので、それを取得してレスポンスで返却するために`e`を追加します。\n\n```js\nconst callback = e.parameter.callback\n```\n\nこんな感じ。\n\n```js\n.createTextOutput(`${callback}(${JSON.stringify(users)})`)\n```\n\nこの部分で`callback([{'id': '1', ...}, ...])`みたいなレスポンスを生成しています。\nこれを`axios-jsonp`が受け取っていい感じにデータ`[{'id': '1', ...}, ...]`を扱ってくれるんですね。\n\n\n```js\n.setMimeType(ContentService.MimeType.JAVASCRIPT)\n```\n\n最後にJSONPはJSONとは異なり、MimeTypeを`JAVASCRIPT`にする必要があるので更新します。\n\n以上でGASの更新も完了です。👏\nWebAppをデプロイしてモバイルでもデータを表示できるか試してみましょう！\n\n## 小噺：デプロイは「デプロイを管理」から\nまた新しいデプロイからWebAppを作成するとURLが前回から変わってしまいます。\n「デプロイ」>「デプロイを管理」からバージョンアップがおすすめです。\n\n![デプロイを管理](./images/1_manage_deploy.png)\n\n# まとめ\n前回、スプレッドシートをDB代わりに使えるようになったかと思いきや、まさかのモバイルで使えない問題...\n今回はJSONPを使うことでモバイルでもスプレッドシートのデータを表示できました！\n\nこれでPCでもモバイルでもデータを表示できたし一見落着...と思いきや...\nspaces.bz でもこの方式でサービス提供していたのですが、いまは別のやり方にしてます。\n\n**次回！それSSRで動かしてよ**\n\nお楽しみに！\n\n[NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part3 - asyncDataでだって使いたい！](/blog/20211001-operation-to-use-google-spreadsheet-as-a-db-with-nuxt3)"},{"slug":"20211001-operation-to-use-google-spreadsheet-as-a-db-with-nuxt3","category":"blog","title":"NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part3 - asyncDataでだって使いたい！","tags":["spreadsheet","nuxt","asyncData","serverMiddleware","json"],"body":"\nシリーズ最終章（予定）です！\n\n[前回の記事]<br />\n[Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦](/blog/20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt)\n\n[前々回の記事]<br />\n[NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！](/blog/20210928-operation-to-use-google-spreadsheet-as-a-db-with-nuxt2)\n\nPart2では、PCは表示できるけどモバイルはできない、というPart1の課題をJSON→JSONPに更新することで解決しました。🎉\n\nこれでOKかと思いきや、spaces.bz の開発では次なる課題が！\n\n- 動的OGPやりたいよね\n- Search Consoleでソフト404って出てるけどなんだろうね\n\nうむ。いまのデータは`created`で取得しているのですが、ロボットに情報を確認してもらうためには`asyncData`でデータを取得しないとですね。\n\nたとえば、spaces.bz のデイリーランキングページを見てください。\nこのページでは動的OGPやソフト404対策としてアクセス時は`asyncData`を使ってスプレッドシートからデータを取得し、\n日付の変更の場合は`methods`の関数を使ってスプレッドシートからデータを取得しています。\n\nPart2の内容を踏まえると、`asyncData`でも同じようにデータを取得しようとすれば実現できそうですよね。\n（ボタンを押したらデータを更新する感じにします。）\n\n```vue:pages/index.vue ins={3,29-35} del={36-43}\n<template>\n  <div>\n    <button @click=\"getUsers\">更新</button>\n    <table>\n      <thead>\n        <tr>\n          <th>id</th>\n          <th>name</th>\n          <th>age</th>\n          <th>email</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for='user in users' :key='user.id'>\n          <td>{{ user.id }}</td>\n          <td>{{ user.name }}</td>\n          <td>{{ user.age }}</td>\n          <td>{{ user.email }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\n  const jsonpAdapter = require('axios-jsonp')\n\n  export default {\n    async asyncData({ $axios }) {\n      const users = await $axios.$get('/api', { adapter: jsonpAdapter })\n\n      return {\n        users: users\n      }\n    },\n    data() {\n      return {\n        users: []\n      }\n    },\n    created() {\n      this.getUsers()\n    },\n    methods: {\n      async getUsers() {\n        this.users = await this.$axios.$get('/api', { adapter: jsonpAdapter })\n      }\n    }\n  }\n```\nよっしゃ！これで行けるはず！\n\n![document is not found](./images/1_document_is_not_found.png)\n\nまあ、これで大丈夫なら記事書かないんですよね。\n\nということで、今回は`asyncData`でもスプレッドシートをDB代わりに使おう大作戦です。\n\n# 何がだめなの？\nなにが起きてるかというと、`axios-jsonp`でエラーが発生しています。\n「document is not found」とか「window is not found」とか、このエラーはフロントエンドで動作する前提のパッケージがバックエンドで動作するときに起こります。\nつまり、`asyncData`はバックエンドでデータを取得するので、フロントエンドで動作する前提の`axios-jsonp`は利用できないのです。\n\n# じゃあどうする？\nこういうパッケージは`nuxt.config.js`で`ssr: false`すればいい、とか、`<no-ssr>`、`<client-only>`タグで囲めばいい、とか解決策があるのですが、今回はasyncDataで動作させたいので採用できません。\nかといって、何も考えずにJSONPをやめてしまえばまたモバイルで使えなくなる...\n\nということで`serverMiddleware`を使ってみましょう！\nいままで「フロントエンド」→「GASのWebApp」と通信していた間にBFFライクにserverMiddlewareが入ります。\nこれによって、フロントエンドとしては同じドメインのサーバーと通信しているようになるのでCORS対策もバッチリになります。\n\nあれ、じゃあモバイルで使えないってなったとき、`JSONP`じゃなくて`serverMiddleware`でもよかったってこと？\nそうですね。気づきませんでした...\n\n# NuxtアプリでserverMiddleware経由でGAS APIをコールする\nまずはBFFでGAS APIをコールするコードを書いていきましょう。\nここでは[`express`](https://expressjs.com/)を利用します。\n\n```\n$ yarn add express\n```\n\n新しく`api`ディレクトリを作成し、その中にBFFのコードを書いていきましょう。\n\n```\n$ mkdir api\n$ touch api/index.js\n```\n\n```js:api/index.js\nconst express = require('express')\nconst axios = require('axios')\n\nconst app = express()\n\napp.get('/', async (req, res) => {\n  const users = await axios.get(<ウェブアプリのURL(GAS API)>)\n  res.send(users.data)\n})\n\nmodule.exports = {\n  path: \"/api/\",\n  handler: app\n}\n```\n\n今まで`pages/index.vue`でやっていた`axios`の処理を転記した感じですね。\nこれを`nuxt.config.js`に`serverMiddleware`として登録しましょう。（ついでにproxyも不要になったので消します）\n\n```js:nuxt.config.js ins={12-14} del={6-11}\nexport default {\n  ...\n  axios: {\n    proxy: true\n  },\n  proxy: {\n    '/api': {\n      target: <ウェブアプリ(GAS API)のURL>,\n      pathRewrite: { '/api': '' }\n    }\n  },\n  serverMiddleware: [\n    '@/api/'\n  ],\n  ...\n}\n```\n\nこれで`serverMiddleware`の準備は完了です。\n\nフロントエンドも`JSONP`から`JSON`を取得するように更新しておきましょう。\n\n```vue:pages/index.vue ins={8,17} del={3,4,7,16}\n...\n<script>\nconst jsonpAdapter = require('axios-jsonp')\n\nexport default {\n  async asyncData({ $axios }) {\n    const users = await $axios.$get('/api', { adapter: jsonpAdapter })\n    const users = await $axios.$get('/api')\n\n    return {\n      users: users\n    }\n  },\n  methods: {\n    async getUsers() {\n      this.users = await this.$axios.$get('/api', { adapter: jsonpAdapter })\n      this.users = await this.$axios.$get('/api')\n    }\n  }\n}\n</script>\n```\n\n`axios-jsonp`も不要になったので、パッケージを削除しておきましょう。\n\n```\n$ yarn remove axios-jsonp\n```\n\n見ての通り、`JSONP`ではなく`JSON`を期待してのコールですので、GASのコードを元(Part1)時点に戻していきます。\n\n# GAS APIをJSON返却に戻す\n\n```js:コード.js ins={7,9} del={3,6,8}\nfunction doGet(e) {\n  const users = getUsers()\n  const callback = e.parameter.callback\n\n  return ContentService\n    .createTextOutput(`${callback}(${JSON.stringify(users)})`)\n    .createTextOutput(JSON.stringify(users))\n    .setMimeType(ContentService.MimeType.JAVASCRIPT)\n    .setMimeType(ContentService.MimeType.JSON)\n}\n...\n```\nここまででBFFの準備ができました！🎉\n\n# 動作確認\n最後に動作確認をしておきましょう。\n期待動作としては\n\n1. `http://localhost:3000/`にアクセス → ユーザーA/B/Cのデータが表示される！\n2. SpreadsheetにユーザーDのデータを登録\n3. Nuxtの方で「更新」ボタンを押す → ユーザーDのデータも表示される！\n\nです！ではやっていきましょう！\n\n### 1. `http://localhost:3000/`にアクセス\n\n![http://localhost:3000/にアクセスして、ユーザーA/B/Cのデータが表示されることを確認！](./images/2_test1.png)\n\n表示されてる！\n\n### 2. スプレッドシートにユーザーDを追加\n\n|id|name|age|email|\n| --- | --- | --- | --- |\n|1|Test A|20|test_a@sample.com|\n|2|Test B|30|test_b@sample.com|\n|3|Test C|40|test_c@sample.com|\n|4|Test D|50|test_d@sample.com|\n\n### 3. 更新ボタンを押下\n![http://localhost:3000/で更新ボタンを押して、ユーザーA/B/C/Dのデータが表示されることを確認！](./images/3_test2.png)\nユーザーDの情報が新たに表示されてる！\n\nテスト成功！🎊\n\n# まとめ\n\n今回は`serverMiddleware`を使って、スプレッドシートをDB代わりに使ってみました。\nここまで色々と試行錯誤をしてきましたが、今回がやりたいことができて一番手っ取り早い方法なんじゃないかと思います。\n[Google Sheet API](https://developers.google.com/sheets/api)とかも試みてみましたが挫折しました...\n\nスプレッドシートだとデータも見やすいですし、GASで色々操作できたりもするので、作りたいプロダクトによっては一つの選択肢になってくるのかなと思います。\nこの記事が、どなたかの役に立てば嬉しいです！\n"},{"slug":"20211001-simple-gas-for-notifying-gmail-to-a-slack-channel","category":"blog","title":"GmailをSlackのチャンネルに通知する超シンプルなGAS","tags":["Gmail","Slack","GAS"],"body":"\n友人と個人開発してまして、各種サービスは共有のGoogleアカウントを使っています。\nどちらかしか通知を受けられない、操作できないのは面倒なので。\n\nしかし、自分たちもGoogleアカウントを持っており、Gmailを見るためにアカウントを切り替えるのは面倒ですし、\nコミュニケーションはSlackで行っているので、GmailをSlackのチャンネルに通知してSlackで会話できるといいなーと思っていました。\n\n色々と調べると\n\n1. Slackの転送先メールアドレスをGmailの転送先に指定する\n2. Google Workspace Marketplaceの「[Slack for Gmail](https://workspace.google.com/marketplace/app/slack_for_gmail/533288507123?hl=ja)」を使う\n2. Slackの「[Email](https://spacesbz.slack.com/apps/A0F81496D-email?tab=more_info)」アプリを使う\n3. GAS\n\nなど、いろいろな方法が紹介されていました。\n\nしかしながら、どれも要件を満たすのが難しそう。\n\n`1`はslackbotへのDMになってしまいチャンネルポストができなそうです。\n\n`2`はブラウザでGmailを開いて、メールごとチャンネルごとに手作業が必要です。\n\n`3`は「Email」アプリが有料ワークスペースでないと使えなそうです。\n\n`4`は検索で引っかかるコードを見る限り、割と複雑そうです...\n\nんー、どうしたものか。\n\nん？`4`、本当に複雑なのか？\n\nあれ？お前、実はもっとシンプルになるんじゃないのか？\n\nということで、GmailをSlackに通知するGASはすごくシンプルだよ！の例を示していきたいと思います。\n\n# サンプルコード\n\nいきなりサンプルコードです。（メールをSlackに転送したいアカウントでやってください）\n\n```js:コード.js\nfunction main() {\n  const threads = GmailApp.search('in:Inbox is:Unread', 0, 100)\n  \n  threads.forEach((thread) => {\n    thread.getMessages().forEach((message) => {\n      if (!message.isUnread()) { return }\n      const text = create_message(message)\n      send_to_slack(text)\n      message.markRead()\n    })\n  })\n}\n\nfunction create_message(message) {\n  return  `[Date] ${message.getDate()}`\n          + `\\n[From] ${message.getFrom()}` \n          + `\\n[Subject] ${message.getSubject()}`\n          + `\\n[Body]\\n${message.getPlainBody()}`\n}\n\nfunction send_to_slack(text) {\n  const webhook_url = <SlackのIncoming webhook URL>\n  const headers = { \"Content-type\": \"application/json\" }\n  const data = { \"text\": text }\n  const options = {\n    \"method\": \"post\",\n    \"headers\": headers,\n    \"payload\": JSON.stringify(data),\n    \"muteHttpExceptions\": true\n  }\n  UrlFetchApp.fetch(webhook_url, options)\n}\n```\n\n`send_to_slack`関数はSlackにテキストメッセージを送るところなのでノーカウント（この記事では説明しません）とすると、めちゃくちゃシンプルじゃありません？\n\njavascriptのコードはおいておいて、GmailApp系の部分をちょっとだけ解説します。\n\n## GmailApp.search()\n\n```js\nconst threads = GmailApp.search('in:Inbox is:Unread', 0, 100)\n```\n`GmailApp.search(query, start, max)`は`query`の条件に合うスレッドの配列(`GmailThread[]`)を取得する関数です。\n今回は`'in:Inbox is:Unread'`を指定しているので、「受信ボックス」の中で「未読」のものを拾ってきます。\nまた、`start`に`0`、`max`に`100`を指定しているので、最新のスレッドから100件までの中から`query`を検索してもらっています。\n\nhttps://developers.google.com/apps-script/reference/gmail/gmail-app#search(String,Integer,Integer)\n\n## thread.getMessages()\n\n```js\nthreads.forEach((thread) => {\n  thread.getMessages().forEach((message) => {\n    ...\n  })\n})\n```\n`GmailThread.getMessages()`でそのスレッド内のメッセージ（メール）の配列(`GmailMessage[]`)を取得してます。\nそれを`forEach`で回すことで一つ一つのメッセージを扱えます。こいつがメール本体。主役の登場です。\n\nhttps://developers.google.com/apps-script/reference/gmail/gmail-thread#getMessages()\n\n## message.isUnread()\n\n```js:function main()\nif (!message.isUnread()) { return }\n```\n`GmailMessage.inUnread()`はそのメッセージが未読なら`true`、既読なら`false`を返却します。\nこのコードではそれの否定(`!`)でif文を書いているので、既読の場合`return`、つまり後続の処理をせずに`forEach`を継続させています。\n\nhttps://developers.google.com/apps-script/reference/gmail/gmail-message#isUnread()\n\n## message.getXXX()\n\n```js:function main()\nconst text = create_message(message)\n \n...\n\nfunction create_message(message) {\n  return  `[Date] ${message.getDate()}`\n          + `\\n[From] ${message.getFrom()}` \n          + `\\n[Subject] ${message.getSubject()}`\n          + `\\n[Body]\\n${message.getPlainBody()}`\n}\n```\nSlackに投稿するテキストメッセージを生成しているのがこの辺です。\n`GmailMessage.getXXX()`を使ってメッセージを作ってます。`getXXX()`はいろいろな種類があるので、投稿したいテキストメッセージに合わせてカスタマイズしてください！\n今回は、「受信日時(`getDate()`)」「送信者(`getFrom`)」「タイトル(`getSubject()`)」「プレーンテキストの本文(`getPlainBody()`)」を利用してみました。\n\nhttps://developers.google.com/apps-script/reference/gmail/gmail-message\n\n## message.markRead()\n\n```js:function main()\nmessage.markRead()\n```\n最後に`message.markRead()`でメッセージを既読にしています。\nこれで、次回以降は`!message.isUnread()`に弾かれて処理されなくなります。\n\nhttps://developers.google.com/apps-script/reference/gmail/gmail-message#markRead()\n\n# まとめ\n\nどうですか？意外にシンプルですよね。\nあとはGASのトリガーを好きな時間単位で指定すれば出来上がりです。\n僕たちはGASのエラー通知をすぐに受信したいので1分単位でトリガーをセットしています。\n\nGASでこういうことできるよ！という記事はいっぱいあるのですが、Googleで検索してもなかなか公式ドキュメントにたどり着けないんですよね。\n実はめちゃくちゃわかりやすいので公式ドキュメントを眺めてやりたいことを実現していきましょう！！👏\n\n例えばGmailなら\nhttps://developers.google.com/apps-script/reference/gmail/gmail-app\n\n誰かのためになれば嬉しいです。一応丁寧に説明できたかなと。\n"},{"slug":"20211012-the-project-progressed-when-we-stop-the-meeting-to-share-the-progress-of-the-project","category":"blog","title":"定例会をなくしたら進捗した話","tags":["ファシリテーション","プロジェクトマネジメント"],"body":"\n定例会で進捗共有して課題議論して宿題持ち帰って。会社によっては、プロジェクトが始まるときにまずは定例会の日付を決めることもあると思います。\n\n前携わったプロジェクトでも、定例会を開催していました。\n毎週課題を持ち寄り持ち帰り、また次の週に回答し回答をもらい、そんな定例会。\n\nふと「定例会開催まで課題がどっちかのボールで留まってしまうのはどうなんだろう？」と感じ、定例会を一旦やめる提案をしました。\n\n課題管理にはBacklogを使っていたので、進捗をすぐに共有することはできるはず。定例会もBacklogをみんなで眺めて更新していくやり方だったので、それを個々人が行えばいいだけ。\n\n結果はどうなったのか。\n\nある人との課題はめちゃくちゃスムーズに進捗するようになりました。\n定例会があることで、進捗は定例会で共有するもの（進捗は定例会以外で共有するものではない）と思っていたようです。\n1日に1回キャッチボールがあれば、5営業日で定例会有りのときと比べて5倍の進捗になります。\n\nある人との課題は進まなくなりました。Backlogを更新するやり方がわからないとか、更新する暇がないとか。\nこれには困りましたが、その人と同じグループの人が使い方をレクチャーしたり、最悪代わりに更新したりすることで、最終的には定例会以上には進捗するようになりました。\n\nもちろんこれで顔を合わせなくなったわけではないです。\n複雑な話やホワイトボードを使って議論したい内容のときはアドホックに時間を取ってMTGを開きました。\n\nすべての定例会がダメだとは思わないし、定例会があった方がリズムが生まれたりすることもあります。\nでも、週一とか隔週とかの定例会を当たり前に思ってしまっていないでしょうか。その当たり前の定例会がプロジェクトの進捗を滞らせてしまっている可能性も確かにあります。\n\n当たり前を疑って、定例会を見つめ直すのも悪くないなって思った話でした。\n"},{"slug":"20211014-easy-dynamic-ogp-with-google-spreadsheet-and-slides","category":"blog","title":"Google SpreadsheetとGoogle Slidesでお手軽動的OGP with Nuxt","tags":["Google Spreadsheet","Google Slides","Nuxt.js","GAS","OGP"],"body":"\nいま話題のスペースに出会える spaces.bz（クローズ済み）では、デイリーランキングで動的OGPを実装しています。\n\n実はこれ、Google SpreadsheetとGoogle Slidesを使って、GASで毎日OGP画像を生成して表示させているんです。\n結構面白いアイデアかな、と思うのでシェアします！😊\n\n# 全体像\nまずこの記事で紹介する全体像を。\n\n1. 動的OGPのもとになるSlidesを作成\n1. 動的OGPのデータのもとになるSpreadsheetを作成\n1. GASを作成\n    - SpreadsheetのデータをもとにSlidesの文字列を置換\n    - Slidesを画像ファイルでエクスポートしてDriveに保存\n    - SpreadsheetにDriveに保存した画像ファイルのIDを追加\n    - Slidesを元の文字列に置換し直す\n1. SpreadsheetをWebApp（API）で公開\n1. Nuxtアプリで動的OGPを設定\n\nちょっと長いですが、お付き合いいただけると嬉しいです🙏\n\n# 1. 動的OGPの元になるSlidesを準備\nまずはいい感じのOGPのデザインをGoogle Slidesで作ります。\n\n![slidesのイメージ](./images/1_slides_image.png)\n\nCoolです。ポイントとしてはOGPは1200mmx628mmのサイズがよいので、「ファイル > ページ設定」からスライドの縦横サイズを変更してます。\n\nこのスライドに書いている「name」はこの後置換するためのキーワードになってます。\n\n# 2. 動的OGPのデータのもとになるSpreadsheetを準備\n「name」を置換していきたいので、そんな感じのSpreadsheetを用意します。\nspaces.bz の場合は、その日のランキング10位までをGASで集計して、そのデータを元に置換を行っています。\n今回は簡単な例なので、以下のようなシートを用意します。\n\n|id|name|ogpId|\n| --- | --- | --- |\n|1|Test A||\n|2|Test B||\n|3|Test C||\n\n`ogp_id`は今のところ空ですが列だけ用意しておきます。後でGASでOGP画像のファイルを生成したときに画像ファイルのIDをセットするカラムです。\n\n# 3. GASを作成\nこの記事の佳境です！\n\nまずコードの全容をさらします。\n説明しやすいように書いていますが、内容を理解いただければ色々な書き方があるかなーと思います。\n\n```js:コード.js\nfunction main() {\n  const ss = SpreadsheetApp.openById('<SpreadsheetのID>')\n  const sheet = ss.getSheetByName('<Sheetの名前>')\n  const data = sheet.getDataRange().getValues()\n  const columnNames = data.shift()\n  const presentationId = '<SlidesのID>'\n  const folder = DriveApp.getFolderById('<FolderのID>')\n\n  data.forEach((row, index) => {\n    const name = row[1]\n    replaceText(presentationId, name)\n    const ogpId = downloadImage(presentationId, `${index}.png`, folder)\n    row[2] = ogpId\n    resetText(presentationId, name)\n  })\n\n  data.unshift(columnNames)\n  sheet.getRange(1, 1, data.length, data[0].length).setValues(data)\n}\n\nfunction replaceText(presentationId, name) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  slide.replaceAllText('name', name)\n  presentation.saveAndClose()  \n}\n\nfunction downloadImage(presentationId, fileName, folder) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  const slideId = slide.getObjectId()\n  const url = `https://docs.google.com/presentation/d/${presentationId}/export/png?id=${presentationId}&pageId=${slideId}`\n  const options = {\n    headers: {\n      Authorization: `Bearer ${ScriptApp.getOAuthToken()}`\n    }\n  }\n\n  const response = UrlFetchApp.fetch(url, options)\n  const image = response.getAs(MimeType.PNG)\n  image.setName(fileName)\n  const file = folder.createFile(image)\n  return file.getId()\n}\n\nfunction resetText(presentationId, name) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  slide.replaceAllText(name, 'name')\n  presentation.saveAndClose()\n}\n```\n\n少し長いですが、少しずつ区切ってみていきます。\n\n## 3-1. 各種変数の設定\n```js\nconst ss = SpreadsheetApp.openById('<SpreadsheetのID>')\nconst sheet = ss.getSheetByName('<Sheetの名前>')\nconst data = sheet.getDataRange().getValues()\nconst columnNames = data.shift()\nconst presentationId = '<SlidesのID>'\nconst folder = DriveApp.getFolderById('<FolderのID>')\n```\n\n最初の`const`たちは変数の設定です。\n\n|変数|説明|\n| ----- | ----- |\n|`ss`|2で作成したSpreadsheet。`<SpreadsheetのID>`は`https://docs.google.com/spreadsheets/d/<この部分>/edit`|\n|`sheet`|2で作成したシート|\n|`data`|`sheet`のデータをArrayで取得したもの|\n|`columnNames`|`data`の1行目を取り出したもの|\n|`presentationId`|1で作成したSlidesのID。`https://docs.google.com/presentation/d/<この部分>/edit#slide=id.p`|\n|`folder`|作成したOGP画像を格納しておきたいGoogle Driveのフォルダ。`<FolderのID>`は`https://drive.google.com/drive/u/0/folders/<この部分>`。このフォルダは公開設定にしておきます（後述）|\n\nこのとき、`data`と`columnNames`は以下のようになっています。\n\n```js\ndata = [\n  ['1', 'Test A', ''],\n  ['2', 'Test B', ''],\n  ['3', 'Test C', '']\n]\n\ncolumnNames = ['id', 'name', 'ogpId']\n```\n\n## 3-2. 置換して画像保存して置換し直す\n\n```js\n  data.forEach((row, index) => {\n    const name = row[1]\n    replaceText(presentationId, name)\n    const ogpId = downloadImage(presentationId, `${index}.png`, folder)\n    row[2] = ogpId\n    resetText(presentationId, name)\n  })\n```\n\nここが核です！なにか色々やっているようですが、ほとんどの行は別に作成した関数を呼び出しているのでそこも説明していきます。\n\nまず、全体は`data.forEach`で回しています。\n最初に`row[1]`で、`Test A`, `Test B`, `Test C`をループごとに`name`に格納しています。\nそれに続いて、\n\n1. スライドのテキストを`name`に置換（`replaceText()`）\n2. スライドをイメージ保存（`downloadImage()`）\n3. 保存したファイルのIDを`data`に追加（`row[2] = ogpId`）\n4. スライドのテキストを置換し直す（`resetText()`）\n\nと処理を流しています。\n\n### 3-2-1. スライドのテキストを置換\n\nスライドのテキストの置換処理を行う`replaceText()`関数を定義しました。\n\n```js\nfunction replaceText(presentationId, name) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  slide.replaceAllText('name', name)\n  presentation.saveAndClose()  \n}\n```\n引数は`presentationId`と、置換後の文字列`name`です。\nまず、`SlidesApp.openById(presentationId)`で置換したいスライドがあるSlidesを開きます。\nそして、`getSlides()[0]`を使って、そのSlidesの1枚目のスライドを取得します。\nその`slide`に対して`replaceAllText()`を実行することで、`slide`の中の`'name'`の文字列を引数の`name`に置換しています。\n最後に`presentation.saveAndClose()`で置換を確定しています。`saveAndClose()`を行わないと、次のイメージ保存で置換前の状態で保存されてしまうので要チェックです。\n\n置換の処理はこれだけです。置換したい文字列が複数ある場合でも同じやり方で`slide.replaceAllText()`を追加すればできますし、複数のスライドに対してやりたい場合は`presentation`に対して`replaceAllText()`したり、`getSlides()`の結果を`forEach`で回してスライド1枚ずつに処理することで実現できますね。\n\n### 3-2-2. スライドを保存\nこれで動的OGPのイメージの準備ができたので、これをイメージファイルに保存します。今回は`png`で。\n\n```js\nfunction downloadImage(presentationId, fileName, folder) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  const slideId = slide.getObjectId()\n  const url = `https://docs.google.com/presentation/d/${presentationId}/export/png?id=${presentationId}&pageId=${slideId}`\n  const options = {\n    headers: {\n      Authorization: `Bearer ${ScriptApp.getOAuthToken()}`\n    }\n  }\n\n  const response = UrlFetchApp.fetch(url, options)\n  const image = response.getAs(MimeType.PNG)\n  image.setName(fileName)\n  const file = folder.createFile(image)\n  return file.getId()\n}\n```\n何をするかというと、SlidesをダウンロードするURLにリクエストを投げて、レスポンスをpngファイルにして保存しようというやり方です。\n\n引数は、`presentationId`と`folder`、そしてファイル名として`fileName`を取ります。\n最初の`presentation`と`slide`の式は`replaceText()`と同じなので説明は省略します。\n`slideId`はそのスライドのIDのことで、`https://docs.google.com/presentation/d/<presentationId>/edit#slide=id.<'この部分'>`です。これは`slide.getObjectId()`で取得ができます。\n\nこれらの変数を使ってリクエストURL`url`を作ります。\nリクエストには認証が必要なので、`ScriptApp.getOAuthToken()`を使ってBearer認証できるように`options`を作っておきます。\n\nこの`url`と`options`を使って、`UrlFetchApp.fetch()`でリクエストを投げ、レスポンスを`response`に格納しています。\n`response`は`HTTPResponse`というClassになっているので、画像ファイルとして扱えるように`getAs(MimeType.PNG)`でpngファイルに変換し、`setName()`でファイル名を設定しました。\nそれを、`folder.createFile()`で`folder`にファイルとして保存しているって流れです。\n最後に、保存したファイル`file`のIDを`getId()`で取得して、返り値にしています。\n\n### 3-2-3. 保存したファイルのIDをデータに追加\n```js\nconst ogpId = downloadImage(presentationId, `${index}.png`, folder)\nrow[2] = ogpId\n```\n先程説明したように`downloadImage()`は作成したpngファイルのIDをreturnしてます。\nそれを`row[2]`、つまり`ogpId`のカラムに設定しています。\n詳しくは後ほど紹介しますが、これがNuxtアプリでGoogle Driveの画像ファイルをOGPに設定する肝だったりします。\n\n### 3-2-4. スライドのテキストを置換し直す\nここまで終わったら次のループのためにスライドの文字列を元の`'name'`に戻しておきます。このために`resetText()`の関数を用意して呼び出しています。\n\n```js\nfunction resetText(presentationId, name) {\n  const presentation = SlidesApp.openById(presentationId)\n  const slide = presentation.getSlides()[0]\n  slide.replaceAllText(name, 'name')\n  presentation.saveAndClose()\n}\n```\nやっていることは`replaceText()`の逆なので説明は省略！\n\n## 3-3. スプレッドシートのogpIdを更新\n```js\ndata.unshift(columnNames)\nsheet.getRange(1, 1, data.length, data[0].length).setValues(data)\n```\n最後にSpreadsheetのogpIdカラムを更新しましょう。\nすでにここまでの処理で`data`の各Array要素の3つ目の要素に`ogpId`が格納されているので、Spreadsheetを上書きすればOKですね。\n\nということで、`data.unshift(columnNames)`で`data`の1つ目の要素に列の名前を戻して、\n`sheet.getRange().setValues()`でデータを上書きしています。\n\nここまでで画像を作成するステップが完了です。😊\nここからはSpreadsheetをもとにNuxtアプリでOGP画像を動的に設定してみましょう！\n\n# 4. SpreadsheetをWebApp（API）で公開\n次は先程OGPのIDを追記したSpreadsheetをWebAppで公開していきます。\nこのやり方は、以前に記事を書いたので詳細はそちらを見てください！\n\n[Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦](/blog/20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt)\n\nGASのコードは以下のようになります。先程の`コード.js`に追記していきましょう。\n\n```js:コード.js\n...\nfunction doGet() {\n  const users = getUsers()\n  return ContentService\n          .createTextOutput(JSON.stringify(users))\n          .setMimeType(ContentService.MimeType.JSON)\n}\n\nfunction getUsers() {\n  const ss = SpreadsheetApp.openById('<SpreadsheetのID>')\n  const sheet = ss.getSheetByName('<シート名>')\n  const table = sheet.getDataRange().getValues()\n  const keys = table.shift()\n\n  const users = table.map((row) => {\n    const object = {}\n    row.map((value, index) => {\n      object[String(keys[index])] = String(value)\n    })\n    return object\n  })\n\n  return users\n}\n```\nこれを、デプロイしてWebApp公開しましょー。\n\n# 5. Nuxtアプリで動的OGPを設定\nまずは、Nuxtアプリで先程公開したWebAppにリクエストする下準備をします。今回は`axios`を使うことを前提として、`serverMiddleware`経由でWebAppを呼び出します。\nこちらも過去に記事を書いていますので、詳細についてはそちらを参照してください。\n\n[NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part3 - asyncDataでだって使いたい！](/blog/20211001-operation-to-use-google-spreadsheet-as-a-db-with-nuxt3)\n\n以下の更新、もしくは新規作成を行います。\n\n```js:nuxt.config.js ins={3-8}\nexport default {\n  ...\n  axios: {\n    proxy: true,\n  },\n  serverMiddleware: [\n    '@api/'\n  ],\n  ...\n}\n```\n\n```js:api/index.js\nconst express = require('express')\nconst axios = require('axios')\nconst app = express()\n\napp.get('/', async (req, res) => {\n  const response = axios.get('<WebAppのURL>')\n  res.send(response.data)\n})\n\nmodule.exports = {\n  path: '/api/',\n  handler: app,\n}\n```\n\nこれで下準備が完了です。あとは`pages`のファイルで`asyncData()`で情報取得して、`head()`で画像のパスを指定してあげるだけです。\n\n今回は`pages/index.vue`でクエリパラメーター`id`に応じてOGP画像を出し入れしましょう。パスパラメーターとかでもやり方は基本的に変わりないです。\n\n```vue:pages/index.vue\n...\n<script>\nexport default {\n  async asyncData({ $axios, query }) {\n    const users = await $axios.$get('/api')\n    const user = query.id ? users.find((user) => user.id === query.id) : null\n    const ogpUrl = user ? `https://drive.google.com/uc?export=view&id=${user.ogpId}` : <共通のOGPイメージのパス>\n\n    return {\n      users: users,\n      ogpUrl: ogpUrl\n    }\n  },\n\n  head() {\n    return {\n      meta: [\n        {\n          hid: 'og:image',\n          property: 'og:image',\n          content: this.ogpUrl\n        }\n      ]\n    }\n  }\n}\n</script>\n...\n```\n\n例えばこんな感じ。（`nuxt.config.js`で他のタグは設定されている前提です！）\n`asyncData`でクエリパラメーター`id`が存在する場合は、`users`から同じ`id`の`user`を探してます。\n見つかったら`ogpUrl`に`https://drive.google.com/uc?export=view&id=${user.ogpId}`を、存在しない場合は\\<共通のOGPイメージのパス\\>をセットし、`head()`で`og:image`の`property`として`ogpUrl`を設定しています。\nこうすることでクエリパラメーター`id`に応じて動的にOGPを設定することができます。\n\nさて、ここで出てきた`https://drive.google.com/uc?export=view&id=`です。\nGoogle Drive上で画像ファイルを見ようとするとプレビューモードで表示されると思います。この状態ではコードからすれば画像ファイルとして扱うことができません。\n実は`https://drive.google.com/uc?export=view&id=<表示したい画像ファイルのID>`であれば、プレビューモードではなく画像ファイルとして認識させることができます。\nまた、これで表示できるのは閲覧権限をもつユーザーのみですので、OGP画像を保存しているフォルダはすべてのユーザーに閲覧権限で公開されている必要があります。\n\n[ngrok](https://ngrok.com/)で公開し、[Twitter Card Validator](https://cards-dev.twitter.com/validator)でOGPが正しく設定されているか確認してみましょう。\n\n## id=1のとき\n![id=1のとき](./images/2_twitter_card_validator_1.png)\n\n## id=2のとき\n![id=2のとき](./images/3_twitter_card_validator_2.png)\n\n動的にOGP画像が表示されてることを確認できました！\n\n# まとめ\n長くなってしまいましたが、これでSpreadsheetとSlidesを使ってOGP画像を生成しNuxtアプリで動的OGPを実現する一連の流れを紹介させていただきました。\nかなり色々なサイトを参考にさせていただいてここまでできたので、この場を借りてお礼を。m(_ _)m\nGAS、かなり色々なことができるので楽しいですね。\n\n# 参考\n- [Slides Service  |  Apps Script  |  Google Developers](https://developers.google.com/apps-script/reference/slides?hl=en)\n- [Spreadsheet Service  |  Apps Script  |  Google Developers](https://developers.google.com/apps-script/reference/spreadsheet)\n- [Drive Service  |  Apps Script  |  Google Developers](https://developers.google.com/apps-script/reference/drive)\n- [[Google Apps Script]Googleスライドのプレゼンテーションを他形式に変換する | 初心者備忘録](https://www.ka-net.org/blog/?p=12905)\n- [Google ドライブでファイル名とリンクの一覧をお手軽に取得する方法 | DevelopersIO](https://dev.classmethod.jp/articles/gas-get-file-list-in-folder/)\n- [Google Drive に保存した画像を直接呼び出せるURLの取得 - Qiita](https://qiita.com/codeDiver/items/0394968fa318d9309d33)"},{"slug":"20211021-fact-of-teams-to-want-a-team-to-know","category":"blog","title":"チームに知っておいてほしいチームのこと","tags":["チーム"],"body":"\nチームで仕事をする機会はどんどん多くなっているらしいです。\n一方で、「チーム」について誰かと話したり、誰かから教わったりする機会はあまりないように感じます。\n\n仕事で「チームってさ」みたいなことを話す機会があったので、それを元にチームに知っておいてほしいチームのことを書きます。\nこれがチームの全てではないですし、これを知っておけば、やっておけば、チームとして完璧になれるって公式はないと思っています。チームが少しでもチームのことを話し合うきっかけになればってnoteです。\n\n## チームとは\n\nチームの話をするので、チームの定義が必要です。私が「チーム」に強い興味を持ったのは、Googleのre:workが要因の一つでした。ですので、そこから引用させていただきます。**re:Workの「効果的なチームとは何か」を知る**は一読お願いします🙏\n\n[Google re:Work - ガイド: 「効果的なチームとは何か」を知る](https://rework.withgoogle.com/jp/guides/understanding-team-effectiveness/#introduction)\n\n> ワークグループ <br />\n> 相互依存性が最小限という特徴があり、組織または管理上の階層関係に基づいています。ワークグループのメンバーは、情報交換のために定期的に集まる場合があります。\n> \n> チーム <br />\n> メンバーは相互に強く依存しながら、特定のプロジェクトを遂行するために、作業内容を計画し、問題を解決し、意思決定を下し、進捗状況を確認します。チームのメンバーは、作業を行うために互いを必要とします。\n\n個人ではない人の集団は、メンバーが相互に依存し合う「チーム」と依存しあわない「ワークグループ（または単にグループ）」に分けられます。\n\nグループは、例えば定例で進捗を共有している同じ部の同僚とか、定期的に意見交換するコミュニティのメンバーとか、そういう集まりですね。\n\nチームは、同じ目的に向かって協働している人たちの集まりになります。短期のプロジェクトであっても長期のプロダクト開発のようなものであっても、同じ目的を達成するために協働しているのであればチームとして捉えるといいです。\n\n## 効果的なチームとは\n\nせっかくチームを組んで目的に向かって走っていくのですから、効果的なチームでありたいですよね。では、効果的なチームとはどんなチームでしょうか？\n\n唯一の答えはありません。ぜひチームで議論したいテーマですよね。\nre:Workの続きですが、Googleのプロジェクト・アリストテレスの研究結果では、**マネージャーは「チームが成果（売上高、サービスの立ち上げ、など）を挙げられているか」を、チームメンバーは「チームの文化や風土（心地よいか、成長できるか、など）」を指標とすることが多い**ようです。\n\nそう考えるとこの両面を達成できているチームが効果的なチームと言えそうです。\n\n## 効果的なチームの特徴\n\nプロジェクト・アリストテレスでは、効果的なチーム（成果が出ていて、文化や風土も良い）に共通する特徴も挙げています。それが以下の５つです。\n\n> **心理的安全性**<br />\n> 「チームの中でミスをしても、それを理由に非難されることはない」と思えるか\n>\n> **相互信頼**<br />\n> 「チームメンバーは、一度引き受けた仕事は最後までやりきってくれる」と思えるか\n>\n> **構造と明確さ**<br />\n> 「チームには、有効な意思決定プロセスがある」と思えるか\n>\n> **仕事の意味**<br />\n> 「チームのためにしている仕事は、自分自身にとっても意義がある」と思えるか\n>\n> **インパクト**<br />\n> 「チームの成果が組織の目標達成にどう貢献するかを理解している」か\n\nこの中でも特に「心理的安全性」が重要であり、他の4つの特徴を生み出すための土台と言われています。なのでこれに注目するのは良いのですが、他の4つを忘れてはいけません。チームの心理的安全性についてはよく取り上げられるので「私たちのチームは高い心理的安全性を保っているから大丈夫」と思っている場合は、**「私たちは「相互信頼」「構造と明確さ」「仕事の意味」「インパクト」を持っているだろうか？」**というもう一歩先の議論を進めてみるとよいと思います。いい雰囲気のチームでも、この質問に対しては色々な意見が出て面白いと思いますよ😁\n\n## チームの心理的安全性\n\n効果的なチームになる土台はチームの心理的安全性です。\n\nチームの心理的安全性とは、**チームの中で対人関係におけるリスクをとっても大丈夫だ、というチームメンバーに共有される信念のこと**、です。\n対人関係におけるリスクは、**「無知」「無能」「邪魔」「否定的」と思われること**です。例えば、「わからないので教えてください」とか「こういう捉え方もあるんじゃないですかね」とか、チームが機能するためには当然必要であろう言動だけど周りの目が気になってなかなかできないものってありますよね。あれが自然とできる状態がチームの心理的安全性が高い状態です。\n\n「**率直に話せること**」とも表現されています（僕はこの表現がシンプルで好きです）。\n\nチームの心理的安全性について、面白い本もあるので輪読とかしてみてもいいかもしれないですね。📚\n\n[恐れのない組織――「心理的安全性」が学習・イノベーション・成長をもたらす](https://amzn.to/3Ulbykc)\n\n[心理的安全性のつくりかた　「心理的柔軟性」が困難を乗り越えるチームに変える](https://amzn.to/3SpMRR0)\n\n[チームが機能するとはどういうことか ― 「学習力」と「実行力」を高める実践アプローチ](https://amzn.to/3Onwd3i)\n\n## チームの心理的安全性の四象限\n\nチームの心理的安全性はよく「仲が良い」と誤用されるそうです。それを説明するために、四象限の図が用いられています。\n\n![心理的安全性の四象限](./images/quadrant-for-psychological-safety.webp)\n\nこの図は「[恐れのない組織](https://amzn.to/3Ulbykc)」の図から少し改変しております。\n\nつまり、「心理的安全性が高い」だけでは「快適」止まりで高い成果にはつながらず、「学習する高いパフォーマンスのチーム」は高い心理的安全性に加えて「高い成果基準」が必要だ、ということです。\n\nちょうど、プロジェクト・アリストテレスでマネージャーとメンバーの考える「効果的なチームの基準」の両軸にあたります。効果的なチームになるためには、高い心理的安全性と高い成果基準（目標）が必要だということがわかりますね。\n\n## ヘルシーコンフリクト（健全な衝突）\n\nコンフリクトとは「衝突」のことです。基本的に衝突はチームのパフォーマンスに悪影響を及ぼします。\n\nしかし、心理的安全性の高いチームでは、むしろチームのパフォーマンスに好影響を与えることがわかっているそうです。心理的安全性が高いということは、「対人関係のリスクがない」というマインドがチームの中に存在することになります。他人の発言は自分を陥れたりコントロールしようとするものではなく、純粋にチームを、成果をよりよいものにするためのものだと心から捉えることができることで、建設的な議論に発展していくんでしょうね。\n\n## HRT\n\nHRTは、『[Team Geek](https://amzn.to/47VRubf)』で紹介されている、チームで働く上で人間関係を円滑にし健全な対話とコラボレーションの基盤となるソーシャルスキルの三本柱、です。\n\n[Team Geek ―Googleのギークたちはいかにしてチームを作るのか](https://amzn.to/47VRubf)\n\n> **Humility（謙虚）**<br />\n> 自分は世界の中心でも、全知全能でも、絶対に正しくもない。常に自分を改善する。\n>\n> **Respect（尊敬）**<br />\n> 一緒に働く人のことを心から思いやる。一人の人間として認め、能力や功績を正しく高く評価する。\n>\n> **Trust（信頼）**<br />\n> 自分以外の人は有能で正しいことをすると信じる。\n\n効果的なチームになるためには、メンバーがこれらに共感し、行動で示すのがよいと思います。\n\n『Team Geek』自体はエンジニアチームを題材にしているのですが、三本柱を見て分かる通り、あらゆるチームに適応できることがある本です。\n\n## タックマンモデル\n\nまた少し違う理論からチームを見てみます。タックマンモデルという、チームのフェーズと成果を時間軸で捉えたモデルがあります。\n\n![タックマンモデル](./images/tuckman-model.webp)\n\nタックマンモデルによると、チームは高パフォーマンスを発揮するために4つのフェーズを経験します。\n\n> **形成期（Forming）**<br />\n> お互いのことをよく知らず、チームの目標も不明瞭な段階\n> \n> **混乱期（Storming）**<br />\n> お互いの役割や考え方によって対立が起きている段階\n> \n> **統一期（Norming）**<br />\n> チームの行動規範や役割が確立し、他の人の考え方を受容し合っている段階\n> \n> **機能期（Performing）**<br />\n> チームに一体感が生まれ、目標達成に向かっている段階\n\n図や説明は『[チーム・ジャーニー](https://amzn.to/47Z02Os)』を参考にしています。\n\n[チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで](https://amzn.to/47Z02Os)\n\n今までのチーム活動をふりかえってもらううなずける曲線になっていると思います。\n\nただし、この曲線はただ待っていても動きません。形成期から混乱期に突入するためには「衝突」が不可避であり、混乱期を抜けるためには更なる「衝突」が必要です。統一期、機能期でも傾きを正に保つためには衝突（この段階ではヘルシーコンフリクトになっているだろう）がより一層大切になります。\nまた、この曲線は人の出入りやきっかけによって、形成期に逆戻りしたりもします。\n\n各フェーズを抜けるために必要な期間はチームメンバーや活動によって異なります。「はじめまして」の状態からいかに早く心理的安全性のきっかけを掴み、衝突を機能期に向かうために必要なものだとチームメンバー全員が認め、形成期、混乱期を短期間で抜け出せるかが、チームで成果を上げるための核になります。\n\n## ダニエル・キムの組織の成功循環モデル\n\nこちらも『[チーム・ジャーニー](https://amzn.to/3OlX2ET)』でも取り上げられている組織のモデルです。（またまた参考に図を掲載）\n\n![ダニエル・キムの組織の成功循環モデル](./images/theory-of-success.webp)\n\n**「関係の質」「思考の質」「行動の質」「結果の質」はひとつの循環システムになっている**という話です。これには**Good Cycle**と**Bad Cycle**があります。\n\nGood Cycleでは「関係の質」を高めることにフォーカスします。互いに尊重し認め合い、一緒に考えるスタンスをチームにもたらす（関係の質の向上）ことで、気づきを共有し合い、当事者意識が芽生え（思考の質の向上）、自発的、積極的、挑戦的な行動が生まれ（行動の質の向上）、成果が出る（結果の質の向上）。成果が出たことでまた関係の質が向上し...という強化システムが生まれます。\n\nBad Cycleは「結果の質」にフォーカスすることです。成果が上がらないことに集中してしまい、対立・押し付け・命令が増えます（関係の質の低下）。その結果、受け身のスタイルがチームに定着（思考の質の低下）し、自発的、積極的、挑戦的な行動が生まれなくなり（行動の質の低下）、ますます成果が出ない（結果の質の低下）...というスパイラルに陥ってしまいます。\n\n[組織の成功循環モデルbyダニエル・キム｜泉山塁威｜RuiIZUMIYAMA](https://note.com/ruilouis/n/nbd652abc1d35)\n\n目の前で「結果の質」が上がらない、下がっていることに過剰に反応せずに「関係の質の向上」に注力し、「結果の質の向上」まで待つことはかなり忍耐力やチームの力とチームの成長を信じる力が必要不可欠な難しいことです。しかし、チーム全員でこういったモデルの存在を知り共感しておくことで、効果的なチームに近づけるのだと思います。\n\n## まとめ\n\nこの記事では、チームに知っておいてほしいチームのことを書いてみました。一部だけですが、まず特に知っておくといいんじゃないかなという者たちです。\n\nあと、なにか一つの理論やモデルではなくて、いろいろなことを知るとそれぞれが補完し合ったり共通項が見つかったり、楽しいですよね。\n\nもっと大事なのは、チームでチームの話をすることかなと思っています。\nこの記事もあくまできっかけでしかなくって、「じゃあうちらって」ってチームの対話が始まるといいなって。\n"},{"slug":"20211029-discuss-discussion","category":"blog","title":"ディスカッションについてディスカッションする","tags":["ファシリテーション","チーム","チームビルディング"],"body":"\n今日はとあるチームで取り組んだディスカッションアグリーメントのワークショップの話をしようと思います。備忘録ですね。\n\nアジャイルだとよく、ワーキングアグリーメントって、チームで自分たちはどう働くかって合意（約束ごと）をつくります。それの「議論」版ってことですね。合意事項もそうですが、どちらかといえばこれをつくる過程を大事にしたイベントでした。\n\n## なぜやった？\n\nこのチームは議論が苦手だったんです。別に誰か声を荒げる人がいたりとか、ヒエラルキーがすごいとかではなかったのですが、なかなか意見を出し合うような議論をできていませんでした。\nなにかきっかけをつくれないかなーと思い、「議論について議論する」というそれぞれの議論に対する考え方も明らかにできるし議論の練習にもなる一石二鳥案を思いつきやってみたんです。\n\n## 何をやった？\n\nやったことは大きく２つだけです。\n\n1. 効果的なディスカッションの条件を議論\n2. いいディスカッションをするためのディスカッションアグリーメント（約束ごと）を議論\n\nまずはチームで「どういうディスカッションがいいディスカッションなんだろうね」ということを話し合いました。最終的には特に大切にしたい３つの条件を選択しました。\n\n次に、その条件を達成するために必要な約束ごと、ディスカッションアグリーメントを話し合いました。これも、特に大切にしたい５つに絞ることにして取り組みました。\n\nやったことはこれだけです。\n\n## どうやった？\n\nやったことはこれだけです、とは言ったものの、僕たちはディスカッションがちょっと苦手なチームです。「じゃ、フリーで話し合っていきましょうか！」で決められるものではありません。\n\nそこで、２つの議論は「ひとりブレスト」「共有」「分類」「投票」「推敲」で発散と収束を行いました。\n\n### ひとりブレスト\n\nまずはひとりひとりがテーマに対してアイデアを考える時間を取ります。少し多めに５分くらいとりました。ここでは質より量を求めており、ノルマを入れるかどうか迷ったのですが全員のアイデアを出してもらうことを優先して一人３個のアイデアを付箋（オンラインだったのでGoogle Jamboardを使いました）に書き出してもらいました。\n\n### 共有\n\n次に一人ずつ一枚ずつ書いたアイデアを一言で共有してもらいました。\nAさんの１つ目のアイデア→Bさんの１つ目のアイデア→Cさんの１つ目のアイデア→Aさんの２つ目のアイデア→...といった具合です。\nここで新しいアイデアが浮かんだら追加で付箋に書いていいよってルールにしてました。（が、なかなか追加でってのは難しかったです😅）\n\n### 分類\n\n次に出てきたアイデアを分類します。だいたいです。これとこれはこんなこと言ってるってことだよねーくらいの感覚で。\n\n### 投票\n\n分類が終わったら、多数決の投票をしました。今回は効果的なディスカッションの条件は１人３票、ディスカッションアグリーメントは１人５票を投票してもらいました。\n\n### 推敲\n\n投票で選ばれた３つ、ないし５つのカテゴリをいい感じの文章に推敲します。全員がおんなじ認識をできるような言葉選びを全員でしました。分類前の付箋も参考になります。共通認識のしやすさだけでなく、それを聞いて「そうだそうだ！」と思えるかっていうのも大事にしてもらいました。\n\n今回は２トピックあったので、この一連の流れを２回行いました。\n他のディスカッションとかでもよく使っているやり方です。\n\n## やってみてどうなったのか？\n\nこのチームでは、以下のような意見でまとまりました。\n\n**効果的なディスカッションの条件**\n\n1. 参加者全員が、議論する準備ができている\n2. 参加者全員が、活発に意見を出している\n3. 参加者全員が、結論と次の行動を共通認識できている\n\n**ディスカッションアグリーメント**\n\n1. １人１回、小さなことでも何か話す！\n2. 時間を決めて、管理する\n3. 事前に議論の情報を共有する\n4. 全員が話をできるように誰かがファシリテートする\n5. 他の人のタスクも把握する\n6. 結論が明確になっているか最後にチェックする\n\n全然すごいこととか書いてないんですが、これをディスカッションが苦手なチームが意見を出し合ってまとまったことにすごく価値があるなって思いました。なによりまず面白かったのが、なかなか意見が出てこないチームだったのですが、全員が効果的なディスカッションでは「全員が意見を言う」ことが大切だと思っていたことがここで判明したことでしたね😁\n\n時間は２時間くらいかかりました...それでも時間が足りず、ディスカッションアグリーメントは５個に絞りきれなかったり、半ば強引な推敲があったりしたのは次回に活かします😉\n\n## まとめ\n\n今回はディスカッションが苦手なチームがもっといいディスカッションをするためにディスカッションアグリーメントをつくるワークをしてみた、って話を書いてみました。\n\nコミュニケーションはチームプレイの核ですよね。ディスカッションはチームの課題を解決したり方向性を定めたり、よりよいチームになるために欠かせないイベントです。\nチームのディスカッションがなかなか難しいなと感じたら、チームでディスカッションについてディスカッションしてみるのも面白いかもしれませんよ。\n"},{"slug":"20211124-listening-to-agile-japan-day-one-keynote-speech","category":"blog","title":"Agile Japan 2021 Day1のKeynoteを聴いて","tags":["カンファレンス","Agile Japan"],"body":"\n2021年11月16日、17日に[Agile Japan 2021](https://2021.agilejapan.jp/)が開催されました。\n\nDay1のKeynoteはアジャイルマニフェストの共著者でもあるアリスター・コーバーンさんだったのですが、とても面白くいろいろなアイデアをもらえるセッションだったので忘れないうちにメモっておきたく筆をとりました_φ(･_･\n（かなり遅くなりましたが😀）\n\n## Heart of Agile\n\n話題の中心はアリスターさんがつくられたHeart of Agileについてです。アジャイルの心、中心的な心構えです。\n\nHeart of Agileでは、以下の4つの要素を何をするにも大切な心構えとして定義しています。\n\n- Collaborate\n- Deliver\n- Reflect\n- Improve\n\n「アジャイル」というとソフトウェア開発の文脈の印象が強いかもしれませんが、Heart of Agileは「あらゆる活動」に取り入れることができる心構えになっています。\n\nこれらは敢えて「動詞」にしているそうです。面白い。「言葉」ではなく「行動」が大切と受けとりました。\n\nここからはKeynoteで伺った内容と僕の感じたこと、思ったことを書き連ねていきます。\n\n## Collaborate\n\nKeynoteでは以下のようなお話がありました。\n\n- 信頼の質を上げないとコラボレーションは起こらない\n- コラボレーションを促す報酬制度はあるか\n- Pull文化をつくる\n\nコラボレーションなんていらない、という意見はあまりないですよね。どうすればコラボレーションが促されるのかが昨今の関心事だと思います。\n\n1ポチ目は、ダニエル・キムの成功循環モデルなどでも言われていることですね。良好な関係あってのコラボレーションです。\n\n2ポチ目は、コラボレーションが生まれないと悩む経営者によく問いかけることだそうです。コラボレーションが促されるのか報酬制度があるのか。\nこれがとても面白いなーと思ってまして、「コラボレーションが大切」と言いながら、個人の成果にしか着目していないことって多いですよね。報酬制度でなくても、チームの目標を持ったり、チームの成果を測ったり、できているだろうかとハッとさせられますね。\n\nそしてPull文化です。この中では、オーナーシップの話がありました。\n昨今、コマンド＆コントロールではなく、サーバントリーダーシップを持って部下のやりたいことを支援するマネージャーが良い、という話が目や耳に入ることが多いですよね。しかし、「オーナーシップ」が明確でない中で、やりたいことを見つけることは難しいよなと感じています。\n自分は何にオーナーシップ、つまり権限を持っていて、他の人は何にオーナーシップを持っているのか。オーナーシップが曖昧なままでは、どの行動も選択できません。\n自分自身が行動するためにもオーナーシップを明確にすることは良いことですし、他人のためにも自分やその人のオーナーシップを明らかにすることは有用です。\nなんとなく、「みんなでやろう」を間違えて、誰もオーナーシップを持てていない状況に出くわすことが多い気がします。オーナーシップを明確にすることでPull文化を作り出し、それぞれが自信と責任を持って行動できる組織、チームにしていきたいですね。\n\n## Deliver\n\nDeliverは「小さな単位で世に出す」ことです。開発に限らず、アウトプットをこまめに出しましょうということですね。\n\n「**世界を調査する**」と言い換えられるそうです。これは抜群な面白いですね。アウトプットすることではじめて、そのアウトプットや方向性の価値を評価することができるわけですね。\nVUCAの時代、何が正解かわからないからこそ、小さくアウトプットして、方向を見極め続けることが大切だなと感じました。\n\nアウトプットするなら成果を求めることがしばしばあると思いますが、成果を求めないデリバリーもあるという話がありました。フィードバックを得ること自体に価値があるわけですね。最終的な成果につなげるために、成果を求めない「**実験**」を繰り返すことが大切で、それを組織やチームが認めることがとても重要になりそうです。\n\n## Reflect & Improve\n\nReflectは「ふりかえる」、Improveは「改善する」ですね。\n大切なことは、「立ち止まる」ことだそうです。\n\nちゃんと時間をとって、感情を整理して、データを整理して、よりよくなるためにはどんなアイデアがあるかを見つけることがReflect。\nReflectで見つけたアイデアを実際に行動に移して、よい状態に向けて活動することがImprove。\nというイメージを持ちました。\n\n**Reflectで「感情」と「データ」を使う**というところがいいですね。\n個人的にも最近は「感情」（自他共に）を大切にしようとしているので、すごくフィットしました。\n\nまた、ここではデルタ・デルタ・テクニックと呼んでいる改善メソッドが紹介されており、これまた面白かったです。取り組み方は以下の質問に順に答えていきます。\n\n1. 一番の希望は？\n2. 今は10段階評価でいくつ？\n3. 1〜今の状態はそれぞれどんな状態？\n4. 今+0.5になるためにやることは？\n\nシンプルでいいですね〜。\n\n## まとめ\n\nHeart of Agile。聞いたことはありましたが、講演を聞いて考える軸として面白いなーと思いました。\n講演内でも、「会話のコンパス」という話があったのですが、ひとつひとつテーマを絞って考えたり話したりすると面白いですね。\n\nCollaborateはチームで高い成果をあげるために、Deliverは不確実性の中で高い成果をあげるために、Reflect&Improveは今の活動をよりよくするために。\n思考の軸として、もっておきたいものですね！"},{"slug":"20211203-the-strategy-for-personal-development-that-are-easy-on-the-wallet","category":"blog","title":"お財布に優しい個人開発の戦略 - spaces.bzの場合","tags":["個人開発","アドベントカレンダー"],"body":"\n[Qiita Advent Calendar 2021 個人開発](https://qiita.com/advent-calendar/2021/personal-project) 3日目の記事です。\n\nみなさん、今日も楽しく個人開発やってますか？？\n個人開発は「楽しい」し「スキルアップ」できるし「夢（収益が出れば...）」もありますよね！\n\n2021年9月、僕は友人とふたりで spaces.bz （クローズ済み）をリリースしました。\n合言葉は「**なるべく無料で...**」。\nそう、個人開発には潤沢な資金はありません！リリースしたはいいけどランニングコストだけかかって全然使われないは避けたいのです！\n\n実際、spaces.bz は2021/12/3現在、支出は最初のドメイン代の3,000円のみです。\n一方で、PV数は12000+/月、Twitter Botのフォロワー数は1,000+、それなりに利用してもらっているサービスになりました🎉\n\nこの記事では、spaces.bz がランニングコスト０で運営するためにとってきた戦略を紹介します。\nお金が心配で個人開発やリリースをためらっている人たちの背中を押せれば嬉しいです。😁\n\n# spaces.bz とは？\n今回開発をした spaces.bz は、Twitter Spacesを検索したり、ランキングをまとめたりしているサイトです。\nサイトの他にも、リスナー数の多いスペースをリアルタイムでお知らせするTwitter Botも提供しています。\n\nspaces.bz は現在、月間12,000+PVくらいのプロダクトです。\n大ヒット！のレベルではありませんが、毎日コンスタントにアクセスしていただいており、Botも2021年11月末現在で1,000+のフォロワー、僕たちとしてはちゃんと使ってもらえている実感を持てておりそこそこの達成感を得ています。\n\nコストとしては、最初に友人こだわりのドメインを購入しているので3,000円がかかっていますが、その他はコスト０で運営しています。（僕たちの開発費はプライスレスです！💰）\n\n全体のアーキテクチャは以下のようになっています。\n\n![spaces.bzのアーキテクチャ図](./images/architecture.png)\n\nでは、実際にどんなことを考えて spaces.bz をランニングコスト０で開発してきたのか、語っていきたいと思います。\n\n# 戦略１：データを持たないプロダクト\n僕たちが一番ネックに感じていたことが「データ」です。\nなんとなく、ホスティングサービスに比べてデータベース系のサービスはちゃんと気をつけないと無料枠をすぐに食いつぶしてしまうイメージがあったんですよね。\nデータがないと面白いアイデアになりにくいと感じつつも、お財布を気にせずデータを保存する方法もあまり思いつかなかったからです。\nそこで spaces.bz は**APIを活用するプロダクト**の戦略をとりました。\nAPIであれば提供元のデータを活用して面白いことがやりやすそう、ってことです。\nちょうどTwitter社が2021年8月にTwitter SpacesのAPIを公開したこともあり、これを使って何か面白いことができないかと考えていったものが spaces.bz です。\n\nTwitter APIは無料でも利用可能ですが、単位時間あたりのリクエスト数やツイート取得数に制限があります。\nその制限の中でやりたいこととできそうなことのバランスをとりながらプロダクトを作ってきました。💪\n\nhttps://developer.twitter.com/en/docs/twitter-api/rate-limits\n\n# 戦略２：みんなが使っているサービスの拡張プロダクト\n\n戦略1の付随効果ですが、spaces.bz は多くの人が使っているTwitterを拡張するプロダクトになったことで独立したサービスよりも早い段階でユーザーを獲得できたと思います。\n個人開発をしていて結局使われない...なんか変なところでお金かかるのも怖いから閉じよう...ってなることもあると思うのですが、その文脈ではすぐに見つけてもらい使ってもらうことができたことは個人開発をここまで継続できたモチベーションでした。\n\n# 戦略３：無料でホスティング with Vercel\nプロダクトを開発したらどこにホスティングするかは重要なテーマです。\nspaces.bz は現在 [Vercel](https://vercel.com/) を利用しています。\n個人利用では無料でホスティングができ、GitHubと連携することでpushを検知してBuild&Deployまでやってくれます。クレカ登録不要なのも何気に嬉しい😆。\nもともとは [Netlify](https://www.netlify.com/) にホストしていたんですが、動的OGPをやりたいとなったときにSSGができるVercelに移行しました。（Netlifyでもpre-renderingを使って動的OGPをやる方法があるみたいですが、Netlifyはビルドの時間制限もあり移行を決行しました）\n\n他にも [GitHub Pages](https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages) や [Heroku](https://jp.heroku.com/) など、無料枠でも十分にホスティングできるサービスが充実しています。Build&Deployまでしてくれるサービスが多いですし、いろいろと調べて試して、自分のプロダクトにあったホスティングサービスを利用すれば、無料でプロダクトをリリースすることは難しいことではありません。\n\n# 戦略４：無料でデータ管理 with Spreadsheet\n戦略１と矛盾するのですが...笑\nspaces.bz では最初こそTwitter APIを叩くだけのプロダクトでサービスリリースをしたのですが、開発を重ねていく中でどうしてもTwitter APIを叩くだけでは実現できないやりたいことがでてきました。\nしかし、最初に行ったとおり、データベースサービスの無料枠でやりくりできるか不安があったため、spaces.bz がとった戦略はGoogle Spreadsheetをデータベース代わりに使うことでした。\n\nSpreadsheetにも5,000,000セルの制限があったりしますが、「見やすい」「使い勝手がわかる」「更新も楽」「すぐに使える」など、色々なメリットがあります。\nGoogle App Script（GAS）の存在も大きいです。spaces.bz の場合、定期的にTwitter APIを叩いてデータを更新する処理が必要だったのですが、GASが大いに力を発揮してくれています。そしてGASとSpreadsheetは言わずもがな親和性が高い。\n結果、今の段階ではSpreadsheet + GASで無料でデータベースを利用している状態をつくりだしています。\n\n実現方法は別の記事を書いていますので、気になる方はどうぞ！\n\n- [Nuxt で Google Spreadsheet を DB 代わりに使うぞ大作戦](/blog/20210926-operation-to-use-google-spreadsheet-as-a-db-with-nuxt)\n- [NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part2 - モバイルだって使いたい！](/blog/20210928-operation-to-use-google-spreadsheet-as-a-db-with-nuxt2)\n- [NuxtでスプレッドシートをDB代わりに使うぞ大作戦 Part3 - asyncDataでだって使いたい！](/blog/20211001-operation-to-use-google-spreadsheet-as-a-db-with-nuxt3)\n\nちなみに最近は、スプレッドシートをほぼNoSQLのように使っており、1セルごとにJSONフォーマットでデータを打ち込んだりしています。\n1セルは500,000文字制限があったりするので、それに気をつけながらやってみたところ、レスポンスが改善したりセル数制限の対策になったりしてます。🎉\n\n# 戦略５：無料でCI/CD with GitHub Actions\n開発をしているとCI/CD周りが気になりますよね。\n特に spaces.bz は友人と２人で個人チーム開発を行っているので、テストやlintはCIでちゃんと回るようにしておきたい。今となってはデプロイはVercelがやってくれていますが、Netlifyを使っている頃はNetlifyにデプロイを任せるとすぐに無料枠のデプロイ時間を超過してしまいそうだったので、CIでビルドまで終わらせてデプロイだけをNetlifyでやることが必須でした。\n\nCI/CDはGitHub Actionsで十分だと思います。パブリックレポジトリであれば制限なく、プライベートリポジトリでも2000分/月のワークフローを実行できます（Linuxの場合）。\n\nhttps://docs.github.com/ja/billing/managing-billing-for-github-actions/about-billing-for-github-actions#about-spending-limits\n\n僕たちはPRを作成したときにLintやテストを回し、mergeされたとき（mainにpushがあったとき）にデータの更新をしています。\n割と高頻度に開発サイクルを回していますが、それでも2000分に達しないので、問題なく開発ができています。\n\n# 戦略６：集客はBot\n通常サービスを認知してもらうためには、色々なところで情報発信をしたりお金を出して広告を出したりしないといけませんよね。\n人力 or お金の力の選択を迫られたりしますが、spaces.bz ではそれをBotに任せる戦略をとりました。\n\n待っていて流入があるほど甘くはないので、何かしら認知してもらわないといけない。けどお金は使いたくない。\nそこでとった戦略が、リスナー数の多いスペースをお知らせするBot、です。\nアカウントを見ていただくとわかるのですが、リスナー数が100, 500, 1000, ...などの区切りを達成したアカウントをお知らせするBotです。\nもともと spaces.bz は「面白いスペースとの出会い」をコンセプトにしているので、そのビジョンから外れることなくサービスを認知してもらえるいい戦略になりました。\n\n更に、ここでとったもう一つの戦略が3,000円で購入したドメインとサービス名です。\nお気づきの方もいると思いますが、spaces.bz のサービス名はドメイン名と同じです。\nそのため、Twitterなどで「spaces.bz」と入力すると「あ、URLね」と認識してくれて勝手にリンクをはってくれます。\nこのおかげで、Botが「spaces.bzがお知らせします」とつぶやけば集客に繋げられるようになります。\n\n最近はオーガニック検索の数も増えていますが、2021年11月末現在で spaces.bz の流入の80%がTwitterからです。\n集客に使えそうなBotアイデアを考えることは、個人開発にとって重要なのです。\n\n# まとめ\nいかがだったでしょうか？\n（ほぼ）無料で個人開発プロダクトを運営している spaces.bz のここまでの戦略についてお話させていただきました！\n少しでも個人開発を始めたい人の背中を押せていたら嬉しいです。\n\n余談ですが、最近Twitter APIも盛り上がりそうな雰囲気を出していますよね。\nいままで500,000tweets/月だったツイート取得上限が2,000,000に緩和されたり、APIのv2化をきっかけに機能が追加されたり。\n面白いアイデアを世に出すチャンスかもしれないですね〜。\n"},{"slug":"20211206-lets-check-out-if-you-do-not-have-enough-time-to-retrospective","category":"blog","title":"ふりかえり会の時間がとれないならチェックアウトをすればいいじゃない。","tags":["ふりかえり","ファシリテーション","アドベントカレンダー"],"body":"\nこの記事は[ふりかえりAdvent Calendar 2021](https://adventar.org/calendars/6327) ６日目の記事です。\n\nみなさん、ふりかえり会してますか？\nした方がいいとは思ってるんだけど、会議会議でそんな時間とれないよ。そんな方も多いのではないでしょうか。\n\nこの記事ではそんなふりかえり会をする時間もないほど会議に明け暮れているチームに、チェックアウトをご紹介したいと思います。\n\n## 木こりのジレンマ\n\n![木こりのジレンマ](./images/lumberjacks-dilemma.webp)\n\nまず、ふりかえりは大事です。改善することで今よりも効果的かつ効率的な活動ができることに疑う余地はないです。\n\nしかし、実際には会議に明け暮れて一日が終わり、さらにふりかえり会なんて開けない！って方もいると思います。あの会議が無駄、この会議が効率悪い、となんとなく思っていても、それを改善するためのふりかえり会の時間が取れず、まさに木こりのジレンマに陥ってはいないでしょうか？\n\n> あるところに木こりがいました。\n> 木こりは錆びた斧で必死に木を倒そうとしています。\n> 旅人が通りかかり、木こりに「その斧の錆を取ったらすぐに木を倒せるんじゃないかい？」と言いました。\n> 木こりは「それはわかっているんだけど、この木を早く倒さなくちゃいけないから錆を取る暇がないんだよ。」と答えました。\n\n木こりのジレンマはだいたいこんな話。\n\n## ならばチェックアウトから始めよう\n\n木こりのジレンマの話は、「木を倒すことに専念する」or「錆を取ることに専念する」の極端な二択感があるなって思ってまして。\nちょっと錆を取ればちょっと木を倒すのが早くなって、そのちょっとのゆとりを使ってまたちょっと錆を取ればまたちょっと木を倒すのが早くなって…この繰り返しでいつか錆のない斧で爆速倒木するのが最適解なんじゃないかなーって思うんですよね。\n\nそこでおすすめしたいのが**チェックアウト**です。\nチェックアウトは会議の最後に少しの時間（5分程度）を使って行うアクティビティの総称です。\nふりかえり会と違って、既存の会議のちょっとの時間でちょっとの改善をしていこうってイメージですね。\n決まった型があるわけではないので、目的別に自由にカスタマイズできます。\n\n**会議の最後の5分くらいなら気軽に始められそうですよね！ね！**\n\nこの記事では、実際に僕がやっているチェックアウトを少しご紹介します。\n\n## Checkout 1：感想戦\n\n![感想戦](./images/checkout1-impression-battle.webp)\n\n参加者ひとりひとりに今回の会議の感想を言ってもらうだけのチェックアウトです。\n目的は参加者の満足度向上と理解度向上。\n最後にひとこと感想や自分の理解を述べるだけで参加した感が倍増するんですよね。\n\nファシリテーターとしては、この感想の中からフォローアップが必要なところや次回の会議でやり方を工夫できそうなところなどを発見するチャンスにもなります。\n「最後にひとことずつ感想を教えてください。では〇〇さんからお願いします。」って言うだけでできるので、手軽さも魅力です。\n\n感想を言ってもらう前に1-2分時間を取って、付箋やmiro、google docsなど共有できるものに書き出してもらうのも効果的です。\n後から見返して思い出すこともできるので、一石二鳥感があります。\n\n## Checkout 2：5段階評価\n\n![5段階評価](./images/checkout2-5-stage-rating.webp)\n\n参加者ひとりひとりに、今回の会議を5段階評価してもらいます。できればその評価にした理由も共有してもらいましょう。\n目的は会議が改善されてきているかどうかを定量的に見ることです。定期的に開催する会議などに打ってつけですね。\n評価の理由から改善点が発見できるはず。毎回何か１つか２つ改善を入れて、評価が上がれば継続、下がれば見直し、といった具合に会議をよりよくできるチェックアウトです。\n\n5段階評価の出し方は、せーので指で出し合ってもいいですし、miroに1,2,3,4,5の付箋を用意してドットを置いてもらったりしてもいいですね。\n\n## Checkout 3：改善ブレスト\n\n![改善ブレスト](./images/checkout3-kaizen-brain-storming.webp)\n\n参加者で次同じような会議をやるとしたらどんな改善ができそうかブレストするチェックアウトです。\n目的はズバリ会議の改善。あとはふりかえり会の予行練習にもなると思います。\n\n1-2分時間をとって、参加者に今回の会議で次回までに改善できそうなことを付箋やmiroにブレストしてもらいます。\nその後一言ずつ共有してもらい、1人1票投票してもらいます。一番票が多かったアイデアを次回取り入れてみましょう。\n\nこれは5分だとバタバタしてしまうかもしれませんので、適宜7分とか10分とか、時間は参加者数などによって変えています。\n共有の時間は設けず字面だけで投票してもらったり、投票は行わず次のファシリテーターが独断と偏見でアイデアを採用することもあります。\n\nまた、「改善点」だと殺伐としそう…という場合は、逆に「続けたい良かったところ」をブレストしてもらうと面白いです。\n会議の最後はポジティブに終わりたいですもんね。改善点を出すことよりも参加者の気持ちを優先させて使い分けましょう！\n\n## Checkout 4：今回の改善のふりかえり\n\n![今回の改善のふりかえり](./images/checkout4-retrospective-for-previous-kaizen.webp)\n\nCheckout1-3によって、改善点を取り入れた会議をしたならば、その改善点のふりかえりもやっていきましょう。やりっぱなしは良くないです。効果のない改善はやめたいですもんね。\n\nやり方はCheckout1-3と同様で、テーマが「今回の改善どうだった？」に変わるだけです。\n僕は会議の最初に今回取り入れた改善点を共有して、チェックアウトの時間に「これからも継続したい」「次もう一度試してみたい」「次は別の実験をしたい」の3つの選択肢から投票してもらってます。「これから〜」が多ければグランドルールに、「次もう一度〜」が多ければ次回も試す、「次は別の〜」が多ければ改善前に戻して新しいアイデアを見つけるためのチェックアウトに移る、といった具合です。\n\n## まとめ\n\nこんな感じで会議の最後に少しの時間を使ってチェックアウトすることで、会議を気持ちよく終えられますし、既存の会議がどんどんよくなります。既存の会議に余裕が出れば、ふりかえり会を開催する余裕も生まれて、もっと広い視野でチームを改善するチャンスを作り出すことができるはずです。\n\n会議に明け暮れて木こりのジレンマに陥ってしまっているなら、まずはチェックアウトから始めてみてはいかがでしょうか！\n"},{"slug":"20211220-estimate-the-value-of-product-backlog-items-by-whole-team","category":"blog","title":"チームでバックログの価値を見積もってみる","tags":["プロダクトバックログ","見積もり","チーム","スクラム"],"body":"\nこの記事では、私がチームで取り組んだ価値見積もりの話をします。\n\nバックログは優先度順に並べたいですよね。並べ替えの基準はROI（Return On Intestment：投資対効果）。\nバックログには投資にあたる値としてストーリーポイント（相対的な作業量）は見積もられていますが、効果にあたるものが見積もられていないことが多いです。\n実際にはプロダクトオーナーの頭の中で相対的に効果を見積もっているのでしょうが、表現されていないことが多いと思います。\n\n僕は、チームで価値を見積もることで\n\n- チーム全員が納得感のあるバックログをつくる\n- PO以外の人にも「価値」の観点を持ってもらう\n\nを実現しようと思いました。\nここから先は、「で、何したの？」って話を。\n\n## 1. ストーリーごとに価値をプランニングポーカーしてみた\n\nなんてことはなくて、ストーリーポイントの見積もりと同じように「価値」についてプランニングポーカーをやってみました。\nフィボナッチ数列だと複雑すぎるかなーと思ったので、Tシャツサイズ（S/M/L）でやることにしました。\n\nよし、やるぞ！\nと、うまくいかなかったですねー。\n\nストーリーポイントを「自分がやるとしたらどういうタスクがあるかなー」と考えるのは割とみんなできるのですが、「チケットAの価値はチケットBの価値より大きいですか？同じですか？小さいですか？」となると\n\nわからん\n\nと。\n「いままでasatoさんってどう考えていたんですか？」\n確かにそうだよね。よし。\n\n## 2. 基準を図示してみた\n\nじゃあ、価値のプランニングポーカーのためにみんなで基準を作ってみよう、ということをしてみました。基準というよりは考え方の方が正しいかな。\n\n![価値の大きさの分割](./images/splitting-the-volume-of-value.webp)\n\nしょぼいなー。でもこのショボさが良かったんですよね。\n誰もがシンプルに価値の大きさを選ぶことができるためにはこのくらいの粒度が良かったです。\n\nこれで価値は２軸になったので、Tシャツサイズはこんな感じにまとめられました。\n\n![価値のマトリックス](./images/matrics-of-the-value.webp)\n\nこうするとあら不思議。みんな自分の感覚でサイズを選べるようになったんですよね。\n\n## 3. 価値がないも図示してみた\n\nということでTシャツサイズの基準を図示してみてやっていたところ、「**SよりSmallです**」が出てきました。\nじゃあ基準を見直すか？いやいやXSを作るか？\nいろいろ考えた結果、「それは一旦考えないことにしない？」に倒せるように図を更新することにしました。\n\n![価値のマトリックス（一旦考えないあり）](./images/matrics-of-the-value-2.webp)\n\nバックログってアイデアを全て入れておきたくなることもあると思うのですが、僕は割と価値の小さいチケットは削除しちゃいます。\n「そんなことしたら後で必要になったときに忘れちゃうかもしれないじゃん！」って言われたりするのですが、そのときに忘れてるならやっぱりいらないんじゃないかなーって極論持ちでして...\nバックログのボリュームをいい具合に保つことで、目の前のことに集中できると思うんですよね〜。\n\nということで、チームで「一旦忘れる」を選択できるようにしました。\n\n## 4. 絶対やらないといけない案件も見積もってこう\nこんな感じでチームで納得感のあるバックログができたわけですが、そううまくいかないパターンもあるんですよね。\n\nそうです。上司からの追加バックログです。👿\n\nいや、そんなネガティブな話でもないんですが笑\n他のシステムとの兼ね合いや組織の戦略、事情、などなどで「なんですかそれ！？」というトッププライオリティチケットが生み出されることも実際はあると思います。\n\n僕らのチームでもこういうチケットはありました。\n「トッププライオリティなので価値を見積もるまでもないんじゃない？」と思われるかもしれませんが、僕らのチームではこれらの見積もりも実施していました。\n\n理由は例えば以下の通り。\n\n- 見積もりをしたらチームとしても優先度高いこともある。その場合は「上からの指示だから仕方なく...」という無駄なネガティブを排除できる。\n- チームの基準として優先度が低い（けどやる）ことを上司にお伝えできる。ただ対立するのではなく互いの想いを伝え合うことが大切。\n- Tシャツサイズの見積もりくらいそんなに時間かからないから例外を出さない。例外を１つ作ると、例外は簡単に増えていく。\n\nそんなに時間をかけずに見積もりできる営みにしておくことが重要ですね(≧∇≦)b\n\n## さいごに\nということでチームで取り組んだ価値を見積もる営みのご紹介でした。\nやり方はなんでもいいと思うんですが、バックログのチケットの価値をチーム全員で話す機会をつくることで、チームの目線を「価値」に合わせることができると感じましたね。特に開発部みたいなところで開発をしているとどうしてもQCDとか効率とかに目が行きやすいと思うんですが、こういうイベントがあると思考を「価値」の方に戻してくれることを助けてくれますね。\n\nチームで取り組むときは、シンプルであることが大事。\n\n"},{"slug":"20211213-a4-guideline-for-feedback-at-netflix-seems-good","category":"blog","title":"Netflixのフィードバック「A4ガイドライン」がよかったので感想文。","tags":["読書","フィードバック"],"body":"\n先日、『[NO RULES 世界一「自由」な会社、NETFLIX](https://amzn.to/3SukIsi)』を読みました。\n\n全ページで頭をぶん殴られるような内容で、めちゃくちゃ面白かったです。なんて乱暴で理に適った会社なんでしょうね。おすすめです。読んでみてね。\n\nこの本の中で、**フィードバックの4Aガイドライン**が紹介されていました。個人的にフィードバックを与えるのも受け取るのも課題を感じてました。本でこれを見たときに「とてもいいね👍」と感じたので、メモ書きさせてください。_φ(･_･\n\n## 4Aガイドライン\n\n4Aガイドラインは、フィードバックを効果的に与える or 受け取るための心構えです。\n\n- Aim to assist（相手を助けようという気持ちで）\n- Actionable（行動変化を促す）\n- Appreciate（感謝する）\n- Accept or discard（取捨選択）\n\n本の最後の方でもう一つ追加されます。\n\n- Adapt（適応させる）\n\nひとつずつ、考えてみます。\n\n## Aim to assist\n\n**「相手を助けようという気持ちで」**\n\nとてもそのままですね。フィードバックはこれでなくてはなりません。\n自分はこれが弱いなと感じました。どうにも自分の負の感情が乗りやすい。「なんで〇〇するの？しないの？」ですね😓\n\nフィードバックは自分のために行うものではないですね。相手のためになってほしいものです。\nそのためには相手の目的や目標も知っておく必要があるなと感じました。相手のめざす方向がわからないと前に進む手助けはできないですよね。\n\n個人的には、負の感情が乗るよりもずっと前にフィードバックをすることが大事かなと思いました。負の感情が乗るってことはけっこう我慢してきたんだと思うんですよね。\n\n## Actionable\n\n**「行動変化を促す」**\n\n相手が改善の行動を取りやすいフィードバックをしようということです。\n「何がいけないか」だけでなく「どうなればより良いか」を伝えられれば、相手を一歩前に進める手助けができます。\n当然選択権は相手にあります。けど、いろんなヒントがあった方が助けになりますよね。自分と相手は絶対違うからこそ、こういう考え方もあるよという考えるきっかけを渡せるといいな、って思っているので、それとリンクしてスッと入ってきました。\n\n## Appreciate\n\n**「感謝する」**\n\nこれも弱いなぁ😓\nフィードバックを受けると「ありがとう」より先に「でも」が出てきちゃう者です…\n\nフィードバックは与える側も神経を使います。上の二つのAを意識してるとなればなおさらです。ひょっとすると関係に傷ができるかもしれない不安感もあるはずだし、逆ギレリスクやお節介なやつと陰口を叩かれるリスクもあります（僕はしないですよ、多分）。\nそれでもフィードバックしてくれてるんですから、まずは「ありがとう」の気持ちを抱きたいものです。そして口に出したいものです。\n\nまずはせめて、少し時間をとってからでも、フィードバックを受けたときの一言目は「ありがとう」にできるようにしていきたいと思います。\n\n## Accept or discard\n\n**「取捨選択」**\n\n４つ目のAは、一番最初に持ってきてもいいんじゃないかってくらい大事だと思っています。\nフィードバックを与える側もフィードバックを受ける側も、**次の行動を決めるのはフィードバックを受けた人だ**、と当たり前のように思っていないとフィードバックではなく指示や命令になってしまいます。\n**私たちは小さい頃「親の言うことを聞きなさい」「先生の言うことを聞きなさい」と育てられていることが多い**です。\nそのころの価値観から、目上の人の言葉は実行しないといけないと思いがちで、目下の人への言葉は実行されるのが普通と思いがちです。\n\n「自分はそうじゃないよ」と思っていても相手はわかりません。\n相手は自分に選択権を完全に委ねているんだろうか。\n相手は自分が選択権を完全に委ねていることに気づいているだろうか。\n悩みはつきぬ！！\n\nこの項目はActionableと合わせると更に難易度が増しますよね。後輩指導をしていると相手に選択権を与えたいからこそ、改善案を伝えないことも多かったです。でもそれだけだと効率も効果も悪いし、相手への手助け度も低いんですよね。\n\n最近、**フィードバックのフィードバック**を考えて行動しています。\n「前、○○ってフィードバックをもらったので、✗✗ってアイデアももらったので、△△のことも追加で考えて、□□をやってます」\nみたいな。ちゃんとフィードバック活かしてるよ〜、自分で咀嚼して自分で選択して行動してるよ〜。ってアピールですね。\nこういう行動をまわりに見せることで、この取捨選択の概念を伝えていったりできるんじゃないかなと本を読んで思いました。\n\n## Adapt\n\n**「適応させる」**\n\n本の中では、Netflixが国際化していく中で、それぞれの国の文化に適応させる必要があるとして紹介されています。例えば、アメリカ人はポジティブなフィードバックから始める傾向がある、オランダ人は本題のネガティブフィードバックだけする傾向がある、アメリカ人とフランス人の文章構成は違う、シンガポール人は敬意を重視する、日本人は主語をぼかす、などなど...\n\n良いとか悪いとかではなく、「違う」んですよね。\nNetflixの場合は、「私たちのカルチャーに適応して爆発的な価値を提供できるものだけに残ってもらいたい」の考えがあるので、国レベルのレイヤーでAdaptのガイドラインが現れているようですが、自分の中ではもっとローカルでも意識したいガイドラインだなと思いました。\n\nみんな違いますもんね。4Aガイドラインはマインドセットの話をしているだけで具体的な行動を指示しているものではないのかなと思います。\nなので、誰かにフィードバックを与えるときは、その人にとって一番「助かる」だろう伝え方にしていきたいなと思いました。\n自分、ワンパターンなんで。\n\n## 最後に\n\nこの記事では、『[NO RULES 世界一「自由」な会社、NETFLIX](https://amzn.to/3SukIsi)』を読んだ中でも特に印象に残った**フィードバックの4Aガイドライン**のまとめと感想を書き出してみました。興味が湧いた人は、ぜひ書籍を読んでみてください。考え方の一つとして、めちゃくちゃおすすめです。\n\n余談なんですが、「フィードバックを与える」って偉そうで使いたくない言葉なんですよね。「与える」って言葉が、上からを感じてしまって。でも「受ける」と対にするには与えるかぁ...といった具合で。\nなんかしっくりくる言葉ないかなー。\n\nではでは。👋"},{"slug":"20220113-memo-for-north-star-metric","category":"blog","title":"Memo - North Star Metric（NSM）","tags":["プロダクトマネジメント"],"body":"\nちまたで話題のNorth Star Metricについて色々と調べる機会があったので、まとめておきます。\n\n## North Star Metric（NSM）とはなにか\n\nNSMは、プロダクトマネジメントの文脈でしばしば登場するやつです。\n**プロダクトがビジネス・価値の両面を同時に測る単一の指標**的な意味合いかな。あまり画一的な定義はなされていなそうでした。\n\n『[プロダクトマネジメントのすべて](https://amzn.to/3HZN6h7)』では以下の紹介がありました。\n\n> プロダクトのコアとなる価値がユーザーに届いているかを知る、単一の指標\n\n> 事業が長期的に成長しているかどうかを図る、経営・プロダクト両面で重要な指標\n\nまた、「[What is a North Star Metric?. Drive Your Company’s Sustainable Growth…](https://blog.growthhackers.com/what-is-a-north-star-metric-b31a8512923f)」のブログを引用している記事によく出会ったのですが、そちらでは以下のように書かれています。\n\n> The North Star Metric is the single metric that best captures the core value that your product delivers to customers.\n>\n> North Star Metricはあなたのプロダクトが顧客に提供しているコアの価値を最も表している単一の指標です\n\nAmplitudeの「[North Star Playbook](https://amplitude.com/north-star)」が、定義から実践まですごくまとまっていまして、そちらでは以下のようにかかれています。\n\n> The heart of the North Star Framework is the North Star Metric, a single critical rate, count, or ratio that represents your product strategy.\n>\n> North Star MetricはNorth Star Frameworkの中心であり、あなたのプロダクトの戦略を表す単一の重要な割合や回数、比率です。\n\n> (The North Star Metric) is a leading indicator that defines the relationship between the customer problems that the product team is trying to solve and sustainable, long-term business results.\n>\n> North Star Metricは、プロダクトチームが解決しようとしている顧客の課題と、持続可能で長期的なビジネスの成果の間の関係を定義する先行指標です。\n\n「**ビジネス（戦略）と価値（プロダクト）**」や「**単一**」、「**長期的**」などがキーワードになっていそうですね。\n\n## なんでNSMが必要なのか\n\nNSMの目的は、**プロダクトやビジネスが成長しているかを測ること、そして成長するための戦略を決める根拠にすること**です。\n同じような目的で生まれた概念は他にも「MVV（Mission/Vision/Values）」とか「KGI/KPI」とか色々あると思うのですが、なぜNSMが注目を浴びるようになってきているのでしょうか。\n\nこれは、プロダクトがますますビジネスの核になっている中で、プロダクトの成功と成長により集中する必要があるなかで、先に上げたような概念がジャストフィットしなくなったからなんだなーと思いました。\n例えば、MVVであれば会社や社員の視点でめざす指針や行動の指針になりますが、プロダクトの視点では直接的でないことが多いです。\nまた、KGI/KPIについてもビジネスの目標を明確にしてくれますが、KGIには「収益・利益」などが置かれることが多く、これもまたプロダクト視点では直接的ではなかったり、セールスやマーケティング、外部要因など別の要因にも注意が向けられ、プロダクトの成功と成長に集中することが難しいケースがあります。\nさらに、ミッションやKGIはプロダクトの変化に対して変化に時間がかかる遅行指標ですので、アジャイルなプロダクト開発の次の一手を決めるには適しません。\n\nということで、よりプロダクトを直接的に評価できて、アジャイルな意思決定を行うために、NSMが注目されています。\n\n## 実際どんなものなのか\n\nここまで概念的な話ばっかりしてしまいましたが、実際どういうものなのかイメージがつかないと思います。色々と例を出してくれている記事があったので、良さげなものをピックアップしてみます。\n\n- Airbnb：予約された宿泊日数\n- Netflix：月間視聴時間の中央値\n- Zoom：週あたりのホストされたミーティング数\n- Slack：Organization内のメッセージ数\n- Salesforce：アカウントあたりの作成レコード数\n- Shopify：店舗あたりの売上合計額\n- Uber：旅の数（乗車数）\n\nそれぞれのプロダクトのコアバリューを表しており、それが収益にもリンクしている指標だということがわかりますね。\n参考にした記事はこちらに載せておきます。\n\n- [ノーススターメトリックの求め方｜Amplitude, Inc.](https://note.com/amplitude/n/n5dae993de2ac)\n- [Choosing Your North Star Metric | Future](https://future.com/north-star-metrics/)\n- [Collection of Some of the Best SaaS North Star Metrics | by Gokul Rangarajan | Medium](https://gokulrangarajan.medium.com/most-used-north-star-metrics-of-2019-20-4179f7d5ab99)\n\nこれらの記事を見ると、収益やDAUなどNSMの悪手的に語られるものや複数の指標を追っている企業もいますね。願わくば上に上げた例のようなNSMが成功と成長を測りながらチームを力づけることができるので望ましいですが、それで決まらなかったり複雑になってしまっては元も子もなので、プロダクトの特性やチームの状態で決めていければいいのかなと思います。\n\nちなみに「単一の指標」については、それにこだわりすぎて全体が見渡せなくなることもあるから気をつけろよって記事もありました。\n\n[Don't Let Your North Star Metric Deceive You — Reforge](https://www.reforge.com/blog/north-star-metric-growth)\n\n特にプラットフォーム系のプロダクト、エコシステムを形成しているような登場人物の多いプロダクトでは一つだけに注目すると全体が崩壊してしまうので注意が必要なようです。\nサバンナでライオンの頭数だけを見てるとヌーが絶滅してライオンも絶滅してしまうという例はわかりやすいですね。\nこの場合は、3つとか5つの指標を「**指標の星座**」として定義するそうです。North Star Metricから来ていると思われますが、おしゃれですね。\n\n## どうやってNSMを見つけるのか\n\n特定のやり方としてとてもまとまっていたのが「[North Star Playbook - Amplitude](https://amplitude.com/north-star)」ですね。\n\nNorth Star Frameworkという独自のフレームワークの紹介ページになっています。North Star MetricはNorth Star Frameworkの中心ですので、NSMの見つけ方から、そこからアクションを検討するための先行指標（Input Metrics）の決め方までを紹介してくれています。\n\n![North Star Metric](./images/north-star-metric.webp)\n\n出典：[North Star Playbook - Amplitude](https://amplitude.com/north-star)\n\n詳しくは「[North Star Playbook - Amplitude](https://amplitude.com/north-star)」や「[Product Workshop - Finding Your North Star - handout](https://www.slideshare.net/amplitudemobile/product-workshop-finding-your-north-star-handout)」をみていただきたい。「自分たちが参加しているゲーム」を特定することでNSMの種類を特定しています。\n\n1. Attention型：Facebook、Netflix：滞在時間やコンテンツ消費がキー\n1. Transaction型：Airbnb、Amazon：取引の数がキー\n1. Productivity型：Salesforce、Slack：タスクの実行数、効率性がキー\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/GPMeFVwIAWWees\" width=\"595\" height=\"485\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/amplitudemobile/product-workshop-finding-your-north-star-handout\" title=\"Product Workshop - Finding Your North Star - handout\" target=\"_blank\">Product Workshop - Finding Your North Star - handout</a> </strong> from <strong><a href=\"//www.slideshare.net/amplitudemobile\" target=\"_blank\">Amplitude</a></strong> </div>\n\n[Playbook](https://amplitude.com/north-star)では「良いNSMのチェックリスト」も公開されており、NSMを見直す良い基準になっていました。\n\n- 価値を表現している\n- ビジョンと戦略を表現している\n- 成功の先行指標である\n- 行動に移せる\n- 計測できる\n- 誰にとっても理解しやすい\n- 耳障りの良いだけのものになっていない\n\n他にも、「[Choosing Your North Star Metric | Future](https://future.a16z.com/north-star-metrics/)」には「ジョブ理論」でNSMを見つけることが紹介されていました。\n「顧客は何らかのジョブを片付けるためにサービスを雇用する」という考え方ですので、その「何らかのジョブ」が特定できているのであればその度合を測る指標こそプロダクトのビジネスと価値の成功と成長の指標になりますね。\n\nあとは、NSMが「ビジネス面」と「プロダクト面」を両立する指標であるという考え方から、「収益を上げるための先行指標」と「価値を提供できているかを測る指標」で共通する指標を探すのも良さそうです。\n\n## やってみた\nということで小規模ではございますが、友人と二人で作っているプライベートなプロダクト「spaces.bz」でNSMを運用してみました。（現在はクローズ済み）\n\nこのプロダクトの主要な機能は、開催中／開催前のTwitter Spacesを人気順、キーワード、フィルターなんかで検索できることです。\n\nこのプロダクトの価値は、面白いTwitter Spacesに出会えることです。\nこのプロダクトの収益モデルは、広告収入です。\n\nということで、「**面白いTwitter Spacesに出会った数**」をNSMに置いてます。具体的には**サイトからTwitter Spacesにリンクするボタンをクリックされた数**を計測しています。\n\n実際NSMを置くとどんな変化があったか、めちゃくちゃ主観ですが、\n\n- 開発の優先順位がつけやすい、合意しやすい\n- 毎日指標を追い続けやすい（毎日1分以下で確認できる）\n- うまくいってるのか、簡単に判断できる＆共通認識できる\n\nとか感じます。あまり悪いことはないかなぁ。\n個人プロダクトで収益性をそんなに求めていなかったり、チームの人数も少ないのでって条件はあるかもしれませんが、**共通認識的な文脈だとよりチームが人数が多いほうが効果を発揮しそうだな**と思いました。\n\n## まとめ\n\nこの記事では「**North Star Metric（NSM）**」について調べたことをまとめてみました。\nこのメモが、どなたかの役に立ったら嬉しいです。\n"},{"slug":"20220503-output-velocity-vs-outcome-velocity","category":"blog","title":"アウトプットベロシティ vs. アウトカムベロシティ","tags":["スクラム"],"body":"\nなんかベロシティの測り方にも流派とかありそうだなーと思った話。\n\nアジャイル開発のメソドロジーによって用語とか違うのですが、この記事では\n\n- チケット：チームが取り組む作業のまとまり\n- ストーリーチケット：目標に直接的に向かうチケット（機能開発とか）\n- タスクチケット：目標に間接的に向かうチケット（ドキュメンテーションとか）ややらねばのチケット（運用系の割り込みとか、会社ルールとか）\n- ポイント：チケットの作業量の相対見積もり\n- スプリント：チームの作業期間の単位（１週間とか２週間とか）\n\nの意味で使います。\n\nベロシティはスプリントで完了したチケットのポイントの合計を計測して、傾向を見ることでチームの状態を把握したり目標への見通しを立てたりするのに使いますよね。\nこのベロシティですが、ストーリーチケットのみのポイントを集計するチームと、ストーリーチケットとタスクチケットの両方のポイントを集計するチームがあるみたいでした。\nこの違いはなんなんだろうなー、がテーマ。\n\nそれで思ったのがアウトプットベロシティとアウトカムベロシティ。\n\n- アウトプットベロシティ：ストーリーチケットとタスクチケットの両方のポイントを合計したベロシティ\n- アウトカムベロシティ：ストーリーチケットのみのポイントを合計したベロシティ\n\nって定義です。\n\n## アウトプットベロシティ\n\nアウトプットベロシティは、「チームの仕事量」に着目してます。\n\nアウトプットベロシティが安定しないなら、見積もりのばらつきが大きすぎたり、スウォーミングのマインドセットが足りずにスプリントごとの未完了チケットの量にばらつきがあるのかもしれません。\n\nアウトプットベロシティが向上しているなら、チケットを効率的に完了させられるようにチームが上手く改善できている証拠にもなります。\n逆に低下していれば、チケットを完了させるために過度に条件をつけてしまっているのかもしれません。\n\n## アウトカムベロシティ\n\nアウトカムベロシティは、「チームの成果」に着目しています。\n前提として、「ストーリーチケットは目標達成に直結している」ということで。\n\nアウトカムベロシティが安定していないなら、タスクチケットの数がコントロールできておらずストーリーチケット、ひいては目標達成に集中できていないのかもしれません。\n\nアウトカムベロシティが向上していれば、チーム全体でストーリーチケットに集中できていることを確認できます。\n逆に低下していれば、割り込みが多かったり、バリューストリームでいう「ムダ」が増えてきているのかもしれません。\n\n## どっちが良いとか正しいとかじゃなさそう\n\n少し考えてみたところ、それぞれ注目しているものが違いますし、傾向から注意する観点も違いそうです。\n\n例えば、アウトプットベロシティは安定しているのにアウトカムベロシティは安定していないなら、タスクチケットをどう少なく抑えていくかを考える必要がありそうです。\nアウトプットベロシティは低下しているけどアウトカムベロシティは安定しているなら、目標達成には影響なくタスクチケットの割合を減らす実験が成功に向かっている、みたいな考察もできそう。\n\nそれぞれを単独で計測していると、状況の良し悪しや考察も難しくなりがちですが、分けて考えることでベロシティをシンプルに活用することができるのかもしれません。\n"},{"slug":"20220614-i-have-what-i-want-to-tell-you-before-starting-the-retrospective","category":"blog","title":"ふりかえりを　始める前に　言っておきたい　事がある","tags":["ふりかえり","ファシリテーション"],"body":"\nかなりきびしい　話もするが　俺の本音を　聴いておけ\n\nチームでふりかえりをやる前に、メンバーに伝えておきたい、共通認識しておきたい、と思うことを３つまとめておきます。\n\n## ふりかえり最優先条項（Norm Kerthの最優先指令）\n\n僕のお気に入りは『[アジャイルサムライ](https://amzn.to/4blZUvI)』の引用。\n\n> どんな問題が出てきたとしても、私たちは次のことを納得し、それを心から信じます。チームメンバーそれぞれは、その当時わかっていたこと、備えていた自分自身のスキルと能力、手に入れることのできたリソース、そして現場の状況に応じて、自分の力が及ぶ限りの全力を尽くしたのです。\n>\n> **つまり、ふりかえりは魔女狩りじゃない。🧙**\n\n[アジャイルサムライ――達人開発者への道](https://amzn.to/4blZUvI)\n\nふりかえりに限らず、1on1、ポストモーテム、普段の何気ない会話、思い返してみるとこの振る舞いができていないシーンが想像できるんじゃないでしょうか。僕はイライラしてるときはだいたいこの配慮が足りていない。\n\n最後の「ふりかえりは魔女狩りじゃない」って言葉。\nふりかえりは課題を直視する機会が多いです。魔女狩りになりやすいことを常に理解しておくことが大切です。\n**原因よりも改善に目を向けましょう。「なぜできなかったのか」よりも「どうだったらできただろう」に目を向けましょう。**\n\n## わがままはアクセル。我慢はブレーキ。\n\n我慢は改善のブレーキです。みんなが我慢している状況では、何の改善にも繋がりません。原因を自分の内に探すことも、何の改善にも繋がりません。\n\n改善の鍵はわがままにあります。**ここにいる全員**で「わがままの帽子」をかぶりましょう。原因を自分の外に探しましょう。でも人を攻撃するのは違いますよ。チームのプロセスや仕組み、ツール、などなど、「ここがもっとこうだったらなぁ」を共有しましょう。\n\n## あなたにとっての普通の意見は誰かにとっての気づき\n\n意見を出し合っているとき、「あぁ、こんな普通のこと言ってもな」となることがあると思います。普通のことしか思いつかず、何も話せなくなることもあると思います。\n\nでも大丈夫です。**あなたの普通は僕の普通とは違います。他のどのメンバーの普通とも違います。**あなたの普通をそのまま共有してみてください。それは僕の、他のメンバーの気づきに繋がるかもしれません。\nあなたもメンバーの意見を聞いて、新しい気づきを得ているかもしれません。それだって、そのメンバーの普通の話に過ぎないはずです。\n\nふりかえりはチームビルディングの要素を含んでいます。あなたが普通だと思っているそれを共有することで、メンバーはもっとあなたを知ることができます。\n\n### （とは言っても意見を言うのって難しい）\n\nってこともありますよね。まずは**同意**からでOKです。誰かが何か意見を出して、それが共感できるものなら「わかる」「同意です」「たしかに」「それな」。**なんでもOKです。**同意も立派な意見です。まずはできるところから意見を発信していきましょう！\n\n## まとめ\n\nということで、ふりかえりを始める前にぜひチームで共通認識しておきたい３つのことでした。「**共通認識**」がめちゃくちゃ大事です。ふりかえり会の最初にでも読み合わせするなどして、**メンバー全員が互いにこれを知っていることを知っている状態**を作りましょう👍\n\nではでは、よいふりかえりライフを〜 🤞\n"},{"slug":"20220725-what-i-value-as-a-product-manager","category":"blog","title":"プロダクトマネージャーとして大切にしていること","tags":["プロダクトマネージャー"],"body":"\n[こちらのnote](https://note.com/kony_um/n/n0eefeb493e76)を見て、よい機会なので「PMとして大切にしていること」を考えてみました！\n\n## PMとして大切にしていることは…\"自分の言葉で会話すること\"\n\n考えてみた結果、プロダクトマネージャーとして、というわけではないかもしれないんですけど、「**自分の言葉で会話する**」ということをすごく大切にしているなと気づきました。\n\n**「会話する」っていうのは、発信が双方向であるということです。**\n自分が言いたいことを言っているだけでも、相手の言うことを聞いているだけでもなく、双方が言葉をやり取りして理解し合ったり納得し合ったりすることですね。\n\nで、**「自分の言葉で」というのは、理解し納得し責任を持って話をするということです。**\n雰囲気で乗り切るわけでも、誰かが言っていたことをただそのまま伝えるわけでもなく、腹落ちした自分の考えを伝えることだと思っています。\n\nそんなん仕事なんやから当たり前やろー、って話ではあるんですが、プロダクトマネージャーは特に**「誰と」「何を」会話するのかの幅が広い役割**なんじゃないかなーと思っています。\nなので「自分の言葉で会話する」はすごく難しいことだと思いますし、その分大切にしたいと思っていることです。\n\n### だれと会話する？\n\n**プロダクトマネージャーが会話する人は多岐に渡ります。**\nセールス・カスタマーサポート・カスタマーサクセスなどのユーザーとのタッチポイントになっている人たちや、デザイナー・エンジニアなどのプロダクトチーム、経営層やプロダクト責任者・事業戦略担当者のような人たちとも会話をします。\n\nプロダクトマネジメントトライアングルの角を担っている人達と、**その人の言葉で、その人の背景と視界を理解して会話をして高解像度の情報を入手して、時にはプロダクトのバランスから相反することを納得してもらうための会話をします**。\nこれってすごく大変で大事なことだなぁって思うんです。\n\n![プロダクトマネジメントトライアングル](./images/product_management_triangle.webp)\n\n[プロダクトマネジメントトライアングル](https://ninjinkun.hatenablog.com/entry/the-product-management-triangle-ja)\n\n### 何を会話する？\n\n**プロダクトマネージャーが会話することは、プロダクトのWhy・What・Howのすべて…**ではないでしょうか。\n\n特にWhyとWhatは丁寧にやっています。\n僕はアジャイル大好きっ子で、ユーザーストーリーが大好きなんですよね。\n「どんな人のどんなニーズのためにどんな機能が必要なのか」について、誰とでも会話を始められる不思議道具、それがユーザーストーリーです。\n受入基準もしっかり書けば、かなりの粒度で話をして共通認識を作れます。\n\nユーザーストーリーの最高ポイントは、「どんな人のどんなニーズ」を会話の中心に持ってこれることです。\n人間はソリューションを考えるのが好きなようで、プロダクトに関する会話をするとすぐにソリューション案の話になることって多いと思うんですよね。そこで、「**そのソリューションってどんなユーザーストーリーになりますかね？**」といってみてください。\n\n「ターゲットとなる人ってどういう人ですかね？」「その人はどうしてこの機能がほしいんですかね？」\nWhyが浮かばない…こんなターゲットいないかも…この理由なら優先度高くないかも…\nすぐにソリューションの本質を明らかにするための会話に立ち戻れます。\n\nそしてそれは自分のアイデアに対しても。なかなか気持ちの良いWhyってかけないんですよねー。でもその気付きが大事だなって！\n\nユーザーストーリーについては、こちらの記事がすごくいいなぁと思っているのでぜひ！\n\n[The Art of Writing Agile User Stories - DEV Community](https://dev.to/rammina/the-art-of-writing-agile-user-stories-17o9)\n\nちなみに、Howもちゃんとエンジニアと通じ会える言葉で話して、エンジニア以外にも概要や難しさを理解してもらえるように会話することを心がけてます。\n\n## そのために頑張っていること\n\nここまでで「自分の言葉で会話する」ってなんやねんという話をさせていただきまして、ここからはそのために何してんの？って話をちょこっとしたいと思います。\n\n### 勉強する\n\n同じ言葉で会話するってすごく難しい。\nそのためにいろいろなジャンルのインプットをしていくことは大事だし、それなりに活きてきているかなーと思ってます。\n\n### わからなかったらわからないって言う\n\nとはいえわからないことは多いので、そのときは**「普通に聞く」**。\n言葉の意味もあるし、言動の意図もありますよね。わからないこと。\n特に意図は鵜呑みせず、ちゃんと聞いたほうがいい。理解できていない背景や視界が必ずあります。相手がちゃんと理解や整理ができていないこともあるので、諦めない。\n\nあと、自分がわかってないことは他の誰かもわかっていない可能性があるので、「それってつまり…」と言える人はとても尊いと思って生きることにしてます。\n\n### Whyにこだわる\n\n「自分の言葉で」ってなるとやっぱりWhyが大事だと思っていて。Whyにはこだわっています。納得はできないかもしれないけど、理解はできるレベルではないと自分の言葉にはならない。真っ向からぶつかるにしろ、丁寧に紐解くにしろ、忖度にしろ、「こうだからこうね」と自分の中で腑に落ちるところまで会話をすることは気をつけています。\n\nプロダクトマネージャーとしても、プロダクトのWhyに妥協してはいけないと思っていまして。\nプロダクトの価値を高めるために、価値の高いものを特定したいし、No 価値なものを排除したいし。\n\nあらゆるところでWhyにこだわっていることにこだわっています。\n\n## さいごに\n自分の中で大事にしていることってなんなのかなぁということを考える良いきっかけを得ました。企画ありがたい…!!\n\n「自分の言葉で会話する」はどんな仕事でも大切なことだと思いますが、プロダクトマネージャーという役割はことさらその大切さを感じられるお仕事だなと再認識できました。引き続き、Whyにこだわって頑張っていきたい所存です。\n"},{"slug":"20221009-i-found-we-do-not-do-scrum","category":"blog","title":"スクラムやってなかった","tags":["スクラム"],"body":"\n最近社内ラジオみたいな活動をしてて、その中で「僕たちはなぜスクラムをやっているのか」って話題が出た。色々な話や意見が出て、割と盛り上がって、その場で何か答えが出たわけではないのだけど、自分の中ではタイトルの通り、「スクラムやってなかったわ」ってとこにたどり着いた。\n\nこのブログの中では、「スクラムをやる」って表現がよろしくないよねってのは一旦横に置かせていただきます。僕も普段は気をつけてるよ。「スクラムを実践する」とか言ってるよ。でも今回はもうちょっと砕けて考えをまとめたいのもあるし、実際「スクラムをやってる」と思っている人って多いんじゃないかなって思うのであえてそういう言葉を使わせてもらいますmm\n\n## 僕たちはなぜスクラムをやっているのか\n\nまず話の発端はこの話題だった。こういうの考えるの素敵ですよね〜。\n\nアジャイルマニフェストが誕生して20年以上が経ち、スクラム自体はそのもう少し前に誕生しているからどちらにせよそれなりに時が経過している。\n**その中で開発フレームワークとしてスクラムを選ぶことは、とても普通のことになってきているんだと思う**。いつぞやのウォーターフォールと同じくらい普通。会社によって程度は違えど、スクラムで開発することに違和感を感じない人が多くなっていると思う。つまり、**スクラムで開発を進めることに対して「なぜ」と考える機会がなくなってきている**。\n\n会社やマネージャーのレイヤーでスクラムで開発を進めることが決定している例も少くないんじゃないかなと。そうなるとますますメンバーは「なぜスクラム」を考えることがいらなくなる。スクラムでやるって決まってるからスクラムでやってる状態ができあがる。\nスクラムで開発をする場合に限り上層部への説明が必要だったあの頃を考えるとすごくありがたい環境なんだけど、**スクラムでやることが当たり前の人が増えていくことは歴史が繰り返されてるだけなんじゃないかと思うこともある**。\n\nってことで、なぜスクラムなのかを考えること（略して「なぜスク」）はすごくいい。\n\n## 「スクラムでやっている」の「スクラム」って何者？\n\nあーだこーだと話してって、これにたどり着いた。人によって違う。\n\nスクラムといえば[スクラムガイド](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)。現在最新は2020年版。\nじゃあ「スクラムでやっている」の「スクラム」と「スクラムガイド」はイコールかというと多分そうじゃない。ん、どゆこと？\n**「スクラムでやっている」ってのはちょっと色々省略されていて、「僕たちはプロダクト開発をスクラムでやっている」ってことなんだと思う**。この場合、「僕たちのプロダクト開発 = スクラム」ってことだ。でこの「スクラム」がイコール「スクラムガイド」かというと多分そうじゃない。\n\n### 僕たちのプロダクト開発はスクラムの一部を参考にしている\n\n「スクラムやってる」が指している一番多い部分はおそらくスクラムイベント（スプリント、スプリントプランニング、デイリースクラム、スプリントレビュー、スプリントレトロスペクティブ）のこと。スプリントと呼んでいる1 or 2週間のタイムボックスと、そのはじめにプランニング、終わりにレビュー、レトロスペクティブがあり、毎日デイリースクラムをやっているってことを指していることが多い。主観でしかないが。\n\nじゃあ内容までスクラムガイドに沿ってやってるかっていうと別にそうではなかったりする。デイリースクラムはやったこと共有になっててコミットメントへの検査・適応をしてるわけでなかったり、レビューはステークホルダーからのフィードバックではなくPOの受け入れ会、レトロスペクティブは今回のスプリントにフォーカスしたふりかえりではない。リファインメントは日々のアクティビティにしにくいからイベント化してる。それが良いとか悪いとかではなく、「スクラムやってない」。\n\n短い反復期間の中でこういう機会を設けようって意味ではXPにも含まれてるけど、僕たちはなんでか「スクラムやってる」って言ってる。\n\nロールや作成物を指しているのかもしれない。プロダクトオーナーとか、プロダクトバックログとか。いやでもスクラムマスターがいなかったり、開発者ってひとくくりにしていても完全に職能別メンバーだったり、DoDがあいまいなインクリメントだったりすることもある。\n\n三本柱（透明性・検査・適応）を重視しているのか。いやいやほんと透明性なんて残酷で目をつむってしまうよ。\n５つの価値基準（確約・集中・公開・尊敬・勇気）をチームの価値基準として行動しているとか。んー。あんまり聞いたことない。\n\n何回も言うけど、良い悪いってことではなくて、僕らはそんなに真剣にスクラムをやっていない。**スクラムの一部を参考にしているっていう言い方がしっくりくる**。\n\n### 僕たちのプロダクト開発はスクラム以外も参考にしている\n\nスクラム以外から取り入れている営みもめっちゃある。例えばストーリーとかストーリーポイントとかは正確にはXPだろうし、スプリント中の作業はカンバンで可視化したりしてる。ペアプロやCI、リファクタリングもXP由来。設計・実装・テストを工程に分けてメンバーのアサインも分けてるならウォーターフォールとかを参考にしてる。プロダクトオーナーはPRDを書いているかもしれないし、デザイナーやフロントエンドエンジニアは独自のデザインシステムを構築してるかもしれない。ユーザーリサーチを欠かさないかもしれないし、データ分析してデータインフォームドな意思決定をしてるのかもしれない。モブプロやCD（DeliveryでもDeploymentでも）をしてるかもしれないし、TDDやATDDをしてるかもしれない。実践マッピングしてるし、探索的テストをしてるかもしれない。\n\nもうなんかわかんないが、**ソフトウェア開発の世界ではいろいろな有用そうなプラクティスがわんさかある。そしておそらくどのチームでも、こういうプラクティスで有用そうなものを自分たちのチームのプロダクト開発にわんさか採用してる。**\n\n良いとか悪いとかじゃ本当になくて、そうなの。\n\n## スクラムは手段であり目的ではない\n\nで、社内ラジオの中でもこういう話があって、これだけはこの話の唯一の結論だったんじゃないかなって思ってる。\n\n「なぜスクラムやってるのか」っていうのは良い問いに見えて、実はチームをスクラムに固執させてしまっているのではないだろうか。手段だよっぽさを出しつつ、スクラムをやることはぶれてはいけないこと、目的と同じくらいの位置づけで考えさせてしまっているのかも。\n\n## 自分たちのプロダクト開発を「スクラムやってる」で片付けない\n\n僕なりの結論です。\n考えてみると**僕たちは「スクラムを\"完全に\"実践している」わけではなかったし、「スクラム\"だけ\"をやっている」わけでもなかった。**\n自戒だけだけど「スクラムやってる」って言葉は自分たちのプロダクト開発を説明することを放棄してたんだなって。\n\n確かにスクラムのプラクティスをベースにしているところは多いのかもしれない。っていっても全体の半分には満たないでしょきっと。\nとなると「スクラムやってる」って言葉じゃきっと不十分で。僕たちはもっといろいろなことを考えて、いろいろなことを調べて、**いろいろなことを実験して、今自分たちに有用なプロダクト開発手法を作り上げてる。でこれからも考えて調べて実験してどんどん姿が変わってく。**それをちゃんと伝えられるようにならんといかんなって思いました。\n\nなんか最後感想文だけど、がんばろ。\n"},{"slug":"20221110-a-target-for-release-and-a-prospective-for-release","category":"blog","title":"リリース目標とリリース見込み","tags":["アジャイル","プロジェクトマネジメント"],"body":"\n「リリースはいつになるの？」\n\nよくある問いです。この時、リリース目標とリリース見込みを正しく使い分ける必要があるなと感じる日々です。\n\nリリース目標はその名の通り目標です。そうなるために頑張る基準です。\nリリース目標は、プロダクトチーム外の状況に左右されやすいです。商戦期や顧客のイベント、マーケティング観点、競合対向などなど。\n\nリリース見込みは、実際の開発状況からのリアルな着地点です。アジャイルな計画づくりで考えると、残りのストーリーの合計ポイントをベロシティで割ったスプリント数です。\n\n大抵の場合、リリース見込みはリリース目標よりも後ろになります。現実は厳しいです。\nリリース見込みをリリース目標に近づけるために、私たちはスコープを、チームを、プロセスを見直し、改善し続けます。残りのストーリーの合計ポイント数を減らすか、チームのベロシティを向上させるか、それがリリース見込みをリリース目標に近づけるための手段です。\n\n最初の問いに戻ります。\n「リリースはいつになるの？」\n\nこの時、伝えるべきは「リリース目標」か「リリース見込み」か。\n\nきっと両方ですね。\n\n私たちはこのリリース目標を目指しています。今のリリース見込みはこれです。\n前回の取り組みによってリリース見込みはこう変化しました。残りのギャップを埋めるために今はこういう取り組みをしています。ではまた次週、最新の状況をお伝えします。\n\nこれが透明性の高い共有なんでしょう。\n\n自分がリリースを聞きたいときも意識しましょう。知りたいのはリリース目標？リリース見込み？透明性の高い共有は透明性の高い問いで得やすくなります。\n\nそんなことを考えた夜。おやすみなさい。\n"},{"slug":"20230113-participation-report-for-rsgt2023","category":"blog","title":"RSGT2023に参加してみて","tags":["カンファレンス","登壇"],"body":"\n参加した。楽しかった。以上。😊\n\n勤めてる会社がスポンサー出してくれて、連れてってくれて、何気にスポンサーセッションでプレゼンまでさせていただいて。\n貴重な機会👏ありがたい👏\n\n<script defer class=\"speakerdeck-embed\" data-id=\"28ca74093ea443e6be1f743fcc619284\" data-ratio=\"1.7772511848341233\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n## Yatta-koto\n\n- セッションいっぱい聴きに行った\n- スポンサーセッションで発表（初社外発表🎉）\n- OST初体験\n\n## Wakatta-koto\n\n- OST怖くない\n- プレゼンも楽しかった\n- [Day2 keynoteの詩](https://lyssaadkins.com/blog-1/2020/02/02/its-323-in-the-morning/)がグッときた\n- 複数チーム、開発組織、もっと大きな組織の話もいっぱいあった\n- テーマについて議論・対話するのは好き\n- はじめましてや雑談は超苦手意識\n- 名刺交換意外とあった\n\n## Tsugi-yaru-koto\n\n- 見れてないセッションは多々あるので、スライド見させてもらいつつTwitterで感想つぶやく（ここまでがカンファレンス）\n- 気づきを社内でもシェア\n- スクラムマスターもっともっとやってくぞ！\n- 組織改善に足を踏み出していく（勇気をもらった気がしてる）\n- 次はOSTでテーマ出す\n- どこかでプロポーザル出す\n- 名刺を作る…\n\nまだテンション高いから、普段は言わないような目標を口にしてる。\n\n今年もゆるーく頑張ってくぞ〜。✊"},{"slug":"20230129-a-place-for-chit-chat-rather-than-time-for-chit-chat","category":"blog","title":"「雑談の時間」より「雑談の場」を","tags":["チーム","雑談"],"body":"\nチームの雑談、うまくいってますか？\nチームの関係構築のために、雑談に取り組むことは有効な手段のひとつですが、これがなかなか難しい。このブログでは、チームに雑談を根付かせる試行錯誤を共有します。\n\n## 雑談の目的\n\nまずは雑談の目的にあらためて触れます。\n\n僕たちの場合、**チーム内の関係構築**でした。\n**率直に意見を言い合える関係、雑に相談ができる関係が、チームの仕事の成果と質に直結する**からです。\n\n雑談は、この目的を達成するための低コストな取り組みの一つに見えますよね。\n\n## リモートワークと雑談\n\nオンサイトで仕事をするのが当たり前だった時代。雑談はそこまで意識して取り組むものでもなかったかもしれません。\n\n同室で席の近い人と雑談したり、会議室への道中で雑談したり。たばコミュニケーションや飲みニケーションなんて言葉もありました。（僕はたばこ吸わないし飲み会も得意じゃないから恩恵はあまりなかったですが😀）\n\nでも今は、リモートワークも選択できる時代。僕もチームメンバーも、基本的にはリモートワーク。\n\n仕事のやり取りはSlack、モクモクと一人で作業して、ミーティングは時間通りにZoomやMeetに集まり終われば退室。\n\n**リモートワーク時代の雑談は、意識的な取り組みがなければ生まれないもの**になりました。\n\n## 【失敗】雑談の時間\n\nそこで、僕たちが最初に行った取り組みが雑談の時間をつくることでした。\n\n雑談会として定期的に雑談の時間枠を押さえてしまい、その時間は仕事の手を休め、集まって雑談をするという取り組みです。\n\nお手軽ですし、多くのチームで試されているのではないでしょうか。\n\nこの取り組みは失敗でした。理由は色々です。\n\n- 「雑」談なのにその時間がきたら話さなければならないというプレッシャー\n- 雑談会に向けたトークテーマの温存\n- 特に話したいこともなく集まると気まずい沈黙タイム\n- 作業が乗っていてもせっかくの雑談の時間なので中断\n- 本当に雑談したい時に雑談できない\n\nそんなこんなで参加者はまちまちに。効果も薄い取り組みになってしまいました。\n\n僕はそっと雑談会のスケジュールを削除しました…\n\n## 【成功】雑談の場\n\n次に僕たちは雑談の場をつくることに取り組みました。\n\n僕たちは普段コミュニケーションツールとしてSlackを使っているので、チームの雑談用のチャンネルを作りました。このチャンネルの最大の目的は、[ハドル](https://slack.com/intl/ja-jp/help/articles/4402059015315-Slack-%E3%81%A7%E3%83%8F%E3%83%89%E3%83%AB%E3%83%9F%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B)常駐できる場所つくること、バーチャルな居室を作ることです。\n\nこのチャンネルには、以下のようなルールを適用しています。\n\n- モクモク作業してもよし\n- 雑談してもよし\n- 雑相（雑に相談）してもよし\n- 仕事の話も仕事以外の話もOK\n- 出入り自由\n- 無理に入らなくてOK\n- 集中したいときは多分入らない方がいい😀\n\nこれはやや成功しています。定着こそ一部のメンバーに限れますが、有効に活用してもらえている感覚があります。\n\n特に「モクモク作業してもよし」が効いているんじゃないかと推察。これで「ただそこに居て良い」という感覚が生まれてるんじゃないかと思います。参加するハードルを下げることがすごく大事だなと実感しています。\n\nあと**「仕事の話もOK」も効いてる**かも。雑談だと「仕事以外の話をしましょう」ってルールがついていることもあると思います。それはひととなりを知り知られするためにも大事ですが、僕たちはまず仕事でつながっているので仕事以外の話ルールはかなりの縛りプレイだと思っていて。仕事がテーマでもひととなりはわかりますし、何よりもまずは参加のハードルを下げることが大事です。仕事はみんなに共通するテーマ。実はチームの雑談において、一番とっつきやすいテーマなんじゃないでしょうか？（仕事の話をするわけではなく、仕事関連の雑な話をするって意味です）\n\n参加してもらえればこっちのもので、誰かが「おっ」といえば「どうしたんですか？」と雑談が始まり、誰かが「まじかぁ」といえば「どうしたんですか？」と雑相が始まる。\n\n## 雑談の場を継続する工夫\n\nSlackのチャンネルを作ってルールを作って、万事うまくいったかというとそうではありません。雑談の場を使ってもらうためには、誰かのリーダーシップ、働きかけが必要不可欠です。\n\n僕の場合は、以下のようなことを特に意識して雑談の場の継続に努めています。\n\n- 自分ができる限り場に常駐\n- 自分ができる限りモクモク作業・雑談・雑相する（バランス良く色んな使い方があることをアピール）\n- ミーティングで雑談・雑相のおかげで〜などのアピール\n- 特に雑相であの人がいれば捗りそうだなと思えばすぐにハドルに招待 or メンションで招待\n\n最近は利用頻度の高いメンバーも増え、そのメンバーたちも取り組みの効果を実感して、他のメンバーに働きかけるシーンが出てきました。\nそうなっちゃえばこっちのもんや。\n\nまた、この取り組みを聞きつけた他のチームの人が遊びにきてくれることもあり、場にアクセントをつけてくれています。\n\n## まとめ\n\nチームの関係構築のために、雑談は有効な手段の一つです。\n\nしかし手軽そうに見えて難しい。「雑談の時間」を作っても、なかなか効果を感じられず、機能しなくなったり形骸化してしまうことも多いのではないでしょうか。\n\nそんなときは「雑談の場」がおすすめです。好きな時にモクモクしたり雑談したり雑相したりする「雑談の場」を作ることで、「雑談の時間」よりも気楽に自由に持続可能な雑談を生み出し関係構築に繋げられます。\n\nこのブログが誰かの手助けになったら嬉しいです。\n"},{"slug":"20230221-make-user-stories-easy-to-write-and-read","category":"blog","title":"ユーザーストーリーを書きやすく、読みやすく","tags":["スクラム","XP","プロダクトオーナー"],"body":"\nユーザーストーリーはとても強力だ。\n**「誰が」「何を」「なぜ」欲しいのか、をシンプルに可視化できる。**\nシンプルだからこそ、**チーム全員で共通認識を持つ**ことができる。シンプルだからこそ、記述が難しく、**自分たちの素晴らしいアイデアの必要性や優先度に向き合わせてくれる**。\n\n僕はユーザーストーリーがとても好きだけど、フォーマットが少し使いにくかった。\n\n特にフォーマットが公式に決まっているわけではないと思うけど、『[アジャイルサムライ](https://amzn.to/4blXJIf)』でも登場するこのフォーマットが有名だろう。\n\n> 【ユーザーの種類】として、 <br />\n> 【達成したいゴール】をしたい、<br />\n> なぜなら、【理由】だからだ。\n\nとても個人的な感覚でしかないが、これで記述された文章がスッと入ってこない。スッと伝えられない。\n英語と日本語の順序性の違いなのか。それはよくわからない。\n\nユーザーストーリーの核は、「誰が」「何を」「なぜ」欲しいのか、を可視化しチームで共通認識することにある。\nその核さえ守られていれば、効果が消えることはない。その核を守りつつ、チームで共通認識しやすいフォーマットを模索し続けるのが良さそうだり\n\nそんなこんなで今僕たちはこんなフォーマットで共通認識を作っている。\n\n> 【ユーザーの属性】は、<br />\n> 【本質的に実現したいこと】したいので、<br />\n> 【欲しい機能】がほしい。\n\n今この記事を書きながら文字数カウントが目に入ったので、これについてユーザーストーリーを書くならば以下のようになる。（例です）\n\n> クリエイターは、<br />\n> 記事を書きながら読みやすい分量に収まっているか確認したいので、<br />\n> 下書き中にリアルタイムで文字数カウントされる機能がほしい。\n\n今までの一般的なフォーマットだと以下。\n\n> クリエイターとして、<br />\n> 下書き中にリアルタイムで記事の文字数を知りたい、<br />\n> なぜなら下書き中の記事が読みやすい分量をオーバーしていないか常に把握しておきたいからだ。\n\n僕たちは前者の方が書きやすく、読みやすく、共通認識しやすいと思い、前者のフォーマットを選択している。それでいて効果が薄れた印象もない。\n\n本質を見失わなければ、小さなことでもチームに有益な改善ってできるよねという一例として。"},{"slug":"20230301-how-to-get-more-effective-feedback-in-sprint-review","category":"blog","title":"スプリントレビューでフィードバックをもらうための工夫","tags":["スクラム","スプリントレビュー","フィードバック"],"body":"\nスプリントレビュー。ステークホルダーやチームからインクリメントのフィードバックをもらえる素敵なイベントです。\n一方で、単なる受入確認になってしまっていたり、何もフィードバックがなく終わってしまうというケースもよく聞きます。\nこのブログでは、フィードバックを受け取る側として僕が工夫していることをアウトプットします。\n\n## チーム外の人を招待する\n\n**チームに閉じているとフィードバックの視野も狭まってしまいます。**\n\n僕のチームでは、**お隣のチームと互いのスプリントレビューに参加し合うことでチーム外の視点を得られる**ようにしています。スプリントレビューは公開された場所（ハドル）でやっており、開催前に分報などでお知らせすることで、それ以外の方も参加してくれたりします。\n\nまた、**全社的にデモを披露できる場**が用意されていたりもして、積極的に活用しています。\n\n## フィードバックを求めていることを伝える\n\n**自分たちがフィードバックを求めていることを率直に伝えています。**\n参加者にはそれぞれ知っていることやユニークな経験・視点があり、それは自分たちだけでは持ち合わせないものなので協力してほしいということを伝えます。\n\n**「人助けだと思って何でもフィードバックしてください！」**\n\n## フィードバックはフィードバックとして受け取ることを伝える\n\nそれが正しい確実な情報だと思われてしまうので、発言を避けてしまうことはないでしょうか？\n\nそういう人もいることを前提として、「フィードバックはあくまでフィードバックとして受け取る」ことを強調して伝えています。**実際に何を作るかは、色々な声を参考にチームが責任を持って考えていくことを明確に伝え**、なので意見でも感想でも良いので声を届けてほしいということを伝えています。\n\n**「真に受けないので、思ったことそのまま教えてください！」**\n\n## チケットの話はしない\n\n受入確認になってしまう課題を抱えたチームのスプリントレビューを覗くと、スプリントバックログアイテムごとに受入基準を詳細を伝えデモをする、を一つずつ丁寧に行っていることがあります。\n\nチケット単位にデモを進めると、\n\n- **プロダクトの全体感に注目が集まりにくい**\n- **受入基準を確認しないとという気持ちになりやすい**\n- **気になったことが違うチケットのスコープかもしれないと無駄な勘繰りをしてしまう**\n\nなどの弊害があります。受入確認がしたいのであれば有効な進め方ですが、インクリメントのフィードバックを集めてプロダクトバックログに適応することを目的としている場合、得策ではありません。\n\n## シナリオを伝える\n\nその代わり、シナリオを伝えます。\n今回のスプリントで達成しようとしたこと（スプリントゴール）は何かを軸に、それは**「誰がどんなときにどんなことをどんな風にすることで達成されるのか」**を時間軸を持ったシナリオとして表現します。\n\n例えば、ブログサービスの一時保存機能を開発してるなら、\n\n**「隙間時間でブログを少しずつ書きたい太郎さんが、少し書いては一時保存し、また時間を見つけては書いて一時保存し、最後に公開するまでのデモをやってみます」**\n\nみたいな感じです。\n\n「公開」のようなおそらくこのスプリントで対応したものではないものも、今回の開発機能が関連するユーザーの体験の一部なのであれば、全体をデモすることで見えてくるものがあります。\n最初にユーザーの特徴や背景、目的を認識してもらえれば、フィードバックする側の観点も定まりやすくフィードバックにも自信を持ってもらえるようになります。\n\n## データもなるべくリアルに近づける\n\nシナリオベースでデモをすると分かりやすくなりそうなことは感じてもらえたと思います。\nしかし、**いかにもテストのようなデータはデモからリアリティを奪ってしまいます**。\n\n名前を「あああああ」にしたり、テキスト入力を「テスト」にしたり。これでは「文字が入力できるんだ〜」という印象しか与えられません。そこでちゃんとしたブログのような文章を用意しておけると「ブログを書いている太郎さん」の体験をみんなで眺めているように没入してもらう助けになります。\n\n## デモは説明しない、ターゲットの行動や心境を伝える\n\nデモはターゲットの操作を疑似体験してもらうといいです。ターゲットになりきって、**自分たちが想定しているユーザーの体験を見てもらいましょう**。\n\n「さて、今日もちょっとブログ書くかな〜…あ、駅着いたしここで一時保存するぞ…ちょっと空き時間できたな、ブログ書くかー…」\n\nのようにターゲットはこんなことを思いながらこういう行動をとってもらうことを考えていて、インクリメントはそれを叶えられていそうですか？とデモを通して問いかけます。\n\n「そんなケースはあまり聞いたことがないなぁ、私がよく聞くのは…」とか、「そういう想定なら、サイトにアクセスしたときにポップアップとかで一時保存の再開にすぐ誘導してあげた方がいいかも？」とか、良さげなフィードバックにつながりそうじゃないですか？\n\n## フィードバックしやすい人間であるアピール\n\n色々と工夫を話してきましたが、大大大前提として、**「この人・チームなら率直にフィードバックしても大丈夫そうだ」と感じてもらうことが肝要**です。\n\n**いつもよりちょっと声を張ったり、笑顔を増やしたり、冗談を交えたり、砕けた言葉を選んだり、フィードバックに対しての感謝や共感、リアクション、そういうコミュニケーションへの気遣いが重要かなと思います。**\nチームでよい空気感を演出するのもいいですね。\n\n## 最後に\n\n深夜テンションで思いつくものを適当に書き連ねた。ちゃんと色々工夫してるね笑\n\nスプリントレビューを効果的にするアイデアはきっといっぱいあります！大丈夫！楽しんでいきましょう！🙌"},{"slug":"20230305-retrospective-among-a-large-group-of-people-is-difficult","category":"blog","title":"大人数のふりかえりは難しい","tags":["ふりかえり","ファシリテーション"],"body":"\n社内勉強会でLTしたテーマです。\n\n大人数のふりかえりは難しいです。それに悩むチームも多いと思います。\nプロダクトチーム、で考えると関わる役割も多く（PdM、デザイナー、エンジニア、QA、などなど）、大きなサイズのチームになることもあります。\n僕も十数人のプロダクトチームのファシリテーションをしており、この課題に悩む時期があったのでTipsを共有したいと思います。\n\n## 少人数でふりかえろう\n\n以上、Tipsでした。ありがとうございました！\n\n😊\n\nそもそも僕らは大人数で話すのがたいてい苦手です。\n大人数のふりかえりを困難にしている心理的ハードルはいくらでも思いつきます。\n\n- 大勢の前で自分の考えを伝えるのは緊張しちゃう\n- 1人あたりの話せる時間が限られている中で、課題抽出やTryに繋がらないかもしれない話をするのはよくない\n- こんなに人がいれば、誰か1人くらい自分の意見をよく思わない人がいるかもしれない\n- 課題を提案しても、時間も限られているしどうせ選ばれないだろう\n- 人が多いので、それぞれの課題感や意見を伝え合うだけで残り時間がなくなりそう\n- 色々な役割の人がいるし、自分の感じる課題はみんな興味ないだろう\n\nふりかえりに限らず、大人数のコミュニケーションは難しいんです。4±1人くらいが気持ちよくコミュニケーションできるラインなんじゃなかろうか。\n\nでは、どうやって大人数のチームで少人数のふりかえりをするか、少しアイデアを出してみましょう。\n\n### 職能でグループ分けする\n\nまず分かりやすいのは職能でグループ分けする方法です。人数分布にもよりますが、「PdM・デザイナー」「エンジニア」「QA」などでそもそもふりかえりをするグループを分けてしまう手です。\n\nメリットは、**グループ内の課題感や興味が近しくなるはずなので、ふりかえりが活性化しやすいこと**です。\n一方で、**職能横断の課題解決・強み向上には寄与しにくい**デメリットもあります。\n\n### 興味のある or 貢献したいトピックでグループ分けする\n\nTryやActionを議論する前に、課題や強めたいことを洗い出すことをすることはよくあるかと思います。ここでいくつかのトピックを抽出し、参加者に議論に参加したいトピックを選んでもらってグループに分けれてもらう方法です。\n\nメリットは、**参加者が自分で選択して議論に参加できるので、議論へのモチベーションを高く保ってもらいやすく**なります。\nただ、選んだけど話の方向が思った方向じゃなくて、楽しくないし学びもないし貢献もできなそう。ということもあるかもしれません。\n\nこの方法を選ぶときはOST（Open Space Technology）を参考に運営するとよいです。\nつまり、議論中でも貢献できること、学習できることがなさそうだなと感じれば、何も気にせずに別のトピックのグループに移れる、ということです。\n\nOSTについては、RSGT2023で発表されていたこちらがとても参考になります。\n\n<script async class=\"docswell-embed\" src=\"https://www.docswell.com/assets/libs/docswell-embed/docswell-embed.min.js\" data-src=\"https://www.docswell.com/slide/K3R2E5/embed\" data-aspect=\"0.5625\"></script><div class=\"docswell-link\"><a href=\"https://www.docswell.com/s/matsushu83/K3R2E5-2023-01-13-094100\">OSTを120%楽しもう!!︎ 誰でも簡単に実践できるtips教えます by @matsushu83</a></div>\n\nデメリットとしては、**OSTの要素を実現するための準備、説明、ツールなどが慣れるまでは大変**かもしれません。\n\n### チームを分ける\n\n**ふりかえりが難しいのであれば、普段のコミュニケーションから難しくなってしまっている**のかもしれません。チームを小さく保つことは、普段の営みのためにも有用な手段です。\n特に、チームにスイッチングコストや複雑性が生まれてしまっているのであれば、ちゃっちゃと分けちゃいましょう。\n\n僕たちも今現在はこの選択をしました。数十人のチームを分割したということです。（これも色々と考えながら試行錯誤しての今です。この話はまたどこかで。）\n\n## 最後に\n\n大人数のふりかえりはやっぱり難しいので、少人数のふりかえりになるように工夫してくのが良いかなと。\n\nではでは素敵なふりかえりライフを！🙌"},{"slug":"20230307-five-books-to-get-you-out-of-doing-scrum-in-the-atmosphere","category":"blog","title":"「雰囲気でスクラムやってます」から抜け出すために5冊の本をおすすめする","tags":["スクラム","読書"],"body":"\nスクラムが当たり前になってきたんだと思います。\n入った会社が/入ったチームがスクラムでプロダクト開発をしていたからスクラムやってます、って人も多くなったんだと思います。良いスクラムチームやスクラムマスターに出会えればよいのですが、正直私たちは雰囲気でスクラムやってます、って状況もありますよね。\n\nスクラムはプロダクト開発の営みです。営みを雰囲気でやってるのって、ヤバいんですよね。ちゃんと理解して、効果的に使いこなしたいですよね。\n\nそのためには、実践とともにインプットが重要です。「雰囲気でスクラムやってます」から抜け出したいと思っている人に5冊だけ本をおすすめするとしたら何をおすすめするか、特に誰に言われたでもなく勝手に考えてみます。笑\n\n1. [SCRUM BOOT CAMP THE BOOK スクラムチームではじめるアジャイル開発](https://amzn.to/3Ui2Cfz)\n1. [アジャイルサムライ−達人開発者への道−](https://amzn.to/3Oksdkg)\n1. [This is Lean 「リソース」にとらわれずチームを変える新時代のリーン・マネジメント](https://amzn.to/3u6ZsAG)\n1. [アジャイルな見積りと計画づくり \\~価値あるソフトウェアを育てる概念と技法\\~](https://amzn.to/3ufZMNq)\n1. [Agile Testing Condensed Japanese Edition](https://leanpub.com/agiletesting-condensed-japanese-edition)\n\n## SCRUM BOOT CAMP THE BOOK【増補改訂版】 スクラムチームではじめるアジャイル開発\n\n[リンク](https://amzn.to/3Ui2Cfz)\n\n**「正直、スクラムってなんなのか全然わかってなくて、今までチームがこうやってたからそうやってるんですよね。」**\n\nそんな方にはまず、『SCRUM BOOT CAMP THE BOOK』をおすすめします。\n\nこの本は、**スクラムのルールや営みの流れをとても丁寧に教えてくれます**。スクラムは『スクラムガイド』で定義されていますが、この本は『[スクラムガイド2017](https://scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Japanese.pdf)』の内容を忠実に詳細に具体的に紹介してくれています。ほんと超丁寧です。\n\n**初めてスクラムに取り組むチームのストーリーが具体例として挿入されている**ので、自分たちの営みと比較して良い点、改善できる点、取り入れられそうな点がイメージしやすいと思います。\n\nスクラムに取り組むならまずはスクラムガイドを、ではあるのですが、個人的にはこの本を読んでからの方が理解度が高まるし、実践に繋げやすいと思います。\n\nちなみに、スクラムガイドはこの本が出版された後もアップデートしており、『[スクラムガイド2020](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)』が最新版です。ぜひ読み比べてみてください。\n\n## アジャイルサムライ−達人開発者への道−\n\n[リンク](https://amzn.to/3Oksdkg)\n\n**「スクラムのイベントや作成物はやってるんですけど、プロダクト開発は上手くいってない気がするんですよね」**\n\nこういうお悩みは良く聞きます。そんな方々には『アジャイルサムライ』がおすすめです。\n\nスクラムはアジャイル開発手法というグループの一つに位置付けられています。この本は「**アジャイル開発ってつまりこういうことだよ**」ということを教えてくれます。しかも、コミカルに。抜群の読み進めやすさです。\n\nアジャイル開発には、[アジャイルソフトウェア開発宣言](https://agilemanifesto.org/iso/ja/manifesto.html)と[12の原則](https://agilemanifesto.org/iso/ja/principles.html)と呼ばれるものがあります。ウォーターフォール開発を代表とする計画駆動のアプローチに対して、アジャイル開発手法のグループの共通項を示したものです。\n\n『アジャイルサムライ』では、**アジャイルなプロジェクトやチームの営みとそれらとの関係性についても言及されており、スクラムを実践する上でのマインドセットを醸成できる**内容です。\n\nまた、この本はスクラムではなく、同じアジャイル開発手法に分類されるXP（エクストリームプログラミング）の要素が色濃くなっています。\nスクラムは意図的にプロダクト開発のコンテキストを排除しさまざまな分野で活用できるように定義されています。それゆえに「スクラムやってるはずなのにプロダクト開発が上手くいかないなぁ」という状況が生まれやすいのかもしれません。\nXPはプロダクト開発のコンテキストにフォーカスしたプラクティスに言及してくれています。**技術的なプラクティスを含みます。これらを知り、スクラムの上で適用することは、チームのプロダクト開発のレベルアップに寄与する**はずです。\n\n## This is Lean 「リソース」にとらわれずチームを変える新時代のリーン・マネジメント\n\n[リンク](https://amzn.to/3u6ZsAG)\n\n**「スクラムのおかげでプロジェクト管理がしやすくなったよ。」**\n\nこれはこれでいいのですが、ひょっとすると価値にフォーカスできていないかもしれません。そんなときは『This is Lean」をおすすめします。\n\nスクラムガイドに記されている通り、スクラムは「経験主義」と「リーン思考」に基づいています。しかし、リーン思考について、あまり考えずにスクラムを実践している人は多いのかもしれません。「🤔」となったらぜひ読んでみてください。\n\nこの本では、主に「フロー効率」の考え方を学べます。その源流にあるのは「顧客価値」です。私たちがプロダクト開発する目的は、顧客に価値を届けるためです。この本は、その目的のために私たちは何に注目し、何をするべきなのかを教えてくれます。\n\nこの本の概念をインプットすると、スクラムの設計の見え方が変わると思います。スクラムがなぜ今この形になっているのか、何は変えてはいけないのか、どういうカスタマイズはよいのか、そういうものが見えてくるはずです。\n\n## アジャイルな見積りと計画づくり \\~価値あるソフトウェアを育てる概念と技法\\~\n\n[リンク](https://amzn.to/3ufZMNq)\n\n**「楽しくプロダクト開発はできてきてますよ。いつどんなプロダクトを目指していけるのか、見通しはわかってないですけど。」**\n\n見積もりと計画づくりは、プロダクト開発において重要な活動です。スクラムでは特に言及されていませんが、ステークホルダーの期待を制御するにも、ビジネスと開発をうまく融合させるにも、自分たちの目標を立てて見失わないようにするためにも、見積もりと計画づくりは味方につける必要があります。\n\nこの本では、なぜ計画駆動のアプローチがプロダクト開発に合わないのか、アジャイル開発はそれにどう向き合うのか、がとても詳細に語られています。見積もりと計画づくりについて、さまざまな取り組み方とメリデメ、シチュエーションが提案されています。\n\n見積もりと計画づくりは、プロジェクトを通して常に重要な営みです。チームの外に対しても内に対してもです。多くのチームが理想的なプロジェクトの期日に向けて、リスクを明らかにできず、適応できずに期待値を超えられなくなります。ぜひこの本から、プロジェクト進行の重要な要素であるアジャイルな見積もりと計画づくりをマスターしましょう。\n\n## Agile Testing Condensed Japanese Edition\n\n[リンク](https://leanpub.com/agiletesting-condensed-japanese-edition)\n\n**「スクラムいいですね。しっかりと価値あるものを漸進的に反復的に開発できていますよ。あとはテストを通過すればリリースです。」**\n\n5冊目におすすめする本が『Agile Testing Condensed』です。スクラムにしろ、XPにしろ、テストについてはあまり言及されていません。しかし、アジャイルにおいて、テストはとても大切な概念です。テストの概念がなければ完成を定義できませんし、フィードバックを得られなくなります。ウォーターフォールのときのテストのような最後の関門ではなく、より勇気を持ってプロダクト開発に臨むための営みにしたいものです。\n\nこの本は、アジャイル開発 x テスティング について、網羅的に紹介してくれます。アジャイルテスティングにおける価値観から、注目すべき観点やプラクティスまで。\nスクラムでは、プログラマーもQAも開発者で一括りです。しかし、何もせずに実装とテストの隔たりが解消することはおそらくないでしょう。この隔たりがある以上、チームにフローを生み出すことは複雑で難しくなってしまいます。\n\nアジャイルテスティングをチームで俯瞰し、\"開発\"全体のリズムを作り出しましょう。\n\n## まとめ\n\nこの記事では、「雰囲気でスクラムやってます」から抜け出すときにまず手に取ってほしい本を5冊に制限して紹介してみました。\n\n雰囲気スクラムからの脱出には、スクラムにだけ焦点を当てても糸口はなく、プロダクト開発という全体的な視点でのインプットが重要です。\n\n- 『[SCRUM BOOT CAMP THE BOOK](https://amzn.to/3Ui2Cfz)』まずはスクラムをしっかり学ぼう\n- 『[アジャイルサムライ](https://amzn.to/3Oksdkg)』アジャイルなマインドセットや有効なプロジェクト進行＆技術プラクティスについても知ろう\n- 『[This is Lean](https://amzn.to/3u6ZsAG)』スクラムの基盤でもあるリーン思考を身につけよう\n- 『[アジャイルな見積もりと計画づくり](https://amzn.to/3ufZMNq)』自分たちの活動の見通しを立てる術を手に入れよう\n- 『[Agile Testing Condensed](https://leanpub.com/agiletesting-condensed-japanese-edition)』テスト活動もスクラムの営みに適応しよう\n\nでは、素敵なスクラムライフを！！"},{"slug":"20230318-just-talk-reflection-is-good","category":"blog","title":"フレームワークのその向こう、Just talkなふりかえりが案外良き","tags":["ふりかえり","チーム"],"body":"\n最近のチームのふりかえりはフレームワークを使わずにただ喋っています。案外良いので共有です。\n\n## 背景\n\nふりかえりといえばKPTとかフレームワークを使うのが一般的ですよね。\n僕たちのチームでも、KPTに帆船に象・死んだ魚・嘔吐にと、その時々のチームの状態に合わせて様々なフレームワークを試してきました。\n\nそんなある日、僕はこんなことを思いました。\n「準備、めんどくさいなぁ」\n\n怠惰😀\n\nまた、チームからも「**ふりかえりフレームワークを使うと、そのとき気になってたことがフレームワークの観点に合わなかったとき話題に挙げられないことがある**」という意見が出てました。\n\nそこで「Just talkなふりかえり」をチームで実践してみました。\n\n## Just talkなふりかえり\n\nファシリテーターの準備はありません。\n会が始まったら「何かみんなで話しておきたいことある人いますか？？」と尋ねるだけです。\n\nあとは話し始めた人の話を聞いて、対話をして、アクションが決まるか、十分話したとなれば終わり。\nまた「次なんか困ってたり不安なことある人いませんか？？」などと問いかけて次の対話を始めます。\n\n対話に時間制限などは設けず、ただただ対話を楽しみます。\n\n## それでうまくいくの？\n\nそれなりにうまくいってる感触があるんですよ。\n\n- 納得感のあるアクションを特定できている\n- アクションはなくとも、何に困っているか、何を気にしているか、メンバーの考えや状況を共有し合える\n- 思考やプロセスがフレームワークに依存しないので、異なる角度や粒度の対話が一回のふりかえりの時間内でできる\n- フレームワークを利用するのに比べて対話に多くの時間を割ける（ほぼ全時間）ので、ゆとりある対話ができる\n\nなどなど。良きです。\nしかも、Miroの準備もいらない…!!\n\n僕たちはslackのハドルに集まって話して、キーワードやアクションはスレッドにメモしとく、くらいしかしてないので、費用対効果○😀\n\n## 注意点は？\n\nもちろんフレームワークを使った方が良いなってところもあります。\n\n- 喋り始める人、対話に積極的に参加する人に偏りが出やすい\n- 時間制限もないので発散しやすい\n- フレームワークに比べて、課題探索の視野を広げることはできない（ので、ある程度フレームワークを試してから切り替えるのがよいと思う）\n\n代表例です。要はふりかえり中のファシリテーションはめっちゃ重要になります。話をふったり問いをなげたり。\n\n対話が目的でもあるので無理やりアクションに集約する必要はありませんが、ふりかえりの時間を無駄にしないバランスで場をリードする必要があります。\n\n## 工夫\n\n注意点に対する工夫としては下記を実践しています。\n\n- ヒーリング音楽・動画を流す。対話しやすい雰囲気づくり。\n- 自分の声色やスピードもゆったりと。\n- 話題に適した人への問いかけを積極的に。\n- 最初にチームや個人の状態の共有コーナーを設けて、話し始めるタネをつくる\n- 必要に応じて最初に対話したいことを考える内省の時間をとる\n\nフレームワークに頼らない代わりに、ファシリテーションは頑張って。でもそんなに気を重くする必要はなくて、チームでの対話を楽しむ気持ちで。\n\n## まとめ\n\nふりかえりフレームワークは有用ですが、準備が大変だったり気になっていたトピックをあげにくい状況を生むこともあります。\n\nそこで僕たちのチームではJust talkなふりかえりを試してみました。定期的な対話の場があれば、チームは改善できることを体感しています。\nフレームワークを使うより、純粋に「チームで対話してる時間を長くできる」のは魅力的な感じています。\n\nもちろん注意点もありますが、工夫や実験を繰り返しています。\nJust talkなふりかえり、案外良きです。\n"},{"slug":"20230401-automated-e2e-testing-trial-experience-playwright","category":"blog","title":"自動E2Eテストお試し体験記（Playwright）","tags":["E2Eテスト","自動化","Playwright"],"body":"\n後輩くんに「E2Eテストなんか怖い😣」と言われたので「ソンナコトナイヨー☀」を体験してもらうために書く。\n\n# Playwright\nhttps://playwright.dev/\n\nとりあえず、今回はこのPlaywrightってやつを使ってみよう。\nまずは「なんか怖い」を払拭するためだから理由とかは脇においておこう。\nでも軽快だし、クロスブラウザできるし、スクショやビデオも取れるし、いいぞ。\n\n# Playwrightをインストール\nDocker使ってくぞ。まずは準備だ。\n\n```Dockerfile:Dockerfile\nFROM node:19.4\nENV WORKDIR=/playwright/\n\nWORKDIR $WORKDIR\n```\n\n```yaml:docker-compose.yml\nversion: '3'\n\nservices:\n  playwright:\n    build: .\n    volumes:\n      - .:/playwright\n```\n\n```bash\n$ docker compose build\n```\n\nインストールは公式ドキュメント見てこう。\nhttps://playwright.dev/docs/intro\n\n```bash\n$ docker compose run playwright yarn create playwright\n\n? Do you want to use TypeScript or JavaScript?\n> TypeScript\n\n? Where to put your end-to-end tests?\n> tests\n\n? Add a GitHub Actions workflow?\n> N\n\n? Install Playwright browsers (can be done manually via 'yarn playwright install')?\n> n\n\n? Install Playwright operating system dependencies (requires sudo / root - can be done manually via 'sudo yarn playwright install-deps')?\n> n\n```\n\nいろいろなディレクトリやファイルが生成されているな。\n\n```bash\n- node_modules/\n  - 省略\n- tests/\n  - example.spec.ts\n- tests-examples/\n  - demo-todo-app.spec.ts\n- .gitignore\n- docker-compose.yml\n- Dockerfile\n- package.json\n- playwright.config.ts\n- yarn.lock\n```\nこんな感じになってるはず。\n\nbrowsersとoperating system dependenciesはほしいので、`Dockerfile`に書いてこう。\n\n```diff:Dockerfile\n  FROM node:19.4\n  ENV WORKDIR=/playwright/\n\n  WORKDIR $WORKDIR\n\n+ COPY package.json $WORKDIR\n+ COPY yarn.lock $WORKDIR\n+ \n+ RUN yarn install\n+ RUN yarn playwright install && yarn playwright install-deps\n+\n+ CMD [\"yarn\", \"playwright\", \"test\"]\n```\n\n`Dockerfile`いじったのでもう一度ビルドしておく。\n\n```bash\n$ docker compose build\n```\n\n準備はこんなとこでOKかな。\n\n# テストを実行してみる\n最初から`tests/sample.spec.ts`ってサンプルテストコードがあるじゃないか。\n\n```ts:tests/example.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects the URL to contain intro.\n  await expect(page).toHaveURL(/.*intro/);\n});\n```\n`test()`ってのが2つある。これがテストケースだな。\nその後に`'has title'`、`'get started link'`ってテキストが付いてるけど、テストケース名だろう。\nコメントアウトで説明も書かれているけど、なんかコードからある程度わかりそうだな。\n\n## has title\n`page.goto()`で括弧内のURLにアクセスしてそう。\n`page.goto('https://playwright.dev/')`は https://playwright.dev/ にアクセスしてるんだろう。\n\n`expect(page).xxx`で何かを検証していそうだな。\n例えば`expect(page).toHaveTitle(/Playwright/)`は、ページのタイトルに「Playwright」が含まれていることを検証していそうだ。\nこのページのタイトルは「Fast and reliable end-to-end testing for modern web apps | Playwright」みたいだからパスしそう。\n\n## get started link\n`page.goto('https://playwright.dev/')`は`has title`のテストと同じだ。\n\n`page.getByRole('link', { name: 'Get started' }).click()`は、「Get strted」ってテキストを持つリンクをクリックしているんだろう。ページトップにあるボタンだな。\n\n`expect(page).toHaveURL(/.*intro/)`でURLが`intro`で終わるか見てるな。\n実際遷移先のURLは`https://playwright.dev/docs/intro`だからこれもパスしそう。\n\nこれを回してみよう。\n\n```bash\n$ docker compose up\n6 passed\n```\nパスした。\nちなみに`tests/sample.spec.ts`には`test()`は2つしかないけど6つのテストがパスしてる。\nそしてコンソールを眺めてると`[chromium]`,`[firefox]`,`[webkit]`の文字が見えた。\nそう、すでにクロスブラウザでテストしてやがる。やりやがる。\n\nこの辺は、`playwright.config.ts`を眺めるとなんとなくわかる。\n\n```ts:playwright.config.ts\n...\nexport default defaultConfig({\n  testDir: './tests',\n  ...\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ..devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n  ...\n})\n```\nDesktopのChrome、Firefox、Saferiでテストしたようだ。\nそしてコメントアウトにさらなる夢を感じる。\n\n# テストを書いてみる\n自分でもテストを追加してみたい。\n\nhttps://playwright.dev/docs/writing-tests\n\n公式ドキュメントが丁寧。\n\nhttps://playwright.dev/ にはページトップに「Playwright enables reliable end-to-end testing for modern web apps.」ってヒーロータイトルがある。これを検証してみよう。\n\n\n```ts:tests/example.spec.ts\n...\n\ntest('has hero title', async ({ page }) => {\n  await page.goto('https://playwright.dev/')\n\n  await expect(page.getByRole('heading', { name: 'Playwright enables reliable end-to-end testing for modern web apps.' })).toBeVisible()\n})\n...\n```\n要素はLocatorsというもので指定するらしい（`page.getByRole('header', { name: xxx })`のとこ）。\n`toBeVisible()`で存在していること（見えていること）を検証している。\n詳しくは、公式ドキュメントを参照。\n\nhttps://playwright.dev/docs/locators#locate-by-role\n\nちなみに`class`を使ったりして指定することもできる。\n\n```ts:tests/example.spec.ts\n...\n\ntest('has hero title', async ({ page }) => {\n  await page.goto('https://playwright.dev/')\n\n  await expect(page.locator('.hero__title')).toHaveText('Playwright enables reliable end-to-end testing for modern web apps.')\n})\n...\n```\n\n```bash\n$ docker compose up\n9 passed\n```\nどちらの書き方にせよ、9つのテストがパスしたはず。\n\nおぉ...なんかこんな感じでなんだってできそうだな...\n\nLocatorに対する操作もいろいろ...\n\nhttps://playwright.dev/docs/api/class-locator\n\nAssertionも色々...\n\nhttps://playwright.dev/docs/api/class-pageassertions\n\nhttps://playwright.dev/docs/api/class-locatorassertions\n\nこれ、なんでもできるんじゃないの...??\n\n# 失敗も見とく\nちゃんと失敗するのかも見ておこう。\n\n```diff:tests/example.spec.ts\n  ...\n\n  test('has hero title', async ({ page }) => {\n    await page.goto('https://playwright.dev/')\n\n-   await expect(page.getByRole('heading', { name: 'Playwright enables reliable end-to-end testing for modern web apps.' })).toBeVisible()\n+   await expect(page.getByRole('heading', { name: 'Playwright enables reliable end-to-end testing for modern web apps.' })).not.toBeVisible()\n  })\n...\n```\n`.toBeVisible()`の前に`.not`をつけた。これで「存在しない（見えない）」ことを検証することになる。\nでも実際はあるから失敗するはず。\n\n```bash\n$ docker compose up\n3 failed\n[chromium] › example.spec.ts:20:5 › has hero title\n[firefox] › example.spec.ts:20:5 › has hero title\n[webkit] › example.spec.ts:20:5 › has hero title\n6 passed\n```\n3つ失敗してる。期待通り。\n\nちなみにplaywrightはテストのレポートも作ってくれる。\n`playwright-report/index.html`というファイルが生成されているので、ブラウザで開いて見てみよう。\n\n![テストレポート](./images/report.png)\n\nうわぁ。見やすい...\n\n![テストレポート詳細](./images/report_detail.png)\n\n詳細まで見れるんですか...\n\n# 失敗時のオプションを少し追加\nでも失敗時どうだったのか、このレポートからではわからない。\nと思ったらテストオプションがめっちゃ豊富。\n\nhttps://playwright.dev/docs/api/class-testoptions\n\n```diff:playwright.config.ts\n  import { defineConfig, devices } from '@playwright/test';\n  ...\n  export default defineConfig({\n    testDir: './tests',\n    ...\n    use: {\n      trace: 'on-first-retry',\n+     screenshot: {\n+       mode: 'only-on-failure',\n+       fullPage: true,\n+     },\n+     video: 'retain-on-failure',\n    },\n    ...\n  });\n```\n\n失敗時にスクリーンショットとビデオを撮ることにしてみた。\nもう一度テストを失敗させて、レポートを見ると...\n\n![テストレポート詳細（スクリーンショット）](./images/report_screenshot.png)\n\n![テストレポート詳細（ビデオ）](./images/report_video.png)\n\n便利！！すぎ！！\n\n# 怖くないよね？\nということで、怖くなかったよね？\nむしろめっちゃ味方。頼れるやつやE2E。Playwrightすげぇ。\n公式ドキュメント見るとページありすぎて「これは沼...今はやめておこう...」となるレベル。\nでもやりたいことはコレくらいの労力で達成できるのかも。\nそれでちょっとずつ沼にハマれば、この公式ドキュメントの量は期待感しかない！\n\nということで、一緒に沼にはまろう！"},{"slug":"20230325-readiness-or-courage-to-practice-scrum","category":"blog","title":"スクラムを実践する覚悟、あるいは勇気","tags":["スクラム"],"body":"\n最近、スクラムを実践する覚悟について考えている。\n\n## 自由と責任はセット売り\n\nフロイト曰く、\n\n> ほとんどの人間は実のところ自由を欲していない。なぜなら自由には責任が伴うからである。ほとんどの人間は責任を負うことを恐れている。\n\nらしい。わかる。\n\nじゃあ責任と自由を誰かに握ってもらうか。もったいない！\nチームメンバーが自由にひとりひとりの才能を活かすからこそ大きな価値創造につながるはずだ。誰か1人が責任と自由を持ち、他の人達はそれに従うなんて、プロダクト開発の世界では前時代的だよ。\n\n## 責任は引き受けるもの\n\nところで、XPの原則の一つに「**責任の引き受け（Accepted Responsibility）**」がある。\n\n> 責任は割り当てるのではなく、引き受けることしかできない。\n\nfrom [エクストリームプログラミング](https://amzn.to/3uezn2z)\n\nこれである。これは一見経営層や管理職に向けられた言葉に見えるかもしれないが、私たち現場のメンバーのマインドセットにも語りかけている言葉だ。\n自分たちを活かすために、私たちは責任を引き受けて自由を得なくてはならない。\n\n## スクラムの責任\n\n[スクラムガイド](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)には責任が定義されている。以下に引用します。\n\n### スクラムチーム\n\n> スクラムチームは、ステークホルダーとのコラボレーション、検証、保守、運用、実験、研究開発など、プロダクトに関して必要となり得るすべての活動に責任を持つ。\n\n> スクラムチーム全体が、スプリントごとに価値のある有用なインクリメントを作成する責任を持つ。\n\n### 開発者\n> 開発者は常に次の結果に責任を持つ。<br />\n> ・スプリントの計画（スプリントバックログ）を作成する。<br />\n> ・完成の定義を忠実に守ることにより品質を作り込む。<br />\n> ・スプリントゴールに向けて毎日計画を適応させる。<br />\n> ・専門家としてお互いに責任を持つ。\n\n### プロダクトオーナー\n\n> プロダクトオーナーは、スクラムチームから生み出されるプロダクトの価値を最大化することの結果に責任を持つ。\n\n### スクラムマスター\n\n> スクラムマスターは、スクラムガイドで定義されたスクラムを確立させることの結果に責任を持つ。\n\n> スクラムマスターは、スクラムチームの有効性に責任を持つ。\n\n## 覚悟、あるいは勇気\n\n個人、チームとして、これらの責任を引き受ける覚悟はあるだろうか。読み込んでみて。割と難しいこと言ってる😀\n\nただ、これらの責任をひとりひとりが引き受ける覚悟を決めて、初めてスクラムは絶大な効果をもたらしてくれるのだと思う。\nこの覚悟を決めた者たちが、超絶効果的に働けるようにスクラムは設計されているんだろう。\n\n「覚悟」は強い言葉かもしれないので、人によっては弱く見えてしまうかもしれない。\n\nこれは「勇気」の話だ。スクラムの価値基準にもXPの価値にも含まれている「勇気」。\n責任を引き受けて自由を得る勇気。\n"},{"slug":"20230415-codenames-is-good-for-the-team-building","category":"blog","title":"CODENAMESがチームビルディングに良さげだった","tags":["チーム","スクラムマスター","チームビルディング"],"body":"\nチームビルディングの一環でCODENAMESをやってみたらいい感じに盛り上がったので共有します！\n\n## CODENAMESとは？\n\n[Codenames – Play with your Friends Online](https://codenames.game/)\n\nCODENAMESは、コードネーム（単語）が振られた25枚のカードから、自チームのカードを先に全て当てたチームが勝利するゲームです。2チームに分かれ、チームには1人スパイマスターがいます。スパイマスターは25枚のカードがそれぞれ「自チームのカード」「相手チームのカード」「ハズレカード」「NGカード」のどれなのかを知っており、ターンごとに1単語のヒントを伝えます。そのヒントを頼りに他のスパイたちがカードを選んでいくことでゲームが進んでいきます。\n\n先に自チームのカードを全て選んだチームの勝ち、またはNGカードを選んでしまったチームの負けです。\n\n↓詳しいルールはググってみてくださいmm\n\n[【全てわかる】ブラウザ版『コードネームオンライン』のルール・設定を徹底解説 | ぼくボド](https://boku-boardgame.net/codenames-online#google_vignette)\n\n## チームビルディングにおすすめなポイント\n\n私がチームビルディングにCODENAMESをおすすめする理由はこちらです。\n\n- チーム戦なので、チーム内のコミュニケーション活性や帰属意識につながりやすい\n- 不確実性の高い状況でチームで話し合い意思決定する体験ができる\n- ターンの制限時間を設けることで、短い時間で意思決定をする体験ができる\n- 付随して、話し合うことで視野が広がる体験ができる\n- スパイマスターはヒントを出すために、スパイたちの考え方を意識するきっかけになる\n- スパイたちはヒントから答えを導き出すために、スパイマスターの考え方を意識するきっかけになる\n- オンラインのツールが用意されてるので、準備も場所も心配ない\n\n特に私は、チームで短い時間で話し合い意思決定する、という体験ができそうなところが気に入り、このゲームをチームでやってみることを選びました。\n\n## さらに工夫\n\nチームビルディングのためのゲームなので、いくつか工夫も用意しました。\n\n- このゲームを選んだ理由は最初に伝えた\n- 最初はルール説明しながらエキシビジョンマッチ\n- 制限時間は徐々に短く\n- チームを固定してゲームごとにふりかえりの時間を設ける\n- 自分はゲームマスターに専念\n\n特にゲームごとのふりかえりが重要。ただ楽しいゲームで終わらせず、やってみてわかったことから改善して、のサイクルも体験していきましょう。Meetを使ってやったので、ふりかえりは各チームのブレイクアウトルームで分かれてやってもらいました。\n\n## やってみてどうだったか\n\n盛り上がった！😀 それにつきる！笑\nみんな楽しそうだったので満足。１時間くらいで3〜4ゲームできました。\n\n## まとめ\n\nCODENAMES、チームビルディングにおすすめできるぞ！\n"},{"slug":"20230426-i-do-not-create-bug-tickets","category":"blog","title":"バグチケットをつくらない","tags":["スクラム","プロダクト開発"],"body":"\n## バグチケット\n\nバグチケットなるものがあります。実装したプロダクトに不具合があった際に作成されるもので、通常のストーリーやタスクチケットとは別の\"色\"で管理されたりします。僕の所属するチームでも絶賛運用中で、JIRAのチケットタイプを使い分けてます。\n\n## スプリント中にバグチケットなんてない\n\nこの記事の結論（極論）はこれです。僕自身はバグチケットの存在に否定的です。\n\nバグチケットとは、プロダクトの不具合をトリガーに起票されます。\n一方、スクラム（アジャイル開発全般）においては、DoD（完成の定義）と受入基準を満たしていないチケットはDoneステータスになりません。\nさてこのとき、どんな理由で不具合が発生するのでしょうか？\n\n### 受入基準を満たしていない\n\nまず考えられるのは受入基準を満たしていない状態です。それはまだDoneにはできないチケットです。Doingに戻して受入基準を満たすようにしましょう。（もちろん受入基準の見直しをプロダクトオーナーとするのも手段です。）\n\n### 受入基準にない\n\nリファインメントや受入基準の明文化で共通認識ができていなかったものは、実装されないのでバグチケットになりそうです。\nでも本当にバグチケットって\"色\"が正しいのでしょうか？\n\nその受入基準がなかったということは、プランニング時点ではその価値を見出せていなかったということです。であればしっかり価値を見定めてやるやらを決め、他のチケットと比較して優先順位をつけて、時が来たらやる、というスタンスは他のストーリーやタスクのチケットと変わらないのではないでしょうか？\n\nということで、バグチケットではなく、ストーリーやタスクチケットとして作成するのがよいと思っています。\n\n### リリース後の不具合は？\n\nリリース後の不具合は、チームとしてリリース可能なプロダクトだと自信を持ってリリースしたプロダクトに関する、「受入基準を満たしていない」or「受入基準になかった」挙動と捉えることができます。\nなので、スプリントでのスタンスと同様です。ただし、「受入基準を満たしていない」場合は、もうリリースされちゃってるので最優先で解消すべきチケットになるでしょう。\n\n## なんでそんなこと気にするの？\n\n別にチケットの種別が違うだけのことだから、細かく気にする必要はないのかもしれないです。ただ、このバグチケットというプラクティスがチームのマインドセットを阻害していることもあるかなと思います。例えば、バグチケットのプラクティスがあることで以下のようなことがチームに起こる危険性があります。\n\n- 受入基準を満たしていないチケットが、満たしていない部分だけバグチケット起票され、元のチケットは完了になっている（=リリース可能なプロダクトの状態を壊している）\n- 結果、実際の価値提供以上にベロシティが大きく安定して見える\n- QAエンジニアのテストでなんとかするマインドセットができあがり、リファインメントが疎かになる\n- バグチケットは優先対応になってしまい、適切な優先順位付けができなくなる\n- 結果、POがプロダクトバックログのオーナーシップを持てなくなる\n- バグチケット数などを指標にし始めると、シフトレフトが進まない（シフトレフトの脳みそになりにくい）ことがある\n\nリファインメントで受入基準を明確にできなければ、実装で受入基準を満たせなければ、それは価値提供の足枷になるんだということがバーンダウンチャートやベロシティから見えなくなってしまいます。怖い怖い。\n\n## まとめ\n\nそうはいっても…なとこはいっぱいある極論だよなと思いつつ、文字起こししてみました。\n\n- バグチケットは使わない\n- なぜならそれはUndoneのチケットか新しいストーリー／タスクチケットだから\n- バグチケットの弊害も考えてみよう\n\nということで、お読みいただきありがとうございます！\n"},{"slug":"20230527-what-do-you-want-to-ensure-by-the-performance-test","category":"blog","title":"その性能検証は何を保証したいのか〜体験？システム？〜","tags":["プロダクト開発","品質保証","パフォーマンステスト"],"body":"\nチームメンバーとの性能検証に関して雑談したのが面白かったので書きます。\n\n## その性能検証の対象は体験か、システムか？\n\n検証したい対象がユーザーの体験なのかシステムなのかによって、性能検証のモデルや実施内容、課題解決策も異なります。\n\n体験を検証する場合は、ユーザーの実際の行動を想定し、リアルで大きなデータ量を用いてシステムの性能を検証します。検証結果の評価は、定量的な秒数よりも定性的な待ち時間の感じ方が基準です。TTI（Time To Interactive）を用いることもあります。解決策としても、待ち時間をなくす方法を選択することがあります（レスポンスタイムの削減以外にも、スピナーやメッセージングなどの方法もあります）。\n\n一方、システムを検証する場合は、システムが許容または想定している最大のデータ量で、あらゆる操作について検証を行う必要があります。検証結果は、全体および各責任分界点（ネットワーク、API、DB、レンダリングなど）の実行時間を確認するでしょう。目標値に達していない場合は、ボトルネックの解消のためにリファクタリングが必要です。\n\n## 体験とシステム、優先順位が高いのは？\n\nプロダクトの特性によって異なるかもしれませんが、実際にユーザーが操作して利用するプロダクトの場合、まずは良い体験を保証することが重要です。各責任分界点での性能基準を満たしていることは、「なんか重いな…」と感じているユーザーには関係のないことです。\n\n## 体験とシステムの検証を混同しない\n\n性能検証の設計を進める中で、体験とシステムの検証が混ざってしまうことがよくあります。\n\n体験を検証しようとしているにも関わらず、突然「この入力項目の最大文字数は1000文字なので、すべてのデータを1000文字にしよう！（本当にみんな1000文字で使ってる？）」とか「このテストケースはNGですが、DBチューニングはやりきったしここまで！（待ち時間を感じさせない方法は考えた？）」とか。結果として、勝手に複雑に捉えてしまい八方塞がりになったり、性能検証やパフォーマンスチューニングに余計な時間を費やすこともあります。\n\n都度、現在行っている性能検証が体験とシステムのどちらを対象にしているのかを再確認し、対象と設計や解決策が適合しているか、もう一方の対象に支障をきたしていないかを常に確認することが重要です。\n\n## まとめ\n\n- 性能検証では、「体験」と「システム」の両方が対象となり、それによって「設計」「モデル」「解決策」なども異なります。\n- 両方の対象を同時に検証しようとすると複雑さが増し、コントロールしづらくなります。\n- プロダクトによっては異なるかもしれませんが、実際にユーザーが体験する側に立った検証を優先することが大切です。\n- 性能検証中でも体験とシステムが常に混同しやすいため、対象に立ち戻り、自身の目指す方向との適合性を確認し続けることが大切です。\n\nではでは🖐️"},{"slug":"20230507-you-should-be-prudent-to-introduce-facilitation-shift-system","category":"blog","title":"ファシリテーションの交代制は慎重に","tags":["ファシリテーション","スクラム","スクラムマスター"],"body":"\nスクラムで開発をしているチームで、スクラムイベントのファシリテーションを交代制にしているチームの発表やブログをたまに見かけます。素敵な取り組みだと思う一方で、実際に取り組むかどうかは慎重に考えると良いと思っています。その理由をまとめました。\n\nスクラムやスクラムイベントに限らず、多くの定期的な会議で同じことが言えると考えています。\n\n## なんで慎重になるといいの？\n\n### イベントの質が低下する危険性がある\n\nイベントの質はファシリテーターのスキルに依存することがあります。\n決められたタイムボックスで、ゴールの達成と満足感を得るにはそれなりのスキルと準備と意思が必要になります。順番だからooさんお願いねーだとみんなしんどくなりかねないです。\n\n### イベントの改善サイクルが止まる危険性がある\n\n交代制導入前は、誰か（多くの場合、スクラムマスター）がイベントのオーナーシップを持っているはずです。交代制になると、このオーナーシップも共有されることになります。が、あやふやになるといった方がいい状況になるケースもあります。オーナーシップがなくなれば、そのイベントの改善は望めなくなるかもしれません。チームの成果や成長の足枷になってしまう可能性があります。\n\n### ファシリテーターに興味を持つ人の機会を奪うかもしれない\n\nファシリテーションは専門的なスキルを要するものです。チーム内のMTGなんて、絶好のスキルアップチャンスです。実験・失敗し放題！！\nそれを安易に交代制にしてしまったら、なかなか順番が回ってきません。メンバーの成長の機会を逃してしまうかもしれません。\n\n## じゃあどうしろと？\n\n何を恐れているかって、ファシリテーションを「負荷分散すべきタスク」としてみなされることが怖いです。そうではなく、スキルや経験が必要な特別なコトだし、それを高めたい人とそうでない人がいるし、誰がやるかにやってその1回の質も数回後の質も変わるし、結果チームの成果や成長にも影響があるもの、として捉えて選択してほしいと思っています。\n\nやるなら立候補したメンバーだけとか、その中で何回かに一回ローテーションとか、工夫を加えることで危惧しているデメリットは回避できると思います。\n\n## おわりに\n\nファシリテーションの交代制は慎重に。\n\nP.S. ファシリテーションと進行は違うんや。\n"},{"slug":"20230601-how-to-beat-a-fake-scrum","category":"blog","title":"なんちゃってスクラムの倒し方〜色々なチームを観察したら攻略法が見えてきた","tags":["スクラム","スクラムマスター","プロダクト開発","チーム"],"body":"\n最近「うち、なんちゃってスクラムで…」な相談を受けることが増えました。すると同じアドバイスをすることが多いことに気づき、一つの攻略法かもなーということでまとめておきます。\n\n## なんちゃってスクラムとは？\n\nこのブログで「なんちゃってスクラム」とは、ロールやイベントなどはスクラムに準じているけど何か違和感がありスクラムの恩恵は受けられてない状態のことです。\n「[カーゴカルト](https://dev.appswingby.com/it-keywords/cargo-cult/amp/)」です。\n最近だと『[ゾンビスクラムサバイバルガイド](https://amzn.to/3OlKMEz)』で紹介されている「ゾンビスクラム」も上手な言葉だと思います。\n\n簡単に言えば、スクラムの形や言葉だけ取り入れているが本質を捉えていないチーム活動のことです。\n\n## 攻略法\n\n### 1. スクラムのマインドセットに共感できるかメンバー全員で話し合おう\n\nなんちゃってスクラムに陥るチームに共通することとして、アジャイル開発やスクラムのマインドセットを理解し、チームに根付かせようとしている人の不在が挙げられます。スクラムマスターがいないんです。比喩ではなくていない。こういうチームは意外と多いです。\n\nスクラムの3-5-3（役割/イベント/作成物）の名前は使っているけれど、思考回路はウォーターフォールやオレオレ成功体験。しかもメンバーによってバラバラ。\n\n「スクラムマスターをチームに迎え入れる」は一つの攻略法になりますが、今いないのであれば何かしらの理由があるのでしょう。適任者がいないとか、組織の理解が得られないとか。\n\nそこで攻略法として、「アジャイル開発やスクラムのマインドセットをチームメンバーで共通認識する」をおすすめしています。具体的に何をするかと言えば、以下のドキュメントを読み合わせます。\n\n- [アジャイルソフトウェア開発宣言](https://agilemanifesto.org/iso/ja/manifesto.html)\n- [アジャイル宣言の背後にある原則](https://agilemanifesto.org/iso/ja/principles.html)\n- [スクラムガイド](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)\n\nスクラムガイドは特に前半の部分です。「経験主義とリーン思考」「透明性・検査・適応の三本柱」「確約・集中・公開・尊敬・勇気の価値基準」あたりを見落としていたり流し読みしないようにみんなで読み合わせます。\n\nなぜマインドセットが大切なのか。それはマインドセットと行動が矛盾していると成果に結びつかないからです。\n\n![アイスバーグモデル](./images/iceburg-model.webp)\n画像出典）[【原理原則】学習”だけ”しても上手くいかないのには理由があった！成長マインドセット−Growth Mindset−【アイスバーグモデル】 - MÖWE KAFFEE](https://mowekaffee.com/2018/08/23/ice-berg/)\n\nこちらは『[成長マインドセットー心のブレーキの外し方](https://amzn.to/3UeN7VH)』に登場するアイスバーグモデルです。目に見えない「意識・想い・人生哲学」といったマインドセットを土台とし、その上に「ふるまい・習慣・行動」が乗り、目に見える成果につながっていきます。スクラムの3-5-3は「ふるまい・習慣・行動」にあたるでしょう。マインドセットが整っていなければ、この三角形は崩れてしまい、成果にはつながりません。\n\nスクラムのマインドセットの共通認識をしたら、メンバーひとりひとりがそれに共感しているかを率直に伝え合いましょう。もし共感できないのであれば、スクラム以外の選択肢をとった方がいいかもしれません。会社としてスクラムを推奨していても、今のチームにとってそれが悪手なのであればやめた方がいいです。\n\n### 2. プロダクトバックログに顧客にとっての最小価値を積み上げよう\n\nマインドセットがOKとなったら、次はプロダクトバックログです。スクラムチームの作業の唯一の情報源ですから、相当に重要です。しかし、多くのなんちゃってスクラムチームでは、プロダクトバックログを個人のタスクリストの集合体として捉えており、「チームが何を使っているのかわからない」「このアイテムが終わったらどんなプロダクトになっているのかわからない」という事態に陥ります。\n\nここでの攻略法は、プロダクトバックログに顧客にとっての最小価値の積み上げよう、です。具体的には、INVESTなストーリーをプロダクトバックログアイテムにする、ということです。\n\nINVESTとは良いストーリーの条件、「Independent（独立している）」「Negotiable（交渉できる）」「Valuable（価値がある）」「Estimable（見積れる）」「Small（小さい）」「Testable（検証できる）」の頭文字をとったものです。\n\n[What does INVEST Stand For? | Agile Alliance](https://www.agilealliance.org/glossary/invest/)\n\n特にここでは、SmallでValuableでTestableなストーリーをまず目指します。顧客価値に注目し、スプリント中に完成させることが可能なものにするためです。\n\n大抵ここでフロントエンドとバックエンドでアイテムを分けないとスプリント中にDoneにできなくならないか？と聞かれます。それでOKです！\n\nINVESTなストーリーを管理することで、チームに「顧客価値」の理解が生まれます。そして、今までのやり方ではスプリント単位に顧客価値を生み出せないことが明らかになってしまいます。今までの開発しやすいタスクベースのプロダクトバックログでは安定したベロシティを出せていても、ストーリーベースのプロダクトバックログにするだけで仕掛かり中が増えたりします。それが今のチームの状態です。まずはそれを知ることからです。これからチームでなんとかしてきましょう。\n\nストーリーベースのプロダクトバックログがもたらす効果はまだあります。それはいつでもリリース可能なプロダクトを維持できることです。タスクベースでは、このアイテムは終わったけどあっちのアイテムも終わらないとリリースはできない、という状況がよく起こります。結果、最初に計画した全てのタスクが終わらないとリリースができない状態が常態化し、アジリティを失ってしまいます。計画駆動の計画なし版みたいな状態です（やることは最初にFix！いつ終わるかわからないけど着手！）。ストーリーベースのプロダクトバックログは、「価値を一つずつ積み上げる」ことを教えてくれます。結果として、チームにアジリティをもたらしてくれます。\n\n### 3. スプリントレビューはスプリントゴールのデモに集中しよう\n\n2の準備が整えば、スプリントゴールの作成とそれにフォーカスしたスプリントレビューが次の攻略ステップです。\n\nなんちゃってスクラムチームの多くがスプリントレビューを、一つ一つのプロダクトバックログアイテムをプロダクトオーナー（PO）に受入してもらうイベントと捉えていました。\n\nこれの良くないところは「スプリントで生み出した価値」にフォーカスできていないことです。一つ一つの小さな価値はとても大切ですが、スプリントレビューで披露してフィードバックが欲しいのは、もっと大きな価値の集合体です。つまり、スプリントゴールです。\n\nまず、スプリントゴールをスプリントプランニングで作りましょう。今回のスプリントのコミットメントをまとめると、どんな価値が生まれそうですか？\n\nスプリントゴールを作れたら、スプリントレビューもそのスプリントゴールに集中します。プロダクトバックログアイテムの確認はもはや不要です。DoDと受入基準の認識合わせができていれば、開発者の責任でDoneにしてしまいましょう。スプリントレビューはスプリントゴールを実現できたことをデモしてフィードバックを得ましょう。スプリントゴールを達成するに複数のプロダクトバックログアイテムをDoneにしてきたはずです。それを一つ二つのシナリオにまとめてデモをするのです。\n\n難しいと感じるかもしれませんが、勇気を持ってこれを推し進めることでかなりの効率化・効果化が期待できます。スプリントゴールを作り意識することでより顧客価値にフォーカスすることができ、チーム内外からのフィードバックも細かい指摘ではなく大きな価値に対する情報共有や意見表明に変わっていくでしょう。\n\n余談ですが、POが一つ一つのアイテムの受入確認するスタンスはかなりよろしくないと僕は考えています。POが開発者の作り込む品質に必要以上に関与しようとしているか、開発者が品質の責任をPOに取ってもらおうとしている可能性があるからです。悪意ではなく、それが本人たちにとって「普通」である危険性があります。要注意です。\n\n### 4. これらをあなたが推し進めよう\n\nではこのゲームを進める人は誰でしょう？\n\n特に、スクラムチームは自己組織化・自己管理化が求められることを知ってしまっている人は、どうやって一人一人に行動変容してもらうか、どうすればサーバントリーダーシップを発揮できるのかと頭を悩ませます。\n\n**「ま、理想は理想として、まず動き出さなきゃ始まらないんで、気づいちゃったあなたが引っ張っちゃいましょう！」**\n\n違和感に気づき、他人に相談するって行動まで取っちゃってるんですから、誰よりもあなたが適任です。最終的には自己組織化・自己管理化に近づいていきたいとは思いますが、まずは良き方向に進み始めることが肝心です。自己組織化・自己管理化の話も、最初の価値観のところで共通認識だけしておいて、まずは進みましょう。\n\n## まとめ\n\n長々と書きましたが、なんちゃってスクラムの攻略法のポイントは以下にあるのではないかというお話でした。\n\n- メンバー全員でマインドセットを理解・共感\n- プロダクトバックログを顧客価値の最小単位の積み上げ\n- スプリントレビューはスプリントゴールをデモ\n- まずは気づいたあなたが引っ張っちゃえ\n\nではでは🖐️\n"},{"slug":"20230607-wrap-the-team-in-a-happy-aura-with-monthly-positive-reflection","category":"blog","title":"マンスリーポジティブふりかえりでチームをハッピーオーラで包み込む","tags":["チーム","スクラムマスター","ふりかえり"],"body":"\nチームで「マンスリーポジティブふりかえり」を始めました。やってみたらマジ最高なイベントだったので、ここにまとめます。\n\n## マンスリーポジティブふりかえりとは？\n\nマンスリーポジティブふりかえりとは、月に一度、しっかり時間をとり、直近1ヶ月のことを思い出しながら「Fun/Done/Learn」と「感謝/称賛/応援」のふりかえりを実施するチームイベントです。もっとセンスのある名前つけたいです。\n\n![「Fun/Done/Learn」と「感謝/称賛/応援」](./images/monthly-positive-reflection.webp)\n\n## Fun/Done/Learn\n\nFun（楽しかったこと）、Done（完了したこと）、Learn（学びになったこと）を書き出すふりかえり手法です。3つの円を交差するように描き、ふりかえった事柄を該当するエリアにマッピングして可視化します。例えば楽しかったし学びになったことは、FunとLearnの円が重なりDoneの円には重ならないエリアにマッピングします。詳しくは↓をご覧ください。\n\n[ファン・ダン・ラーン(FDL)ふりかえりボード #スクラム - Qiita](https://qiita.com/yattom/items/90ac533d993d3a2d2d0f)\n\n### Fun/Done/Learnを選んだ理由\n\n今回のマンスリーポジティブふりかえりはあるチームメンバーの「私たちはすごいスピードで成長していると思うんだけど、その成長実感を感じられていない人もいそう😇」という言葉が発端でした。\n\nチームの活動のポジティブ面に超集中できるふりかえりがしたい。こういうときはFun/Done/Learnが最適だと刷り込まれていたので迷うことなく選択しました。\n\n## 感謝/称賛/応援\n\nこちらは一応オリジナルかな。要素としては[Kudo Cards](https://management30.com/practice/kudo-cards/)やウィンセッション、レコグニションなど色々なものを参考にして、ChtatGPTに壁打ちを協力してもらい、この3つのワードを選びました。\n\nやり方はほかのチームメンバーに感謝したいこと、賞賛したいこと、応援したいことを書き出し、Fun/Done/Learnと同じく、該当するエリアにマッピングします。こちらも感謝したいし賞賛もしたいといった重なりがあります。\n\n### 感謝/賞賛/応援を選んだ理由\n\nFun/Done/Learnはチームのポジティブな面を認識するために選びましたが、感謝/賞賛/応援はチームメンバーに対するポジティブな感情を認識するために選びました。そしてそれを相手に伝えることで、双方の幸福感を高めることが目的です。ポジティブな感情は伝える側にも伝えられる側にも良い影響があります。関係構築にも繋がりますよね。\n\n## 進め方\n\n### 準備\n\nmiroを使ってやったので、あらかじめFun/Done/Learnと感謝/賞賛/応援の枠を作っておきました。楽しい気持ちになるようにステッカーとかをペタペタ貼りました📍\n\n### イベント\n\nイベントは30分で行いました。\n\n1. ［5分］イベントとふりかえり手法の紹介\n1. ［7分］Fun/Done/Learnの書き出し・張り出し\n1. ［7分］感謝/賞賛/応援の書き出し・張り出し\n1. ［7分］眺めながら雑談\n1. ［2分］イベントの感想・フィードバック\n\nあくまでポジティブな事柄や感情を認識することに重きを置いていたので、ネクストアクションをつくるといったことは行なっていません。個々がポジティブになって気持ちよくなれればOK！という気持ちで、固くならないように、時間的ゆとりも感じてもらえるように、ゆる〜くファシリテーションできるように設計しました。\n\n## まとめ\n\nチームでの新たな取り組み「マンスリーポジティブふりかえり」について紹介しました。やってみた感想は最高、メンバーからの評判も上々、miroを見返してやっぱり最高な取り組みになったので、継続してみようと思っています。\n\n「成長してるはずだけど実感がない」とか、「いつも課題にばかりに気を取られて疲れてる」とか、そんなときに効果を発揮するイベントになると思います。そんな悩みをお持ちの方の参考になったら嬉しいです☺️"},{"slug":"20230614-sprint-goal-and-sprint-scope","category":"blog","title":"スプリントゴールとスプリントスコープ","tags":["スクラム","コミットメント","スプリントゴール","スプリントスコープ","スクラムマスター"],"body":"\n今日はスプリントゴールとスプリントスコープについて。ちょうどチームの中でも認識が合ってない！という話になったので、僕の考えを明文化してきます。\n\n## 何はともあれ言葉の定義\n\n### スプリントゴール：このスプリントで必ず生み出したい価値を一言で表したもの\n\nスクラムガイド2020におけるスプリントゴールの定義はこちらです。\n\n> スプリントゴールはスプリントの唯⼀の⽬的である。スプリントゴールは開発者が確約するものだが、スプリントゴールを達成するために必要となる作業に対しては柔軟性をもたらす。スプリントゴールはまた、⼀貫性と集中を⽣み出し、スクラムチームに⼀致団結した作業を促すものでもある。\n\nfrom [スクラムガイド2020](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)\n\nスプリントゴールは、スプリントバックログをタスク一覧から価値創出の布石に進化させてくれます。良いスプリントゴールは開発者をエンパワーし、ステークホルダーをわくわくさせます。\n\nスプリントゴールは、スプリントに対して一つで、端的な文章になります。\n\n### スプリントスコープは、開発者がコミットメントしたスプリントで完成させようとしているプロダクトバックログアイテムたち\n\nスプリントスコープはスクラムガイド2020には定義されていません。スプリントバックログについては以下の記載があります。\n\n> スプリントバックログは、スプリントゴール（なぜ）、スプリント向けに選択されたいくつかのプロダクトバックログアイテム（何を）、およびインクリメントを届けるための実⾏可能な計画（どのように）で構成される。\n\nfrom [スクラムガイド2020](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)\n\nスプリントスコープは「スプリント向けに選択されたいくつかのプロダクトバックログアイテム」のことです。僕は「コミットメント」と呼ぶこともあります（スクラムガイド2020でそれぞれの作成物に対するコミットメントが定義されているので、言葉を分けるためにこのブログではスプリントスコープを使います）。\n\nスプリントスコープをコミットメントするのは開発者です。プロダクトオーナーやスクラムマスター、ステークホルダーではありません。\n\nこれはとても大切なことで、プロダクト開発の中心は開発者だと僕は考えています。スプリントスコープはストレッチ目標でなければなりません。他者から与えられた達成し得ない目標ではやる気を削がれるだけです。ゆるい目標は自分たちの成長を止めるだけです。良いスプリントスコープは、プロダクトの価値を最大限に高め、チームの成長を促進します。開発者が自分たちで考え、コミットメントすることに意義があります。\n\nスプリントスコープはプロダクトバックログアイテムの見積もりとベロシティを参考に作成します。これによってオーバーコミットメントとゆるい目標設定を防ぐことができ、健全な集中とチームの成長促進をもたらしてくれます。\n\n## スプリントゴール ⊂ スプリントスコープ\n\nスプリントゴールとスプリントスコープの関係性はこうなるのかなーと思っています。\n\nスプリントゴールを達成できないスプリントスコープはスプリントゴールに向けて何も計画できてないのでやめましょう。笑\n\nスプリントゴールとスプリントスコープはイコールではないのか。ゆとりやストレッチ、ゴールへの集中をもたらすためには、一致ではなくほぼ一致だけどスプリントスコープにしかないものもある関係性がよいと考えています。\n\n## スプリントゴールだけ達成できればいいのか\n\nで、結論としては「ダメ」だと思っています。\n\nまず、スプリントゴールは達成しましょう。これがこのスプリントの価値ですし、価値提供できなければ自分たちが萎えちゃいますし、ステークホルダーの期待値もここですもんね。\n\nじゃあスプリントスコープは何のためにあるのかって、次のスプリントでより大きな価値を提供するための布石だったり、チームがもっと価値を生み出せるようになるための目標だったりします。\n\nスプリントゴールは期待値。これを元にして動いてくれている人がいるので、ビジネス的なコミットメントをしたいものです。\n\nスプリントスコープはストレッチ。自分たちがもっとすごいチームになるために、俺たちすごいじゃん！って思うために、スクラム的なコミットメントをしていきたいものです。\n\n## まとめ\n\nスプリントゴールは達成しまくって信頼されてこう。<br />\nスプリントスコープは達成しまくってチームで成長しよう。\n"},{"slug":"20230827-reflection-on-participating-in-scrum-fest-sendai-2023","category":"blog","title":"Scrum Fest Sendai 2023 参加したのでふりかえる。","tags":["チーム","マインドセット","スクラムマスター","スクラム","カンファレンス","Scrum Fest","Scrum Fest Sendai","登壇"],"body":"\n2023.08.25-26で開催された[Scrum Fest Sendai 2023](https://www.scrumfestsendai.org/)に参加してきたので、ふりかえりブログを書きます。今回は初めてProposalをacceptいただき、登壇もさせていただきました。\n\n## 登壇について\nまずは登壇についてふりかえり。Proposalやスライドはこちらです。\n\n[Proposal](https://confengine.com/conferences/scrum-fest-sendai-2023/proposal/18656)\n\n<script async class=\"docswell-embed\" src=\"https://www.docswell.com/assets/libs/docswell-embed/docswell-embed.min.js\" data-src=\"https://www.docswell.com/slide/Z8GNNY/embed\" data-aspect=\"0.5625\"></script><div class=\"docswell-link\"><a href=\"https://www.docswell.com/s/at_946/Z8GNNY-2023-08-26-093154\">価値提供を続けるチームはマインドセットに支えられていた by @at_946</a></div>\n\nProposalの時点では意気揚々としていたのに、いざスライドを作り始めると「この話誰が聴きたいんや…」となって辛かったです…\n発表も反省点は多かったです。早口だし、伝えたいことが後半に寄っちゃってたし、「思います」多様してたし、会場を盛り上げられなかった気がするし。20分で駆け抜けても良かったなー。\nただ、実体験して伝えたかったことは伝えられました。それにリアル登壇なんて数年前の自分なら考えられなかった。その勇気をまず讃えてあげてます。\n\n会場やdiscordでもご質問いただけたし、面白かったって声かけてくださる方もいて、感謝です🥲\n\n登壇は経験の体系化にとてもいいですね。だいたいのことは体系化されていたりするけれど、日々の忙しない仕事の中で日和見的にやっていてなんかうまくいくこととかもあると思うんですよ。今回の発表だと、インナーブランディングは知らなくて、この発表に向けて僕がやったことって実は体系化されてたりするかな？と調べて知ることができて。改めて本を読み直したり。定期的にちゃんと体系化したり型に当てはまるかふりかえるってことは、学びにも自己効力感にもつながりました。\n\n## 他のセッションについて\n\nキーノートからクロージングセッションまでメイン会場でセッションに参加してました。OSTも興味あったけど、登壇もあってソワソワだったのでメイン一本で。\n\n藤村さんのキーノート、とても良かったです。\n\n<script async class=\"docswell-embed\" src=\"https://www.docswell.com/assets/libs/docswell-embed/docswell-embed.min.js\" data-src=\"https://www.docswell.com/slide/5DEM99/embed\" data-aspect=\"0.5625\"></script><div class=\"docswell-link\"><a href=\"https://www.docswell.com/s/aratafuji/5DEM99-2023-08-27-101619\">厄介な現実に向かって一歩踏み出そう by @aratafuji</a></div>\n\n- 人から見たら厄介でも自分的にはそうでない（=得意）で戦う\n- ストレッチゾーンに身を置いてコンフォートゾーンに変えていく\n- 最初にコンセプトを合わせる\n- MVP / Must / Additional\n- 「いい話」で終わらせずすぐに「自分だと」を想像して「行動」を決める\n- 転職の聖地　岡本太郎記念館\n\nいい話で終わらせない、はその後のセッションで試してみました。自分だとどうかな、自分のいるチームだとどうかな。学び方を教えられているかな？より広範な人を巻き込めているかな？こんだけの熱量を持てているかな？悩み疲れて今気持ち悪いです🤮今僕はこれがしたい！の確固とした軸がないなーと思い知らされました。\n\n## ネットワーキング\n\n僕が最もしたいと思っている僕の最も苦手なものです。いやー、辛っ！笑\n\n立食始まった瞬間もう固まりましたもんね。多分最も早く椅子に座った人間じゃないだろうか。\n\nでももう大人ですからね。リアル開催なんだからネットワーキングが本番だろ！\n\nということで勇気を出して、いくつかのサークルではじめましてをさせていただきました。X（Twitter）で相互フォローの人も多くて、「あ、見たことあります！」って言ってもらえることもあり、ありがとう青い鳥でした。\n\n次は二次会に流れたい。なんか流れわからなくて帰っちゃったので、次は流れたい。\n\nあ、クラフトビールはめちゃうまでした。\n\n## 発信について\n\n今回びっくりしたのですが、割とXのポスト（旧Twitterのツイート）を見かけていただいているようでした。そして、自分も割と参加者や運営スタッフさんのアカウント見てた。笑\n\n拙い発信でも、誰かに届いたり、何かの一文が影響を与えることがあります。ポジティブにです。今後も公共の福祉に反しないように発信を続けたいと感じました。\n\n## 最後に\n\nセッションを聴いてくださった方々、ネットワーキング含めてお話ししてくださった方々、そしてなにより運営のみなさま！ほんとうにありがとうございました！！\n悔しいところはまだまだあったので、またいつかリベンジ。\n\n"},{"slug":"20230920-what-is-normal-for-you-is-amazing-for-someone-else","category":"blog","title":"あなたの当たり前は誰かにとってのすごい","body":"\n自分がやっていることやできることを、「誰でもできること」と捉えてしまうことはよくあることかと思います。少なくとも僕はそうでした。\n\nそりゃね、大抵のことはやればできるんだと思うんですよ。人間ってすごいんで。でもそれを行動に移せている時点でもうすごいんですよ。他の人には真似できなかったりするわけです。\n\n今僕はこうやって駄文をインターネットに公開しているわけですが、それすらも誰かから見たら偉業なわけですね。恥ずかしいことですよ、ほんと。\n\n[世界一やさしい「やりたいこと」の見つけ方　人生のモヤモヤから解放される自己理解メソッド](https://amzn.to/49dJ5Rp)\n\nこの本の考え方が好きなので紹介します。\n\n> 得意なこと\n>\n> ＝成果を出すために使える無意識な思考・感情・行動パターン\n\nあなたができることを当たり前に感じるのは、それを無意識に行えるからです。きっと他の人からすごいねと言われることは、何がすごいのかわからないでしょう。無意識にできるので。\n\nでも他の誰かにとってはそうではありません。\n\nだからなんだというわけではありませんが、自分に得意なことがあることを認めて、他者にも得意なこと・苦手なことがあることを認めて、尊敬し合っていきましょうってことで。\n"},{"slug":"20231001-made-a-lightning-talk-at-the-XP-Matsuri","category":"blog","title":"XP祭りのLT会でプレゼンしてきました","tags":["モブプロ","チーム","カンファレンス","XP祭り","登壇"],"body":"\n2023年09月30日（土）、[XP祭り2023](https://xpjug.com/xp2023/)に参加してきました。今回はLT大会で登壇もしてきました。\n\n## LTしてきました👏\n\n<script async class=\"docswell-embed\" src=\"https://www.docswell.com/assets/libs/docswell-embed/docswell-embed.min.js\" data-src=\"https://www.docswell.com/slide/KEN93E/embed\" data-aspect=\"0.5625\"></script><div class=\"docswell-link\"><a href=\"https://www.docswell.com/s/at_946/KEN93E-2023-09-30-160529\">とりあえずモブプロしてみたら時間が溶けた by @at_946</a></div>\n\n軽い気持ちで登録しちゃってたんですが、これ終わったらクロージングで他にセッションのない時間という、一大イベントの枠でした☺️\n発表5分と準備20秒を淡々とタイマーが刻む中、順番が来たらZoomを操作してレッツゴーというスタイル。これは楽しい。\n\n## なんでLTしたの？\n\nなんか発表したりしたいけど、20分45分はきつい…ってときにconnpassのお知らせを見て「これだ！」と登録させてもらいました。\nなんか発表したいってのは、自分のプレゼンスあげたいなとか、自己肯定感あげたいなとか、そんな感じです。崇高な何かはあまりないです。誰かの何かになったら儲けもの、くらいで、自分を褒めてあげるためにアウトプットしたかったってのが強かったですね。\n\nスクフェス仙台で45分セッションをさせてもらっていたので、連続で長いの考えるのはしんどい…というのが、LTが輝いて見えたポイントでもあります。長く話すと指数関数的に準備の時間もドキドキも逃げたい気持ちも増しますね…\n\n## LTで伝えたかったことは？\n\n今回はモブプロの話をしましたが、伝えたかったことはプラクティスは「Why/What/How」をチームで「共有」してないと失敗するよね〜ってことです。特に「Whyの共有」ができてないことが多いですよね。やるって決まってるからやるんです、みたいな。それの何がまずいかって、改善も止めることもできなくなってしまうことかなと思っています。なんでやっているかわからないものをよりよくするなんてできないし、止めることはもっとできませんよね。\n\nちょうど良く失敗できてたので、お話ししました。笑\n\n## LTしてどうだった？\n\n楽しかったですね〜。\n比較的ラフに話ができました。他の方々もそれぞれの色が出ててとてもよかったです。もっと色出していっても良かったかな？\n\n発見としては、今回練習で時間オーバーなのでかなり早口で話してしまったんです。\nでもDiscordで、「早口なのに聞き取りやすかった」とか「楽しそうな語り口」とか言っていただけて、自分ってそうなんだーって気づきがありました。これ、嬉しかったです。普段から意識してることなので！特に楽しそうな語り口！\n\nあとはスクフェス仙台に続き、チームの朝のLT会の話に食いついてくださる方もいました。これはまたどこかで、ブログ書きたいですね。登壇もできたらいいな。\n\n## さいごに\n\nLT楽しかった！なんか話してみたいけどぐぬぬってときにはLT最高ですね。\nきっと誰かの何かの役に立つはず。またどこかで。\n"},{"slug":"20231122-preparation-for-facilitation","category":"blog","title":"ファシリテーションするときの心構え","tags":["ファシリテーション","スクラムマスター","チーム"],"body":"\n知人に「ファシリテーションってどうやるんですか？」と聞かれて、「ブログにまとめてみますね」と言ってからもうどれくらい経ったでしょうか。さすがに良くないと思いましたので、書きます。笑\n\nきっとスキル的なことを聞かれたのかなと思いますが、それは考え方や原則の上に成り立つものなので、心構えでも振り返って答えたことにします。\n\n## この人たちが出した結論が最高\n\n僕が一番大事にしている原則はこれかなーと想います。簡単に言えば参加者を信じるってことです。\n\nファシリテーションが必要なミーティングというのはなぜ開かれるのでしょうか。それは多角的な視点で議論することで良い意思決定に繋げるためです。逆にそこに過不足が存在するなら結論は出にくいかもしれません。そういった過不足が存在しないかをミーティング前から気にするのもファシリテーターの役割の一つでしょう。\n\nあとは、あまりにもヤバくない限り、どんな方向に向かおうが基本的に信じます。\n\n## 情報さえ出揃えばこの人たちは結論を出せる\n\n人間が結論を出せない主な理由は情報が欠けているからです。欲しいものがあって自分が購入できる各場所での売値が全てわかっていればどこで買うか決めるのは容易ですが、一つわかっていなければここで買って良いかどうか悩むし結論を出せないでしょう。\n\nなので、ミーティング中は情報や意見を出してもらうことに集中します。それが出てきさえすれば、この人たちは結論を出せると信じます。むしろ、この人たちが結論を出すのに足りていない情報や意見をこの場に出現させることで支援をするという気持ちです。\n\n「あ、ここであの人の視点からの意見がもらえると場が活性化されそうだな」とか、「今あの人の意見を聞きたそうだな」「あの人意見出したそうだな」という様子を観察して、行動に移します。「それに関連する情報あの人持ってるかも？」「今あの人が言ったこと、ちゃんと理解できてない人がいるかも」、そんな様子も敏感に察知できるよう集中します。なんと切り出すかはスキルが必要かもしれませんが、まずは察知することに集中することが重要です。\n\n情報や意見を出してもらうためには、場の雰囲気作りも欠かせません。そのために、チェックインなどのスキルがあります。\n\n## 実行責任を持つ人の感情を大事にする\n\n意思決定が行われるときに最も気にかけていることが実行責任者がポジティブな感情でいるか、ということです。どんなに客観的に見て優れた決定でも、それを実行する人が乗り気でなければおおよそ失敗します。だってやりたくないんだもん。できる限り、ポジティブな気持ちで臨んでもらえるように感情を伝えてもらうように仕掛けます。\n\nこれはXPの原則「責任の引き受け」から来ています。僕はこれが大好きです。責任は渡すことはできず引き受けることしかできません。実行責任者も納得した上の結論でなければ、良い結論とは言えないです。\n\nネガティブな感情を伝えることは難しいことです。かなり気を遣いますが、大事なところなので丁寧に対応します。\n\n## 減らす or 増やさない にフォーカスしてもらう\n\n大抵の人は仕事を増やします。ミーティングの結論の大半は、何か新しいことを増やすことになります。自分の仕事を増やすミーティングなんて、誰もやりたくなくなっちゃいますよね。笑\n\nですので、ファシリテーションをするときは「減らす」または「増やさない」ことにも意識を向けてもらえるように頑張ります。「純増だと首絞まっちゃいますし代わりに何かやめてみますか？」とか「これ増やすだけの価値がありそうですかね」とか。僕がリーンシンキング推しなのでってのはありますが、効果的な問いかけかと思います。\n\n## まとめ\n\n普段ファシリテーションするときに意識していることをまとめてみました。もっと色々考えてるかもしれないし、そんなことないかもしれません。笑\n"},{"slug":"20231002-a-talk-of-our-morning-study-session-which-has-been-continued-for-more-than–half-a-year","category":"blog","title":"チームで半年以上続けている朝の勉強会の話","tags":["チーム","スクラムマスター","プロダクト開発"],"body":"\nちょっと前までいたチームでは、朝の勉強会を半年以上継続していました。\nスクフェス仙台、XP祭りと、本編以外の部分で興味を持っていただいた方もいらっしゃったので、ブログにまとめようと思います！\n\n## 朝の勉強会ってなに？\n\n毎朝10分1人のチームメンバーが気になったブログやスライドを他のメンバーに共有する会です。Slackのハドルで実施しており、発表者は画面共有しながら発表し、発表者以外の参加者はスレッドでのコメントやリアクションなどで参加します。\n\n開始5分前にbotが発表者を募集するので、「今日話したいやつあるわ〜」ってメンバーが早い者勝ちで手を挙げるシステムです。\n\nテーマやトピックは何も制限はないです。自分のブログを共有してもいいですし、どっかの誰かのブログやスライドを共有してもOKです。僕は個人開発のプロダクトの紹介をしてアクセス数を稼ぐなどもしました。\n\n## なぜ始めたの？\n\nモチベーションは大きく二つです。\n\n### チームに学習の文化を根付かせるため\n\nプロダクト開発は学ぶべきものが多く、どんどん増えていますよね。その波に乗るためには、自然と学習する文化が必要だと思っており、しかも誰か1人ではなくチーム全体にその文化が必要だと僕は考えています。朝の勉強会は聞いているだけでも学習になりますし、何か勉強会で話すことないかなとアンテナを張る意識を持つだけでも学習のハードルが下がっていきます。\n\n### メンバー間、特に職能間の相互理解の促進\n\nチームはただでさえ相互理解が重要かつ困難ですが、プロダクトチームは得意な領域が異なるメンバーとコラボしてかなければならないのでなおのこと難しいです。その難しさの正体の一つに、自分とは異なる職能のメンバーの気にすることや作業がわからないというものがあると思っています。\n\n朝の勉強会では、それぞれのメンバーがそれぞれ気になったトピックが共有されます。それはそのメンバー（職能）が最近気にしていることや知っておいてほしいことです。そういうことを知れるだけでも、何もわからない状態から一歩近づくことができます。\n\n## 継続のための仕掛け\n\nこういった企画を継続することは、さほど簡単ではありません。なので、仕掛けが必要です。僕の仕掛けは総じて「**ハードルを下げに下げる**」ということです。いくつか紹介します。\n\n### 参加自由\n\nまずこの会は参加自由です。参加したいときに参加する。参加頻度が高い人、低い人のばらつきも実際にありますが、気にしていません。自発的に参加している、という感覚を持ってもらうことで効果を倍増できると考えているので、強制感が出ないように注意しています。\n\n### 発表自由\n\n同じような話で発表も自由です。発表もしたい人がしたいからしてるって状況を作っています。でなければ、毎回参加だけの人が後ろめたさを感じて参加控えちゃうとかもある気がするので。\n\nただ、ラーニングピラミッドもあるので、発表した方が自分の学習効果は高いです。そのことは伝えていて、重い腰を上げてもらうような働きかけはしています。\n\n![ラーニングピラミッド](./images/learning-pyramid.webp)\n\n画像出典：[平均学習定着率が向上する「ラーニングピラミッド」とは？ - キャリア教育ラボ](https://career-ed-lab.mynavi.jp/career-column/707/#:~:text=%E5%B9%B3%E5%9D%87%E5%AD%A6%E7%BF%92%E5%AE%9A%E7%9D%80%E7%8E%87%E3%81%8C%E5%90%91%E4%B8%8A%E3%81%99%E3%82%8B%E3%80%8C%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%94%E3%83%A9%E3%83%9F%E3%83%83%E3%83%89%E3%80%8D%E3%81%A8%E3%81%AF%EF%BC%9F%201%20%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%94%E3%83%A9%E3%83%9F%E3%83%83%E3%83%89%E3%81%A8%E3%81%AF%202%20%E5%AE%9A%E7%9D%80%E7%8E%87%E5%90%91%E4%B8%8A%E3%81%AE%E3%82%AB%E3%82%AE%E3%81%AF%E3%80%81%E8%83%BD%E5%8B%95%E7%9A%84%E3%81%AA%E5%AD%A6%E7%BF%92,3%20%E3%82%AB%E3%82%AF%E3%83%86%E3%83%AB%E3%83%91%E3%83%BC%E3%83%86%E3%82%A3%E3%83%BC%E5%8A%B9%E6%9E%9C%E3%81%A8%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%94%E3%83%A9%E3%83%9F%E3%83%83%E3%83%89%204%20%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%94%E3%83%A9%E3%83%9F%E3%83%83%E3%83%89%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E5%AD%A6%E7%BF%92%E6%B3%95%E4%BA%8B%E4%BE%8B%205%20%E3%81%BE%E3%81%A8%E3%82%81)\n\n### 準備不要\n\nここはこだわったところで、他人のブログやスライドを使うことを推奨しています。準備あるとハードル高いじゃないですか。せっかく先人たちが素晴らしいアウトプットをインターネットに公開しているのだから…\n\n発表練習とかも不要にしていて、10分で話しきれなかったら「あとはみんな見ておいて！」みたいな終わり方も全然OKな雰囲気作りをしています（主に自分がその手を使うことで。ごめんなさい。）。タイトル気になったからまだ読んでないけどこの時間でみんなで見ましょう、もアリです。\n\n### まずは自分が踊る、いつでも踊る準備をしておく\n\n継続させるためには継続させる必要があります。毎朝勉強会を開催するためには、誰かが発表してくれなければなりません。定着するまでは、自分がいつでも発表できる準備を整えておき、何よりも毎日開催されることを優先していました。特に始めたばかりの頃は、みんな発表しにくいもので、様子を伺っていたり自信がなかったりします。そんな時はすかさず発表していました。やがて2人目3人目が現れてきますので、それまで頑張る！\n\nまた自分が発表すると、この企画の意図や雰囲気なども作りやすいです。ハードルも下げやすいです。こんなもんでもいいのかーと思ってもらえればこっちのもの。いや、たまにはさすがタメになるって思われるような会も用意するけど！\n\n発表しないからと言って踊れないわけではありません。コメントやリアクションで盛り上げることも忘れてはいけません。みんなに楽しんでもらうことが大事です。特に発表してくれているメンバーには最大限の感謝と尊敬を込めて、テキトーな盛り上げコメントを送り続けています。\n\n### さいごに\n\n朝の勉強会、良いです。学習の文化を作っていけますし、メンバー間の相互理解も促せます。もちろん、チームのスキルアップにも寄与します！\n\n継続には少し仕掛けが必要かもしれませんが、流れができればチームの大きな武器になるなーと実感しました。どっちにしろ学習を続けないとヤバい業界らしいので、どうせならみんなで楽しくできる方法を選択していきたいですね。\n"},{"slug":"20231123-read-the-book-Kokoro","category":"blog","title":"自律・自己組織化・自己管理は利他の心を以てすれば良い結果を生みやすそうです","tags":["読書","自己組織化"],"body":"\n稲盛和夫さんの『心。』を読みました。\n\n[心。](https://amzn.to/47X8aPA)\n\n稲盛さんの経営哲学、いや、人生哲学が垣間見える大変面白い本でした。\n\nこの本の中で「利他」という言葉がたびたび出てきます。詳しくはぜひ本を読んでいただきたいのですが、この本を読んで「利他」とは「自律」「自己組織化」「自己管理」とつながるものなのではないかと思い、その考えをまとめるべくブログを書いています。\n\n僕もスクラムマスターの端くれ、メンバーの自律やチームの自己組織化・自己管理には興味があります。大事なのは利他の心なのかもしれない。この気づきを明文化してみたいと思います。\n\n## 自律と自己組織化・自己管理\n\n例えばgoo辞書には、以下のように載っています。\n\n> 他からの支配・制約などを受けずに、自分自身で立てた規範に従って行動すること。\n> from [goo辞書](https://dictionary.goo.ne.jp/word/%E8%87%AA%E5%BE%8B/)\n\n対義語は「他律」であり、「自らの意志によらず、他からの命令、強制によって行動すること。」という意味だそうです。\n\n「自律」は個人に使う言葉ですが、これをチームに向けて使えば「自己組織化」「自己管理」でしょう。\n\n## 自分自身で立てた規範が自律をよくないものにする可能性がある\n\n問題はこの「自分自身で立てた規範」をどのように立てるのか、であるように感じます。この規範が周囲にとって好ましくないものであれば、自律している状態ではあるものの全体として好ましくない状態が生まれてしまいます。\n\nRSGT2023でエセ自己組織化に関する発表がありましたが、まさに自分たちで立てた規範自体に欠陥がある状態なのだろうと思いました。\n\n<script defer class=\"speakerdeck-embed\" data-slide=\"17\" data-id=\"26cd52175b5d48ca9f23dacec2fbbe90\" data-ratio=\"1.7777777777777777\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n## 利他の心を以て規範を見つける\n\n「利他」は『心。』の中で次のように述べられています。\n\n> なかでも人がもちうる、もっとも崇高で美しい心──それは、他者を思いやるやさしい心、ときに自らを犠牲にしても他のために尽くそうと願う心です。そんな心のありようを、仏教の言葉で「利他」といいます。\n\n> そもそも、「利他」という言葉の意味は実にシンプルです。「他を利する」──すなわち「自分のため」は後まわしにして「他人のため」を優先する。隣人のために何ができるかを考え、自分がなしうるかぎりのやさしい行為をしてあげる。たったそれだけのことで、けっして大仰なことではないのです。\n\n自分自身の立てた規範が周囲を困らせるという問題は、その規範が利他の心を以て立てられていないからなのではないかと気づきました。自分たちはそれがしたいと思っているから、アジャイル開発とはそういうもののはずだから、それをやっている自分たちはすごいと思えるし満足感も得られそうだから。利己の心で立てた規範は、周囲との温度差を産んでしまうかもしれないですね。\n\n利他の心を以て、つまり他者のためを思って立てた規範であれば、こういった問題は起こらないのでしょう。\n\n## 他は多\n\n利他の他を考えると、様々な他があることに気づきます。\n\nまず、「他」とは「自」ではない部分です。つまり、「自」をどこに据えるかによって、「他」もまた変化します。そしてその「他」は一つではなく複数であることに気づくでしょう。\n\n「自」を「自分」と捉えれば、チームのメンバーや自分のマネージャー、仕事で関わる人、会社、家族…などが「他」として浮かび上がるのではないでしょうか。\n「自」を「自チーム」と捉えれば、「他チーム」「他部署」「顧客・ユーザー」「社外」などが「他」になってくるでしょう。\n\nこのように「他」をより具体的に意識することで、よりふさわしい規範が見つけられると感じました。\n\n## 自も他\n\n利他というと僕は少々「自己犠牲」のニュアンスを感じてしまいます。僕はあまり自己犠牲というものが好きではありませんので、「他」に「自」を含めて規範を考えたいと思いました。利己のように自分を最優先するのではなく、他と公平に自を扱うということです。\n\n7つの習慣の一つに「Win-Win or No Deal」があります。自己犠牲では「Lose-Win」になってしまい、「No Deal」にした方がよいでしょう。同じようなことは三方よし（売り手よし、買い手よし、世間よし）でも言われていることです。\n\n[まんがでわかる 7つの習慣](https://amzn.to/3HEaJLT)\n\n## まとめ\n\nいい本でした！"},{"slug":"20231202-scrum-masters-also-need-leadership-other-than-servant-leadership","category":"blog","title":"スクラムマスターにはサーバントリーダーシップ以外のリーダーシップも必要である","tags":["スクラム","スクラムマスター","リーダーシップ","アドベントカレンダー"],"body":"\nこの記事は「[スクラムマスター Advent Calendar 2023](https://adventar.org/calendars/8883)」の二日目の記事です。\n\nスクラムマスターをしているとサーバントリーダーシップに囚われていませんか？\n特に今まで権威主義的リーダーシップでチームをまとめてきた方々がスクラムを実践しようとするとき、完全なサーバントリーダーに生まれ変わろうとしがちになります。\n\n「スクラムマスターは、スクラムチームのサーバントリーダーである」とは、2020年版より前のスクラムガイドに記されていた言葉です。\n直接的にも間接的にもそれを見た方が、これからの時代サーバントリーダーでなくてはならないと思っているのでしょう。\n\nこのブログはそんな権威主義的リーダーシップを捨てサーバントリーダーになろうと四苦八苦している方々に向けて、権威主義的リーダーシップもサーバントリーダーシップも状況に応じて使い分けてチームを目標に向けて突き進めさせないといけないのであまりサーバントリーダーに固執しなくてもいいと思いますよ、ということを主張したいと思います！\n特に、サーバントリーダーになることに囚われすぎてなかなかチームの成果が出ていない状況にある方の肩の力を抜ければ嬉しいです。\n\n## スクラムマスターとサーバントリーダーシップ\n\nまずはスクラムマスターはサーバントリーダーではなくなった話をしましょう。サーバントリーダーシップはいりませんでしたという話ではなく、サーバントリーダーシップが最も表出させるべきリーダーシップではあるがそれだけではない、という話です。\n\nスクラムマスター = サーバントリーダーはスクラムガイド2017にも直球で記載がありますので、キャッチーなワードでもあるので印象に残りやすいのだと思います。\n\n> スクラムマスターは、スクラムチームのサーバントリーダーである（訳注：メンバーが成果を上げるために支援や奉仕をするリーダーのこと）。\n> from [スクラムガイド2017](https://scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Japanese.pdf)\n\n一方で、スクラムガイド2020ではサーバントリーダーの言葉はなくなり、代わりに「真のリーダー」という言葉が登場しています。\n\n> スクラムマスターは、スクラムチームと、より大きな組織に奉仕する真のリーダーである。\n> from [スクラムガイド2020](https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)\n\nスクラムガイド2020の公開時、以下のような説明もありました。\n\n<script defer class=\"speakerdeck-embed\" data-slide=\"4\" data-id=\"f28e613f5dcb40bc931669f3dc9666ca\" data-ratio=\"1.7777777777777777\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n「サーバントリーダーになる」を目標に捉えたスクラムマスターが多かったのだろうと推察します。一方で、Ken SchwaberとJeff Sutherlandの意図は、「チームがコミットメントを達成することにリーダーシップを発揮するにはサーバントリーダーシップが重要だ」だったのでしょう。この流れは、スクラムマスターにとってサーバントリーダーシップは最も表出させるべきリーダーシップであるが、それよりもチームがコミットメントを達成するためにリーダーシップを発揮することが大切であることに改めて気づかせてもらえるものでした。\n\n## リーダーシップ\n赤子の頃から知っている言葉のように「リーダーシップ」と言ってきましたが、これはなんでしょう。ChatGPTさんにお伺いを立てました。\n\n> リーダーシップは、組織やグループを導き、方向づけ、目標に向かって導くプロセスや行動のことを指します。リーダーシップは、単なる地位や権限だけでなく、影響力や能力を駆使して他者を指導し、結果を生み出す力も含まれます。\n> from ChatGPT\n\nご教授いただきありがとうございました。ChatGPTさんでした。\n\nリーダーシップには2つの登場人物がいます。リーダーシップを発揮する「リーダー」と、発揮する対象になる「フォロワー」です。\nここでいうリーダーは組織から与えられた地位や役割ではないことに注意してください。誰もが文脈に応じてリーダーにもフォロワーにもなり得ます。\n\n## 権威主義的リーダーシップ\nサーバントリーダーシップは1970年代に提唱された考え方ですので、それまで主流だったリーダーシップが存在します。権威主義的リーダーシップと言われています。リーダーがフォロワーに対して指示的に導くスタイルで、それをやりやすくするためにマネージャーやリーダーといった権威を組織が与えていました。本質は「指示的である」というところです。フォロワーは言われたことを言われた通りにやることが求められます。権威主義的というと役職的な要素が含まれてしまいますが、このブログではこの指示し指示される関係を構築する部分にスポットライトを当てて権威主義的リーダーシップという言葉を使います。\n\n例えば、リーダー（マネージャーやリーダーの役割を組織から与えられているでしょう）がチームの目標を定め、そのためにフォロワーがやるべき業務を考え指示し、その進捗を管理する、といった行動を取っているのが権威主義的リーダーシップです。\n\n## サーバントリーダーシップ\nそんな中、1970年代にサーバントリーダーシップが提唱され、「VUCAの時代」のバズと共に広くその言葉が普及しました。\n\n> サーバントリーダーシップは、ロバート・グリーンリーフ（1904～1990）が1970年に提唱した「リーダーである人は、まず相手に奉仕し、その後相手を導くものである」というリーダーシップ哲学です。\n> from [サーバントリーダーシップとは | NPO法人　日本サーバント・リーダーシップ協会](https://www.servantleader.jp/about)\n\nVUCAの時代、目標を達成するためにはあらゆる変化に対応し続けることが求められます。それを一人のマネージャーやリーダーに委ねることはリスキーです。権威主義的リーダーシップでは、フォロワーの仕事はリーダーが全て決めていますので、リーダーの知識や経験がキャップになってしまいます。ひょっとするとあることに関してはフォロワーのAさんが得意で自分で考えてやってもらった方がよい結果を得やすいかもしれないのにです。\nじゃあリーダーはフォロワーが自分の力を発揮できるように奉仕しようじゃないか、というのがサーバントリーダーシップです。\n\n![権威主義的リーダーシップとサーバントリーダーシップの比較](./images/dominant-leadership-vs-servant-leadership.jpeg)\nfrom [サーバントリーダーシップとは | NPO法人　日本サーバント・リーダーシップ協会](https://www.servantleader.jp/about)\n\n## スクラムマスターがサーバントリーダーでいられる前提条件\nスクラムマスター = サーバントリーダーには、ある前提条件が存在します。例えばアジャイル宣言の背後にある原則の1つ「意欲に満ちた人々を集めてプロジェクトを構成します」。あるいはスクラムガイドに記載されている「スクラムチームは機能横断型で、各スプリントで価値を生み出すために必要なすべてのスキルを備えている」。立ち上がりからこの状態にあるチームはどれほどあるのでしょうか。\n\nもちろん、それをどうにかするのはスクラムマスターの役割の一つです。しかし、スクラムマスターの経験が浅かったり、組織やチームが成熟していない中でそれを実行することは容易いことではなく、その中でもチームは成果を上げることを求められます。そしてチームもまた、成果を上げたいと思っているでしょう。\n\nスクラムマスターはリーダーシップのうち、サーバントリーダーシップが最も頻繁に表出している状態が理想だということに疑う余地はありません。しかしそれは、スクラムマスターはサーバントリーダーシップしか発揮してはいけないということではないと僕は考えています。権威主義的リーダーシップを得意とする人が、急にスクラムマスターを任命され、自分の武器を封印された状態でなんとかするという縛りプレイは不要でしょう。組織やチーム、メンバーの成熟度や状態によっては、権威主義的リーダーシップを発揮するのが適切な状態も実際にはあります。サーバントリーダーシップを発揮することが自分にとってもチームにとっても最もよい選択だと思える状態に自分とチームを徐々にリードしていければOKです。\n\n## SL理論\n\n[SL理論（Situation Leadership Theory）](https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%81%E3%83%A5%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97)というものがあります。組織やチームの成熟度に応じてリーダーシップのスタイルを変えながら組織やチームを開発していく理論です。\n\n![SL理論の模式図](./images/situation-leadership-theory.webp)\n\n最初は右も左もわからない状態からスタートします（S1）。この段階では指示的行動が高く支援的行動が低い、つまり「指示」がなければチームは機能しないでしょう。それが続くと、チームは指示がなくても動けることが増えてきます（S2）。チームの自立を考えて、指示的行動はまだ高いながらも支援的な行動も増やしていきたい段階です。どんどん必要な指示的行動はなくなり、支援的行動があればチームが機能していくようになります（S3）。最終的には支援的行動すら少なくてよい自律したチームを目指すことができます（S4）。\n\n権威主義的リーダーシップはS1（~S2）、サーバントリーダーシップはS3（~S4）に当てはめられることになるでしょう。S4まで行っているならそのスクラムマスターは別のスクラムチームに異動したり組織のスクラムマスターに集中する、[Scrum Master The Way](https://scrummasterway.com/scrummasterway-ja.html0)のLv3相当だと思いますが。\n\n具体的な行動のイメージは、下記の図がわかりやすいです。上の図と横軸の向きが逆なのに注意してください。\n\n![「SL理論」とは | エンカレッジ より](./images/quadrants-of-sl-theory.webp)\n\nこの理論からわかることは、発揮するべきリーダーシップはチームやメンバーの状態・状況によって異なる、ということです。つまり、真のリーダーは状態や状況に応じたリーダーシップを取る必要があるということです。\n\nまた、これはチームに対して一意に段階が割り当てられるものでもないと認識しています。スクラムイベントについてはS3段階だからチームで運営してもらっているけど、障害対応についてはS1レベルだからS2に引き上げるためにどうリーダーシップを発揮してこうか、といった悩みもスクラムマスターにはつきものでしょう。サーバントリーダーシップを発揮しつつも、最終的には「こういう取り組みをやってみましょう！」と指示・提案する場面もあってしかるべしです。\n\nチーム全体で見るとS3だけど、とあるメンバーはまだS2、という状態もあります。チーム全体の成熟度を高めるために、またこのメンバーの幸福のためにこのメンバーに対して他のメンバーとは異なるリーダーシップを発揮する必要も出てきます。\n\n## まとめ\nこのブログの主張はスクラムマスターはサーバントリーダーシップに固執することなく、権威主義的リーダーシップとサーバントリーダーシップの両方をチームの状態・状況に合わせて使い分ける必要があるということです。それはSL理論からも言えることなのではないかと思っています。\nですので、「サーバントリーダーシップ難しすぎ！成果出てないけどこれがサーバントリーダーシップだからしょうがないよね！」という方は、成果を出しつつ自分の強みを活かしつつサーバントリーダーシップも磨き続ける道を一緒に模索していきましょう！\n\nリーダーシップの研究は沼のようです。[コンセプト理論](https://infolounge.smbcc-businessclub.jp/articles/551)では5つのリーダーシップスタイルがまとめられていたりします。真のリーダー大変ですね。\n\nそして最後に。リーダーシップは何に対しても誰か一人が発揮しなければならないものではありません。誰もが何かしらに対してリーダーシップを発揮できるものだと思います。スクラムマスターは真のリーダーだから、全てにおいてリーダーシップを発揮できなければいけないわけではありません。寧ろ、メンバーそれぞれにリーダーシップを発揮できる分野でリーダーシップを発揮してもらうようにリーダーシップを発揮することが真のリーダーなんだろうと考えている昨今です。あれ、難しいですね。笑　とにかく頑張って行きましょー。"},{"slug":"20240124-how-detailed-should-we-describe-how-of-product-backlog-items","category":"blog","title":"プロダクトバックログアイテムのHowはどこまで細かく記述すればいいのか","tags":["スクラム","スクラムマスター","プロダクトオーナー","プロダクトバックログ"],"body":"\nという質問を元同僚にされたので、回答をメモ。\n\n課題感としては、Howが定義されていないと開発に入れない、けどHowが定義されていると開発者が実装のアイデアを考える余地がない、というもの。わかるー。\n\n## プロダクトバックログアイテムの構成要素\n僕の好きなプロダクトバックログアイテムの構成要素は「ユーザーストーリー」と「受入基準」から成るシンプルなものです。元同僚も同じチームのメンバーだったので、話の前提はこちらになります。\n\nユーザーストーリーは「誰のどんなペインを解消したいか」または「誰にどんなゲインを得てほしいか」を述べたものです。\n受入基準はチケットの完了条件であり、機能実装のチケットの場合は簡単なE2Eのテスト項目のイメージのものが記述されています。\n\n今回の質問は主に受入基準を誰がどのレベルで定義するかということでした。\n\n## 僕の答え\n\n### スプリントプランニング終了時の受入基準の詳細度はチームによる\n**チームで決めましょう。**\nどのくらい詳細に書かれていれば開発者全員が迷わず開発ができ、同じ品質を提供できるのか、です。僕は簡単なE2Eのテスト項目くらいが好きと言いましたが、それはチームで合意された期待動作が存在することが安心や勇気につながると思っているからです。もちろん縛られている感覚を持つ人もいると思いますが、チームでプロダクトを作っているなら、「よしなにいい感じで最高にしとくんで」はリスクが高いです。前もってチームで合意が大事です。もちろんペアプロやモブプロの中で合意していく手段もあります。その場合、詳細度は低くても構わないかもしれません。とはいえ、見通しを立てるために詳細であった方がいいかもしれません。\n\nこのルールは一度決めたら変えないというわけではありません。チームの成熟度や取り組むプラクティスとの関連によっても徐々に変わるでしょう。詳細でなくても品質にばらつきがなかったりそのための取り組みがあるなら、記述に関して効率化が図れます。\n\n### リファインメント前の受入基準の詳細度もチームによる\n\n**チームで決めましょう。**\nリファインメント前のプロダクトバックログアイテムは叩き台です。叩き台として機能するレベル感はチームによります。プロダクトやユーザーの理解が未熟な段階では詳細な記述がなければ議論は活性化されないでしょうし、逆に成熟していれば記述が足枷になったり不自由に感じたりするメンバーもいるでしょう。チームで対話しながら徐々に詳細度を減らしていくのがおすすめです。詳細度が減ることでプロダクトやユーザーの理解の必要性が見えてきてそちらにも興味範囲が広がることがあります。ユーザーストーリーだけあればよい、の状態を目指してみたいですね。\n\n### Howの捉え方もチームによる\n何をHowと捉えるかもまたチームによります。例えば、コード・設計や利用するマネージドサービスのことも、画面構成や操作時の挙動も、文言も、機能・ソリューション自体のこともHowと捉えることができますし、人によってはWhatと捉えていることもあります。例えば、何らかの申請を毎月出さなければならない人がいて、毎月一から申請を作るのは時間がかかるので、申請テンプレートを管理できる機能を作ろうとしたとき、これはWhatでしょうか？Howでしょうか？\n新規申請ページでテンプレートを選択できる、はWhatでしょうか？Howでしょうか？\n新規申請のページの右上のテンプレートを適用ボタンからモーダルが開き、リストからテンプレートを選択すると各項目にテンプレートで設定した値がフィルインされる、はWhatでしょうか？Howでしょうか？\n開発者が求めている自由度は、モーダルではなくアコーディオンかもしれないし、ボタンの文言かもしれないし、新規申請ページ以外の導線かもしれないし、テンプレートではなく過去申請のコピーかもしれません。それはチームによって、もっと言えば「今のチーム」によって異なるはずです。それに合わせましょう。そのために話しましょう。\n\n## おわりに\nという回答でいかがでしょうか？笑\nチームのなりたい方向に向かってベイビーステップしてくのがよいんじゃないかなと思います！\n質問ありがとう！"}]